0a63b9235117c211d4bc3f5f3b7160db
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.codeFrameColumns = codeFrameColumns;
exports.default = _default;
var _highlight = require("@babel/highlight");
var _picocolors = _interopRequireWildcard(require("picocolors"), true);
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
const colors = typeof process === "object" && (process.env.FORCE_COLOR === "0" || process.env.FORCE_COLOR === "false") ? (0, _picocolors.createColors)(false) : _picocolors.default;
const compose = (f, g) => v => f(g(v));
let pcWithForcedColor = undefined;
function getColors(forceColor) {
  if (forceColor) {
    var _pcWithForcedColor;
    (_pcWithForcedColor = pcWithForcedColor) != null ? _pcWithForcedColor : pcWithForcedColor = (0, _picocolors.createColors)(true);
    return pcWithForcedColor;
  }
  return colors;
}
let deprecationWarningShown = false;
function getDefs(colors) {
  return {
    gutter: colors.gray,
    marker: compose(colors.red, colors.bold),
    message: compose(colors.red, colors.bold)
  };
}
const NEWLINE = /\r\n|[\n\r\u2028\u2029]/;
function getMarkerLines(loc, source, opts) {
  const startLoc = Object.assign({
    column: 0,
    line: -1
  }, loc.start);
  const endLoc = Object.assign({}, startLoc, loc.end);
  const {
    linesAbove = 2,
    linesBelow = 3
  } = opts || {};
  const startLine = startLoc.line;
  const startColumn = startLoc.column;
  const endLine = endLoc.line;
  const endColumn = endLoc.column;
  let start = Math.max(startLine - (linesAbove + 1), 0);
  let end = Math.min(source.length, endLine + linesBelow);
  if (startLine === -1) {
    start = 0;
  }
  if (endLine === -1) {
    end = source.length;
  }
  const lineDiff = endLine - startLine;
  const markerLines = {};
  if (lineDiff) {
    for (let i = 0; i <= lineDiff; i++) {
      const lineNumber = i + startLine;
      if (!startColumn) {
        markerLines[lineNumber] = true;
      } else if (i === 0) {
        const sourceLength = source[lineNumber - 1].length;
        markerLines[lineNumber] = [startColumn, sourceLength - startColumn + 1];
      } else if (i === lineDiff) {
        markerLines[lineNumber] = [0, endColumn];
      } else {
        const sourceLength = source[lineNumber - i].length;
        markerLines[lineNumber] = [0, sourceLength];
      }
    }
  } else {
    if (startColumn === endColumn) {
      if (startColumn) {
        markerLines[startLine] = [startColumn, 0];
      } else {
        markerLines[startLine] = true;
      }
    } else {
      markerLines[startLine] = [startColumn, endColumn - startColumn];
    }
  }
  return {
    start,
    end,
    markerLines
  };
}
function codeFrameColumns(rawLines, loc, opts = {}) {
  const highlighted = (opts.highlightCode || opts.forceColor) && (0, _highlight.shouldHighlight)(opts);
  const colors = getColors(opts.forceColor);
  const defs = getDefs(colors);
  const maybeHighlight = (fmt, string) => {
    return highlighted ? fmt(string) : string;
  };
  const lines = rawLines.split(NEWLINE);
  const {
    start,
    end,
    markerLines
  } = getMarkerLines(loc, lines, opts);
  const hasColumns = loc.start && typeof loc.start.column === "number";
  const numberMaxWidth = String(end).length;
  const highlightedLines = highlighted ? (0, _highlight.default)(rawLines, opts) : rawLines;
  let frame = highlightedLines.split(NEWLINE, end).slice(start, end).map((line, index) => {
    const number = start + 1 + index;
    const paddedNumber = ` ${number}`.slice(-numberMaxWidth);
    const gutter = ` ${paddedNumber} |`;
    const hasMarker = markerLines[number];
    const lastMarkerLine = !markerLines[number + 1];
    if (hasMarker) {
      let markerLine = "";
      if (Array.isArray(hasMarker)) {
        const markerSpacing = line.slice(0, Math.max(hasMarker[0] - 1, 0)).replace(/[^\t]/g, " ");
        const numberOfMarkers = hasMarker[1] || 1;
        markerLine = ["\n ", maybeHighlight(defs.gutter, gutter.replace(/\d/g, " ")), " ", markerSpacing, maybeHighlight(defs.marker, "^").repeat(numberOfMarkers)].join("");
        if (lastMarkerLine && opts.message) {
          markerLine += " " + maybeHighlight(defs.message, opts.message);
        }
      }
      return [maybeHighlight(defs.marker, ">"), maybeHighlight(defs.gutter, gutter), line.length > 0 ? ` ${line}` : "", markerLine].join("");
    } else {
      return ` ${maybeHighlight(defs.gutter, gutter)}${line.length > 0 ? ` ${line}` : ""}`;
    }
  }).join("\n");
  if (opts.message && !hasColumns) {
    frame = `${" ".repeat(numberMaxWidth + 1)}${opts.message}\n${frame}`;
  }
  if (highlighted) {
    return colors.reset(frame);
  } else {
    return frame;
  }
}
function _default(rawLines, lineNumber, colNumber, opts = {}) {
  if (!deprecationWarningShown) {
    deprecationWarningShown = true;
    const message = "Passing lineNumber and colNumber is deprecated to @babel/code-frame. Please use `codeFrameColumns`.";
    if (process.emitWarning) {
      process.emitWarning(message, "DeprecationWarning");
    } else {
      const deprecationError = new Error(message);
      deprecationError.name = "DeprecationWarning";
      console.warn(new Error(message));
    }
  }
  colNumber = Math.max(colNumber, 0);
  const location = {
    start: {
      column: colNumber,
      line: lineNumber
    }
  };
  return codeFrameColumns(rawLines, location, opts);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfaGlnaGxpZ2h0IiwicmVxdWlyZSIsIl9waWNvY29sb3JzIiwiX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsIk9iamVjdCIsImRlZmluZVByb3BlcnR5IiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwidSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImkiLCJzZXQiLCJjb2xvcnMiLCJwcm9jZXNzIiwiZW52IiwiRk9SQ0VfQ09MT1IiLCJjcmVhdGVDb2xvcnMiLCJjb21wb3NlIiwiZiIsImciLCJ2IiwicGNXaXRoRm9yY2VkQ29sb3IiLCJ1bmRlZmluZWQiLCJnZXRDb2xvcnMiLCJmb3JjZUNvbG9yIiwiX3BjV2l0aEZvcmNlZENvbG9yIiwiZGVwcmVjYXRpb25XYXJuaW5nU2hvd24iLCJnZXREZWZzIiwiZ3V0dGVyIiwiZ3JheSIsIm1hcmtlciIsInJlZCIsImJvbGQiLCJtZXNzYWdlIiwiTkVXTElORSIsImdldE1hcmtlckxpbmVzIiwibG9jIiwic291cmNlIiwib3B0cyIsInN0YXJ0TG9jIiwiYXNzaWduIiwiY29sdW1uIiwibGluZSIsInN0YXJ0IiwiZW5kTG9jIiwiZW5kIiwibGluZXNBYm92ZSIsImxpbmVzQmVsb3ciLCJzdGFydExpbmUiLCJzdGFydENvbHVtbiIsImVuZExpbmUiLCJlbmRDb2x1bW4iLCJNYXRoIiwibWF4IiwibWluIiwibGVuZ3RoIiwibGluZURpZmYiLCJtYXJrZXJMaW5lcyIsImxpbmVOdW1iZXIiLCJzb3VyY2VMZW5ndGgiLCJjb2RlRnJhbWVDb2x1bW5zIiwicmF3TGluZXMiLCJoaWdobGlnaHRlZCIsImhpZ2hsaWdodENvZGUiLCJzaG91bGRIaWdobGlnaHQiLCJkZWZzIiwibWF5YmVIaWdobGlnaHQiLCJmbXQiLCJzdHJpbmciLCJsaW5lcyIsInNwbGl0IiwiaGFzQ29sdW1ucyIsIm51bWJlck1heFdpZHRoIiwiU3RyaW5nIiwiaGlnaGxpZ2h0ZWRMaW5lcyIsImZyYW1lIiwic2xpY2UiLCJtYXAiLCJpbmRleCIsIm51bWJlciIsInBhZGRlZE51bWJlciIsImhhc01hcmtlciIsImxhc3RNYXJrZXJMaW5lIiwibWFya2VyTGluZSIsIkFycmF5IiwiaXNBcnJheSIsIm1hcmtlclNwYWNpbmciLCJyZXBsYWNlIiwibnVtYmVyT2ZNYXJrZXJzIiwicmVwZWF0Iiwiam9pbiIsInJlc2V0IiwiX2RlZmF1bHQiLCJjb2xOdW1iZXIiLCJlbWl0V2FybmluZyIsImRlcHJlY2F0aW9uRXJyb3IiLCJFcnJvciIsIm5hbWUiLCJjb25zb2xlIiwid2FybiIsImxvY2F0aW9uIl0sInNvdXJjZXMiOlsiLi4vc3JjL2luZGV4LnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBoaWdobGlnaHQsIHsgc2hvdWxkSGlnaGxpZ2h0IH0gZnJvbSBcIkBiYWJlbC9oaWdobGlnaHRcIjtcblxuaW1wb3J0IF9jb2xvcnMsIHsgY3JlYXRlQ29sb3JzIH0gZnJvbSBcInBpY29jb2xvcnNcIjtcbmltcG9ydCB0eXBlIHsgQ29sb3JzLCBGb3JtYXR0ZXIgfSBmcm9tIFwicGljb2NvbG9ycy90eXBlc1wiO1xuLy8gU2VlIGh0dHBzOi8vZ2l0aHViLmNvbS9hbGV4ZXlyYXNwb3Bvdi9waWNvY29sb3JzL2lzc3Vlcy82MlxuY29uc3QgY29sb3JzID1cbiAgdHlwZW9mIHByb2Nlc3MgPT09IFwib2JqZWN0XCIgJiZcbiAgKHByb2Nlc3MuZW52LkZPUkNFX0NPTE9SID09PSBcIjBcIiB8fCBwcm9jZXNzLmVudi5GT1JDRV9DT0xPUiA9PT0gXCJmYWxzZVwiKVxuICAgID8gY3JlYXRlQ29sb3JzKGZhbHNlKVxuICAgIDogX2NvbG9ycztcblxuY29uc3QgY29tcG9zZTogPFQsIFUsIFY+KGY6IChndjogVSkgPT4gViwgZzogKHY6IFQpID0+IFUpID0+ICh2OiBUKSA9PiBWID1cbiAgKGYsIGcpID0+IHYgPT5cbiAgICBmKGcodikpO1xuXG5sZXQgcGNXaXRoRm9yY2VkQ29sb3I6IENvbG9ycyA9IHVuZGVmaW5lZDtcbmZ1bmN0aW9uIGdldENvbG9ycyhmb3JjZUNvbG9yOiBib29sZWFuKSB7XG4gIGlmIChmb3JjZUNvbG9yKSB7XG4gICAgcGNXaXRoRm9yY2VkQ29sb3IgPz89IGNyZWF0ZUNvbG9ycyh0cnVlKTtcbiAgICByZXR1cm4gcGNXaXRoRm9yY2VkQ29sb3I7XG4gIH1cbiAgcmV0dXJuIGNvbG9ycztcbn1cblxubGV0IGRlcHJlY2F0aW9uV2FybmluZ1Nob3duID0gZmFsc2U7XG5cbnR5cGUgTG9jYXRpb24gPSB7XG4gIGNvbHVtbjogbnVtYmVyO1xuICBsaW5lOiBudW1iZXI7XG59O1xuXG50eXBlIE5vZGVMb2NhdGlvbiA9IHtcbiAgZW5kPzogTG9jYXRpb247XG4gIHN0YXJ0OiBMb2NhdGlvbjtcbn07XG5cbmV4cG9ydCBpbnRlcmZhY2UgT3B0aW9ucyB7XG4gIC8qKiBTeW50YXggaGlnaGxpZ2h0IHRoZSBjb2RlIGFzIEphdmFTY3JpcHQgZm9yIHRlcm1pbmFscy4gZGVmYXVsdDogZmFsc2UgKi9cbiAgaGlnaGxpZ2h0Q29kZT86IGJvb2xlYW47XG4gIC8qKiAgVGhlIG51bWJlciBvZiBsaW5lcyB0byBzaG93IGFib3ZlIHRoZSBlcnJvci4gZGVmYXVsdDogMiAqL1xuICBsaW5lc0Fib3ZlPzogbnVtYmVyO1xuICAvKiogIFRoZSBudW1iZXIgb2YgbGluZXMgdG8gc2hvdyBiZWxvdyB0aGUgZXJyb3IuIGRlZmF1bHQ6IDMgKi9cbiAgbGluZXNCZWxvdz86IG51bWJlcjtcbiAgLyoqXG4gICAqIEZvcmNpYmx5IHN5bnRheCBoaWdobGlnaHQgdGhlIGNvZGUgYXMgSmF2YVNjcmlwdCAoZm9yIG5vbi10ZXJtaW5hbHMpO1xuICAgKiBvdmVycmlkZXMgaGlnaGxpZ2h0Q29kZS5cbiAgICogZGVmYXVsdDogZmFsc2VcbiAgICovXG4gIGZvcmNlQ29sb3I/OiBib29sZWFuO1xuICAvKipcbiAgICogUGFzcyBpbiBhIHN0cmluZyB0byBiZSBkaXNwbGF5ZWQgaW5saW5lIChpZiBwb3NzaWJsZSkgbmV4dCB0byB0aGVcbiAgICogaGlnaGxpZ2h0ZWQgbG9jYXRpb24gaW4gdGhlIGNvZGUuIElmIGl0IGNhbid0IGJlIHBvc2l0aW9uZWQgaW5saW5lLFxuICAgKiBpdCB3aWxsIGJlIHBsYWNlZCBhYm92ZSB0aGUgY29kZSBmcmFtZS5cbiAgICogZGVmYXVsdDogbm90aGluZ1xuICAgKi9cbiAgbWVzc2FnZT86IHN0cmluZztcbn1cblxuLyoqXG4gKiBTdHlsZXMgZm9yIGNvZGUgZnJhbWUgdG9rZW4gdHlwZXMuXG4gKi9cbmZ1bmN0aW9uIGdldERlZnMoY29sb3JzOiBDb2xvcnMpIHtcbiAgcmV0dXJuIHtcbiAgICBndXR0ZXI6IGNvbG9ycy5ncmF5LFxuICAgIG1hcmtlcjogY29tcG9zZShjb2xvcnMucmVkLCBjb2xvcnMuYm9sZCksXG4gICAgbWVzc2FnZTogY29tcG9zZShjb2xvcnMucmVkLCBjb2xvcnMuYm9sZCksXG4gIH07XG59XG5cbi8qKlxuICogUmVnRXhwIHRvIHRlc3QgZm9yIG5ld2xpbmVzIGluIHRlcm1pbmFsLlxuICovXG5cbmNvbnN0IE5FV0xJTkUgPSAvXFxyXFxufFtcXG5cXHJcXHUyMDI4XFx1MjAyOV0vO1xuXG4vKipcbiAqIEV4dHJhY3Qgd2hhdCBsaW5lcyBzaG91bGQgYmUgbWFya2VkIGFuZCBoaWdobGlnaHRlZC5cbiAqL1xuXG50eXBlIE1hcmtlckxpbmVzID0gUmVjb3JkPG51bWJlciwgdHJ1ZSB8IFtudW1iZXIsIG51bWJlcl0+O1xuXG5mdW5jdGlvbiBnZXRNYXJrZXJMaW5lcyhcbiAgbG9jOiBOb2RlTG9jYXRpb24sXG4gIHNvdXJjZTogQXJyYXk8c3RyaW5nPixcbiAgb3B0czogT3B0aW9ucyxcbik6IHtcbiAgc3RhcnQ6IG51bWJlcjtcbiAgZW5kOiBudW1iZXI7XG4gIG1hcmtlckxpbmVzOiBNYXJrZXJMaW5lcztcbn0ge1xuICBjb25zdCBzdGFydExvYzogTG9jYXRpb24gPSB7XG4gICAgY29sdW1uOiAwLFxuICAgIGxpbmU6IC0xLFxuICAgIC4uLmxvYy5zdGFydCxcbiAgfTtcbiAgY29uc3QgZW5kTG9jOiBMb2NhdGlvbiA9IHtcbiAgICAuLi5zdGFydExvYyxcbiAgICAuLi5sb2MuZW5kLFxuICB9O1xuICBjb25zdCB7IGxpbmVzQWJvdmUgPSAyLCBsaW5lc0JlbG93ID0gMyB9ID0gb3B0cyB8fCB7fTtcbiAgY29uc3Qgc3RhcnRMaW5lID0gc3RhcnRMb2MubGluZTtcbiAgY29uc3Qgc3RhcnRDb2x1bW4gPSBzdGFydExvYy5jb2x1bW47XG4gIGNvbnN0IGVuZExpbmUgPSBlbmRMb2MubGluZTtcbiAgY29uc3QgZW5kQ29sdW1uID0gZW5kTG9jLmNvbHVtbjtcblxuICBsZXQgc3RhcnQgPSBNYXRoLm1heChzdGFydExpbmUgLSAobGluZXNBYm92ZSArIDEpLCAwKTtcbiAgbGV0IGVuZCA9IE1hdGgubWluKHNvdXJjZS5sZW5ndGgsIGVuZExpbmUgKyBsaW5lc0JlbG93KTtcblxuICBpZiAoc3RhcnRMaW5lID09PSAtMSkge1xuICAgIHN0YXJ0ID0gMDtcbiAgfVxuXG4gIGlmIChlbmRMaW5lID09PSAtMSkge1xuICAgIGVuZCA9IHNvdXJjZS5sZW5ndGg7XG4gIH1cblxuICBjb25zdCBsaW5lRGlmZiA9IGVuZExpbmUgLSBzdGFydExpbmU7XG4gIGNvbnN0IG1hcmtlckxpbmVzOiBNYXJrZXJMaW5lcyA9IHt9O1xuXG4gIGlmIChsaW5lRGlmZikge1xuICAgIGZvciAobGV0IGkgPSAwOyBpIDw9IGxpbmVEaWZmOyBpKyspIHtcbiAgICAgIGNvbnN0IGxpbmVOdW1iZXIgPSBpICsgc3RhcnRMaW5lO1xuXG4gICAgICBpZiAoIXN0YXJ0Q29sdW1uKSB7XG4gICAgICAgIG1hcmtlckxpbmVzW2xpbmVOdW1iZXJdID0gdHJ1ZTtcbiAgICAgIH0gZWxzZSBpZiAoaSA9PT0gMCkge1xuICAgICAgICBjb25zdCBzb3VyY2VMZW5ndGggPSBzb3VyY2VbbGluZU51bWJlciAtIDFdLmxlbmd0aDtcblxuICAgICAgICBtYXJrZXJMaW5lc1tsaW5lTnVtYmVyXSA9IFtzdGFydENvbHVtbiwgc291cmNlTGVuZ3RoIC0gc3RhcnRDb2x1bW4gKyAxXTtcbiAgICAgIH0gZWxzZSBpZiAoaSA9PT0gbGluZURpZmYpIHtcbiAgICAgICAgbWFya2VyTGluZXNbbGluZU51bWJlcl0gPSBbMCwgZW5kQ29sdW1uXTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIGNvbnN0IHNvdXJjZUxlbmd0aCA9IHNvdXJjZVtsaW5lTnVtYmVyIC0gaV0ubGVuZ3RoO1xuXG4gICAgICAgIG1hcmtlckxpbmVzW2xpbmVOdW1iZXJdID0gWzAsIHNvdXJjZUxlbmd0aF07XG4gICAgICB9XG4gICAgfVxuICB9IGVsc2Uge1xuICAgIGlmIChzdGFydENvbHVtbiA9PT0gZW5kQ29sdW1uKSB7XG4gICAgICBpZiAoc3RhcnRDb2x1bW4pIHtcbiAgICAgICAgbWFya2VyTGluZXNbc3RhcnRMaW5lXSA9IFtzdGFydENvbHVtbiwgMF07XG4gICAgICB9IGVsc2Uge1xuICAgICAgICBtYXJrZXJMaW5lc1tzdGFydExpbmVdID0gdHJ1ZTtcbiAgICAgIH1cbiAgICB9IGVsc2Uge1xuICAgICAgbWFya2VyTGluZXNbc3RhcnRMaW5lXSA9IFtzdGFydENvbHVtbiwgZW5kQ29sdW1uIC0gc3RhcnRDb2x1bW5dO1xuICAgIH1cbiAgfVxuXG4gIHJldHVybiB7IHN0YXJ0LCBlbmQsIG1hcmtlckxpbmVzIH07XG59XG5cbmV4cG9ydCBmdW5jdGlvbiBjb2RlRnJhbWVDb2x1bW5zKFxuICByYXdMaW5lczogc3RyaW5nLFxuICBsb2M6IE5vZGVMb2NhdGlvbixcbiAgb3B0czogT3B0aW9ucyA9IHt9LFxuKTogc3RyaW5nIHtcbiAgY29uc3QgaGlnaGxpZ2h0ZWQgPVxuICAgIChvcHRzLmhpZ2hsaWdodENvZGUgfHwgb3B0cy5mb3JjZUNvbG9yKSAmJiBzaG91bGRIaWdobGlnaHQob3B0cyk7XG4gIGNvbnN0IGNvbG9ycyA9IGdldENvbG9ycyhvcHRzLmZvcmNlQ29sb3IpO1xuICBjb25zdCBkZWZzID0gZ2V0RGVmcyhjb2xvcnMpO1xuICBjb25zdCBtYXliZUhpZ2hsaWdodCA9IChmbXQ6IEZvcm1hdHRlciwgc3RyaW5nOiBzdHJpbmcpID0+IHtcbiAgICByZXR1cm4gaGlnaGxpZ2h0ZWQgPyBmbXQoc3RyaW5nKSA6IHN0cmluZztcbiAgfTtcbiAgY29uc3QgbGluZXMgPSByYXdMaW5lcy5zcGxpdChORVdMSU5FKTtcbiAgY29uc3QgeyBzdGFydCwgZW5kLCBtYXJrZXJMaW5lcyB9ID0gZ2V0TWFya2VyTGluZXMobG9jLCBsaW5lcywgb3B0cyk7XG4gIGNvbnN0IGhhc0NvbHVtbnMgPSBsb2Muc3RhcnQgJiYgdHlwZW9mIGxvYy5zdGFydC5jb2x1bW4gPT09IFwibnVtYmVyXCI7XG5cbiAgY29uc3QgbnVtYmVyTWF4V2lkdGggPSBTdHJpbmcoZW5kKS5sZW5ndGg7XG5cbiAgY29uc3QgaGlnaGxpZ2h0ZWRMaW5lcyA9IGhpZ2hsaWdodGVkID8gaGlnaGxpZ2h0KHJhd0xpbmVzLCBvcHRzKSA6IHJhd0xpbmVzO1xuXG4gIGxldCBmcmFtZSA9IGhpZ2hsaWdodGVkTGluZXNcbiAgICAuc3BsaXQoTkVXTElORSwgZW5kKVxuICAgIC5zbGljZShzdGFydCwgZW5kKVxuICAgIC5tYXAoKGxpbmUsIGluZGV4KSA9PiB7XG4gICAgICBjb25zdCBudW1iZXIgPSBzdGFydCArIDEgKyBpbmRleDtcbiAgICAgIGNvbnN0IHBhZGRlZE51bWJlciA9IGAgJHtudW1iZXJ9YC5zbGljZSgtbnVtYmVyTWF4V2lkdGgpO1xuICAgICAgY29uc3QgZ3V0dGVyID0gYCAke3BhZGRlZE51bWJlcn0gfGA7XG4gICAgICBjb25zdCBoYXNNYXJrZXIgPSBtYXJrZXJMaW5lc1tudW1iZXJdO1xuICAgICAgY29uc3QgbGFzdE1hcmtlckxpbmUgPSAhbWFya2VyTGluZXNbbnVtYmVyICsgMV07XG4gICAgICBpZiAoaGFzTWFya2VyKSB7XG4gICAgICAgIGxldCBtYXJrZXJMaW5lID0gXCJcIjtcbiAgICAgICAgaWYgKEFycmF5LmlzQXJyYXkoaGFzTWFya2VyKSkge1xuICAgICAgICAgIGNvbnN0IG1hcmtlclNwYWNpbmcgPSBsaW5lXG4gICAgICAgICAgICAuc2xpY2UoMCwgTWF0aC5tYXgoaGFzTWFya2VyWzBdIC0gMSwgMCkpXG4gICAgICAgICAgICAucmVwbGFjZSgvW15cXHRdL2csIFwiIFwiKTtcbiAgICAgICAgICBjb25zdCBudW1iZXJPZk1hcmtlcnMgPSBoYXNNYXJrZXJbMV0gfHwgMTtcblxuICAgICAgICAgIG1hcmtlckxpbmUgPSBbXG4gICAgICAgICAgICBcIlxcbiBcIixcbiAgICAgICAgICAgIG1heWJlSGlnaGxpZ2h0KGRlZnMuZ3V0dGVyLCBndXR0ZXIucmVwbGFjZSgvXFxkL2csIFwiIFwiKSksXG4gICAgICAgICAgICBcIiBcIixcbiAgICAgICAgICAgIG1hcmtlclNwYWNpbmcsXG4gICAgICAgICAgICBtYXliZUhpZ2hsaWdodChkZWZzLm1hcmtlciwgXCJeXCIpLnJlcGVhdChudW1iZXJPZk1hcmtlcnMpLFxuICAgICAgICAgIF0uam9pbihcIlwiKTtcblxuICAgICAgICAgIGlmIChsYXN0TWFya2VyTGluZSAmJiBvcHRzLm1lc3NhZ2UpIHtcbiAgICAgICAgICAgIG1hcmtlckxpbmUgKz0gXCIgXCIgKyBtYXliZUhpZ2hsaWdodChkZWZzLm1lc3NhZ2UsIG9wdHMubWVzc2FnZSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG4gICAgICAgIHJldHVybiBbXG4gICAgICAgICAgbWF5YmVIaWdobGlnaHQoZGVmcy5tYXJrZXIsIFwiPlwiKSxcbiAgICAgICAgICBtYXliZUhpZ2hsaWdodChkZWZzLmd1dHRlciwgZ3V0dGVyKSxcbiAgICAgICAgICBsaW5lLmxlbmd0aCA+IDAgPyBgICR7bGluZX1gIDogXCJcIixcbiAgICAgICAgICBtYXJrZXJMaW5lLFxuICAgICAgICBdLmpvaW4oXCJcIik7XG4gICAgICB9IGVsc2Uge1xuICAgICAgICByZXR1cm4gYCAke21heWJlSGlnaGxpZ2h0KGRlZnMuZ3V0dGVyLCBndXR0ZXIpfSR7XG4gICAgICAgICAgbGluZS5sZW5ndGggPiAwID8gYCAke2xpbmV9YCA6IFwiXCJcbiAgICAgICAgfWA7XG4gICAgICB9XG4gICAgfSlcbiAgICAuam9pbihcIlxcblwiKTtcblxuICBpZiAob3B0cy5tZXNzYWdlICYmICFoYXNDb2x1bW5zKSB7XG4gICAgZnJhbWUgPSBgJHtcIiBcIi5yZXBlYXQobnVtYmVyTWF4V2lkdGggKyAxKX0ke29wdHMubWVzc2FnZX1cXG4ke2ZyYW1lfWA7XG4gIH1cblxuICBpZiAoaGlnaGxpZ2h0ZWQpIHtcbiAgICByZXR1cm4gY29sb3JzLnJlc2V0KGZyYW1lKTtcbiAgfSBlbHNlIHtcbiAgICByZXR1cm4gZnJhbWU7XG4gIH1cbn1cblxuLyoqXG4gKiBDcmVhdGUgYSBjb2RlIGZyYW1lLCBhZGRpbmcgbGluZSBudW1iZXJzLCBjb2RlIGhpZ2hsaWdodGluZywgYW5kIHBvaW50aW5nIHRvIGEgZ2l2ZW4gcG9zaXRpb24uXG4gKi9cblxuZXhwb3J0IGRlZmF1bHQgZnVuY3Rpb24gKFxuICByYXdMaW5lczogc3RyaW5nLFxuICBsaW5lTnVtYmVyOiBudW1iZXIsXG4gIGNvbE51bWJlcj86IG51bWJlciB8IG51bGwsXG4gIG9wdHM6IE9wdGlvbnMgPSB7fSxcbik6IHN0cmluZyB7XG4gIGlmICghZGVwcmVjYXRpb25XYXJuaW5nU2hvd24pIHtcbiAgICBkZXByZWNhdGlvbldhcm5pbmdTaG93biA9IHRydWU7XG5cbiAgICBjb25zdCBtZXNzYWdlID1cbiAgICAgIFwiUGFzc2luZyBsaW5lTnVtYmVyIGFuZCBjb2xOdW1iZXIgaXMgZGVwcmVjYXRlZCB0byBAYmFiZWwvY29kZS1mcmFtZS4gUGxlYXNlIHVzZSBgY29kZUZyYW1lQ29sdW1uc2AuXCI7XG5cbiAgICBpZiAocHJvY2Vzcy5lbWl0V2FybmluZykge1xuICAgICAgLy8gQSBzdHJpbmcgaXMgZGlyZWN0bHkgc3VwcGxpZWQgdG8gZW1pdFdhcm5pbmcsIGJlY2F1c2Ugd2hlbiBzdXBwbHlpbmcgYW5cbiAgICAgIC8vIEVycm9yIG9iamVjdCBub2RlIHRocm93cyBpbiB0aGUgdGVzdHMgYmVjYXVzZSBvZiBkaWZmZXJlbnQgY29udGV4dHNcbiAgICAgIHByb2Nlc3MuZW1pdFdhcm5pbmcobWVzc2FnZSwgXCJEZXByZWNhdGlvbldhcm5pbmdcIik7XG4gICAgfSBlbHNlIHtcbiAgICAgIGNvbnN0IGRlcHJlY2F0aW9uRXJyb3IgPSBuZXcgRXJyb3IobWVzc2FnZSk7XG4gICAgICBkZXByZWNhdGlvbkVycm9yLm5hbWUgPSBcIkRlcHJlY2F0aW9uV2FybmluZ1wiO1xuICAgICAgY29uc29sZS53YXJuKG5ldyBFcnJvcihtZXNzYWdlKSk7XG4gICAgfVxuICB9XG5cbiAgY29sTnVtYmVyID0gTWF0aC5tYXgoY29sTnVtYmVyLCAwKTtcblxuICBjb25zdCBsb2NhdGlvbjogTm9kZUxvY2F0aW9uID0ge1xuICAgIHN0YXJ0OiB7IGNvbHVtbjogY29sTnVtYmVyLCBsaW5lOiBsaW5lTnVtYmVyIH0sXG4gIH07XG5cbiAgcmV0dXJuIGNvZGVGcmFtZUNvbHVtbnMocmF3TGluZXMsIGxvY2F0aW9uLCBvcHRzKTtcbn1cbiJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLElBQUFBLFVBQUEsR0FBQUMsT0FBQTtBQUVBLElBQUFDLFdBQUEsR0FBQUMsdUJBQUEsQ0FBQUYsT0FBQTtBQUFtRCxTQUFBRyx5QkFBQUMsQ0FBQTtFQUFBLHlCQUFBQyxPQUFBO0VBQUEsSUFBQUMsQ0FBQSxPQUFBRCxPQUFBO0lBQUFFLENBQUEsT0FBQUYsT0FBQTtFQUFBLFFBQUFGLHdCQUFBLFlBQUFBLENBQUFDLENBQUE7SUFBQSxPQUFBQSxDQUFBLEdBQUFHLENBQUEsR0FBQUQsQ0FBQTtFQUFBLEdBQUFGLENBQUE7QUFBQTtBQUFBLFNBQUFGLHdCQUFBRSxDQUFBLEVBQUFFLENBQUE7RUFBQSxLQUFBQSxDQUFBLElBQUFGLENB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