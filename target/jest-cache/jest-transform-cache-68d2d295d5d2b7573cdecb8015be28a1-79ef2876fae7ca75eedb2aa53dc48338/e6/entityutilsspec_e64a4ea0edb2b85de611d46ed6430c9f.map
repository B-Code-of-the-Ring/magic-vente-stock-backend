{"file":"/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/shared/util/entity-utils.spec.ts","mappings":";;AAAA,iDAAwD;AAExD,QAAQ,CAAC,cAAc,EAAE,GAAG,EAAE;IAC5B,QAAQ,CAAC,aAAa,EAAE,GAAG,EAAE;QAC3B,EAAE,CAAC,qCAAqC,EAAE,GAAG,EAAE;YAC7C,MAAM,OAAO,GAAG;gBACd,CAAC,EAAE;oBACD,EAAE,EAAE,CAAC;iBACN;aACF,CAAC;YACF,MAAM,OAAO,GAAG;gBACd,CAAC,EAAE;oBACD,EAAE,EAAE,GAAG;iBACR;aACF,CAAC;YAEF,MAAM,CAAC,IAAA,0BAAW,oBAAM,OAAO,EAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;YACrD,MAAM,CAAC,IAAA,0BAAW,oBAAM,OAAO,EAAG,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,CAAC;QACvD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,uCAAuC,EAAE,GAAG,EAAE;YAC/C,MAAM,MAAM,GAAG;gBACb,CAAC,EAAE;oBACD,EAAE,EAAE,EAAE;iBACP;aACF,CAAC;YAEF,MAAM,CAAC,IAAA,0BAAW,oBAAM,MAAM,EAAG,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACjD,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,+CAA+C,EAAE,GAAG,EAAE;YACvD,MAAM,MAAM,GAAG;gBACb,CAAC,EAAE,EAAE;gBACL,CAAC,EAAE,CAAC;gBACJ,CAAC,EAAE,EAAE;gBACL,CAAC,EAAE,GAAG;aACP,CAAC;YAEF,MAAM,CAAC,IAAA,0BAAW,oBAAM,MAAM,EAAG,CAAC,CAAC,OAAO,CAAC,MAAM,CAAC,CAAC;QACrD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;IAEH,QAAQ,CAAC,WAAW,EAAE,GAAG,EAAE;QACzB,EAAE,CAAC,6CAA6C,EAAE,GAAG,EAAE;YACrD,MAAM,GAAG,GAAG,CAAC,UAAU,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC;YAElD,MAAM,CAAC,IAAA,wBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,CAAC,EAAE,EAAE,EAAE,UAAU,EAAE,EAAE,EAAE,EAAE,EAAE,CAAC,EAAE,EAAE,EAAE,EAAE,EAAE,EAAE,GAAG,EAAE,OAAO,EAAE,EAAE,CAAC,CAAC,CAAC;QAC5F,CAAC,CAAC,CAAC;QAEH,EAAE,CAAC,8BAA8B,EAAE,GAAG,EAAE;YACtC,MAAM,GAAG,GAAG,EAAE,CAAC;YAEf,MAAM,CAAC,IAAA,wBAAS,EAAC,GAAG,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,CAAC,CAAC;QACrC,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/shared/util/entity-utils.spec.ts"],"sourcesContent":["import { cleanEntity, mapIdList } from './entity-utils';\n\ndescribe('Entity utils', () => {\n  describe('cleanEntity', () => {\n    it('should not remove fields with an id', () => {\n      const entityA = {\n        a: {\n          id: 5,\n        },\n      };\n      const entityB = {\n        a: {\n          id: '5',\n        },\n      };\n\n      expect(cleanEntity({ ...entityA })).toEqual(entityA);\n      expect(cleanEntity({ ...entityB })).toEqual(entityB);\n    });\n\n    it('should remove fields with an empty id', () => {\n      const entity = {\n        a: {\n          id: '',\n        },\n      };\n\n      expect(cleanEntity({ ...entity })).toEqual({});\n    });\n\n    it('should not remove fields that are not objects', () => {\n      const entity = {\n        a: '',\n        b: 5,\n        c: [],\n        d: '5',\n      };\n\n      expect(cleanEntity({ ...entity })).toEqual(entity);\n    });\n  });\n\n  describe('mapIdList', () => {\n    it(\"should map ids no matter the element's type\", () => {\n      const ids = ['jhipster', '', 1, { key: 'value' }];\n\n      expect(mapIdList(ids)).toEqual([{ id: 'jhipster' }, { id: 1 }, { id: { key: 'value' } }]);\n    });\n\n    it('should return an empty array', () => {\n      const ids = [];\n\n      expect(mapIdList(ids)).toEqual([]);\n    });\n  });\n});\n"],"version":3}