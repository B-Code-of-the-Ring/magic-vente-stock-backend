b0fac4bd15e1d524560c9685b163e191
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const entity_utils_1 = require("./entity-utils");
describe('Entity utils', () => {
    describe('cleanEntity', () => {
        it('should not remove fields with an id', () => {
            const entityA = {
                a: {
                    id: 5,
                },
            };
            const entityB = {
                a: {
                    id: '5',
                },
            };
            expect((0, entity_utils_1.cleanEntity)(Object.assign({}, entityA))).toEqual(entityA);
            expect((0, entity_utils_1.cleanEntity)(Object.assign({}, entityB))).toEqual(entityB);
        });
        it('should remove fields with an empty id', () => {
            const entity = {
                a: {
                    id: '',
                },
            };
            expect((0, entity_utils_1.cleanEntity)(Object.assign({}, entity))).toEqual({});
        });
        it('should not remove fields that are not objects', () => {
            const entity = {
                a: '',
                b: 5,
                c: [],
                d: '5',
            };
            expect((0, entity_utils_1.cleanEntity)(Object.assign({}, entity))).toEqual(entity);
        });
    });
    describe('mapIdList', () => {
        it("should map ids no matter the element's type", () => {
            const ids = ['jhipster', '', 1, { key: 'value' }];
            expect((0, entity_utils_1.mapIdList)(ids)).toEqual([{ id: 'jhipster' }, { id: 1 }, { id: { key: 'value' } }]);
        });
        it('should return an empty array', () => {
            const ids = [];
            expect((0, entity_utils_1.mapIdList)(ids)).toEqual([]);
        });
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3BjY28wNTYvRG9jdW1lbnRzL0NvdXJzIElUVS9yaWJvdWNob24vbWFnaWN2ZW50ZXN0b2NrL3NyYy9tYWluL3dlYmFwcC9hcHAvc2hhcmVkL3V0aWwvZW50aXR5LXV0aWxzLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7QUFBQSxpREFBd0Q7QUFFeEQsUUFBUSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7SUFDNUIsUUFBUSxDQUFDLGFBQWEsRUFBRSxHQUFHLEVBQUU7UUFDM0IsRUFBRSxDQUFDLHFDQUFxQyxFQUFFLEdBQUcsRUFBRTtZQUM3QyxNQUFNLE9BQU8sR0FBRztnQkFDZCxDQUFDLEVBQUU7b0JBQ0QsRUFBRSxFQUFFLENBQUM7aUJBQ047YUFDRixDQUFDO1lBQ0YsTUFBTSxPQUFPLEdBQUc7Z0JBQ2QsQ0FBQyxFQUFFO29CQUNELEVBQUUsRUFBRSxHQUFHO2lCQUNSO2FBQ0YsQ0FBQztZQUVGLE1BQU0sQ0FBQyxJQUFBLDBCQUFXLG9CQUFNLE9BQU8sRUFBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1lBQ3JELE1BQU0sQ0FBQyxJQUFBLDBCQUFXLG9CQUFNLE9BQU8sRUFBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO1FBQ3ZELENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLHVDQUF1QyxFQUFFLEdBQUcsRUFBRTtZQUMvQyxNQUFNLE1BQU0sR0FBRztnQkFDYixDQUFDLEVBQUU7b0JBQ0QsRUFBRSxFQUFFLEVBQUU7aUJBQ1A7YUFDRixDQUFDO1lBRUYsTUFBTSxDQUFDLElBQUEsMEJBQVcsb0JBQU0sTUFBTSxFQUFHLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDakQsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsK0NBQStDLEVBQUUsR0FBRyxFQUFFO1lBQ3ZELE1BQU0sTUFBTSxHQUFHO2dCQUNiLENBQUMsRUFBRSxFQUFFO2dCQUNMLENBQUMsRUFBRSxDQUFDO2dCQUNKLENBQUMsRUFBRSxFQUFFO2dCQUNMLENBQUMsRUFBRSxHQUFHO2FBQ1AsQ0FBQztZQUVGLE1BQU0sQ0FBQyxJQUFBLDBCQUFXLG9CQUFNLE1BQU0sRUFBRyxDQUFDLENBQUMsT0FBTyxDQUFDLE1BQU0sQ0FBQyxDQUFDO1FBQ3JELENBQUMsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxRQUFRLENBQUMsV0FBVyxFQUFFLEdBQUcsRUFBRTtRQUN6QixFQUFFLENBQUMsNkNBQTZDLEVBQUUsR0FBRyxFQUFFO1lBQ3JELE1BQU0sR0FBRyxHQUFHLENBQUMsVUFBVSxFQUFFLEVBQUUsRUFBRSxDQUFDLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLENBQUMsQ0FBQztZQUVsRCxNQUFNLENBQUMsSUFBQSx3QkFBUyxFQUFDLEdBQUcsQ0FBQyxDQUFDLENBQUMsT0FBTyxDQUFDLENBQUMsRUFBRSxFQUFFLEVBQUUsVUFBVSxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsQ0FBQyxFQUFFLEVBQUUsRUFBRSxFQUFFLEVBQUUsRUFBRSxHQUFHLEVBQUUsT0FBTyxFQUFFLEVBQUUsQ0FBQyxDQUFDLENBQUM7UUFDNUYsQ0FBQyxDQUFDLENBQUM7UUFFSCxFQUFFLENBQUMsOEJBQThCLEVBQUUsR0FBRyxFQUFFO1lBQ3RDLE1BQU0sR0FBRyxHQUFHLEVBQUUsQ0FBQztZQUVmLE1BQU0sQ0FBQyxJQUFBLHdCQUFTLEVBQUMsR0FBRyxDQUFDLENBQUMsQ0FBQyxPQUFPLENBQUMsRUFBRSxDQUFDLENBQUM7UUFDckMsQ0FBQyxDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztBQUNMLENBQUMsQ0FBQyxDQUFDIiwibmFtZXMiOltdLCJzb3VyY2VzIjpbIi9Vc2Vycy9wY2NvMDU2L0RvY3VtZW50cy9Db3VycyBJVFUvcmlib3VjaG9uL21hZ2ljdmVudGVzdG9jay9zcmMvbWFpbi93ZWJhcHAvYXBwL3NoYXJlZC91dGlsL2VudGl0eS11dGlscy5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCB7IGNsZWFuRW50aXR5LCBtYXBJZExpc3QgfSBmcm9tICcuL2VudGl0eS11dGlscyc7XG5cbmRlc2NyaWJlKCdFbnRpdHkgdXRpbHMnLCAoKSA9PiB7XG4gIGRlc2NyaWJlKCdjbGVhbkVudGl0eScsICgpID0+IHtcbiAgICBpdCgnc2hvdWxkIG5vdCByZW1vdmUgZmllbGRzIHdpdGggYW4gaWQnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlbnRpdHlBID0ge1xuICAgICAgICBhOiB7XG4gICAgICAgICAgaWQ6IDUsXG4gICAgICAgIH0sXG4gICAgICB9O1xuICAgICAgY29uc3QgZW50aXR5QiA9IHtcbiAgICAgICAgYToge1xuICAgICAgICAgIGlkOiAnNScsXG4gICAgICAgIH0sXG4gICAgICB9O1xuXG4gICAgICBleHBlY3QoY2xlYW5FbnRpdHkoeyAuLi5lbnRpdHlBIH0pKS50b0VxdWFsKGVudGl0eUEpO1xuICAgICAgZXhwZWN0KGNsZWFuRW50aXR5KHsgLi4uZW50aXR5QiB9KSkudG9FcXVhbChlbnRpdHlCKTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgcmVtb3ZlIGZpZWxkcyB3aXRoIGFuIGVtcHR5IGlkJywgKCkgPT4ge1xuICAgICAgY29uc3QgZW50aXR5ID0ge1xuICAgICAgICBhOiB7XG4gICAgICAgICAgaWQ6ICcnLFxuICAgICAgICB9LFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KGNsZWFuRW50aXR5KHsgLi4uZW50aXR5IH0pKS50b0VxdWFsKHt9KTtcbiAgICB9KTtcblxuICAgIGl0KCdzaG91bGQgbm90IHJlbW92ZSBmaWVsZHMgdGhhdCBhcmUgbm90IG9iamVjdHMnLCAoKSA9PiB7XG4gICAgICBjb25zdCBlbnRpdHkgPSB7XG4gICAgICAgIGE6ICcnLFxuICAgICAgICBiOiA1LFxuICAgICAgICBjOiBbXSxcbiAgICAgICAgZDogJzUnLFxuICAgICAgfTtcblxuICAgICAgZXhwZWN0KGNsZWFuRW50aXR5KHsgLi4uZW50aXR5IH0pKS50b0VxdWFsKGVudGl0eSk7XG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdtYXBJZExpc3QnLCAoKSA9PiB7XG4gICAgaXQoXCJzaG91bGQgbWFwIGlkcyBubyBtYXR0ZXIgdGhlIGVsZW1lbnQncyB0eXBlXCIsICgpID0+IHtcbiAgICAgIGNvbnN0IGlkcyA9IFsnamhpcHN0ZXInLCAnJywgMSwgeyBrZXk6ICd2YWx1ZScgfV07XG5cbiAgICAgIGV4cGVjdChtYXBJZExpc3QoaWRzKSkudG9FcXVhbChbeyBpZDogJ2poaXBzdGVyJyB9LCB7IGlkOiAxIH0sIHsgaWQ6IHsga2V5OiAndmFsdWUnIH0gfV0pO1xuICAgIH0pO1xuXG4gICAgaXQoJ3Nob3VsZCByZXR1cm4gYW4gZW1wdHkgYXJyYXknLCAoKSA9PiB7XG4gICAgICBjb25zdCBpZHMgPSBbXTtcblxuICAgICAgZXhwZWN0KG1hcElkTGlzdChpZHMpKS50b0VxdWFsKFtdKTtcbiAgICB9KTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==