ae5b41d13eb9a6e4ec2402e1a9b4f38e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const toolkit_1 = require("@reduxjs/toolkit");
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const produit_model_1 = require("app/shared/model/produit.model");
const produit_reducer_1 = tslib_1.__importStar(require("./produit.reducer"));
describe('Entities reducer tests', () => {
    function isEmpty(element) {
        if (element instanceof Array) {
            return element.length === 0;
        }
        else {
            return Object.keys(element).length === 0;
        }
    }
    const initialState = {
        loading: false,
        errorMessage: null,
        entities: [],
        entity: produit_model_1.defaultValue,
        totalItems: 0,
        updating: false,
        updateSuccess: false,
    };
    function testInitialState(state) {
        expect(state).toMatchObject({
            loading: false,
            errorMessage: null,
            updating: false,
            updateSuccess: false,
        });
        expect(isEmpty(state.entities));
        expect(isEmpty(state.entity));
    }
    function testMultipleTypes(types, payload, testFunction, error) {
        types.forEach(e => {
            testFunction((0, produit_reducer_1.default)(undefined, { type: e, payload, error }));
        });
    }
    describe('Common', () => {
        it('should return the initial state', () => {
            testInitialState((0, produit_reducer_1.default)(undefined, { type: '' }));
        });
    });
    describe('Requests', () => {
        it('should set state to loading', () => {
            testMultipleTypes([produit_reducer_1.getEntities.pending.type, produit_reducer_1.getEntity.pending.type], {}, state => {
                expect(state).toMatchObject({
                    errorMessage: null,
                    updateSuccess: false,
                    loading: true,
                });
            });
        });
        it('should set state to updating', () => {
            testMultipleTypes([produit_reducer_1.createEntity.pending.type, produit_reducer_1.updateEntity.pending.type, produit_reducer_1.partialUpdateEntity.pending.type, produit_reducer_1.deleteEntity.pending.type], {}, state => {
                expect(state).toMatchObject({
                    errorMessage: null,
                    updateSuccess: false,
                    updating: true,
                });
            });
        });
        it('should reset the state', () => {
            expect((0, produit_reducer_1.default)(Object.assign(Object.assign({}, initialState), { loading: true }), (0, produit_reducer_1.reset)())).toEqual(Object.assign({}, initialState));
        });
    });
    describe('Failures', () => {
        it('should set a message in errorMessage', () => {
            testMultipleTypes([
                produit_reducer_1.getEntities.rejected.type,
                produit_reducer_1.getEntity.rejected.type,
                produit_reducer_1.createEntity.rejected.type,
                produit_reducer_1.updateEntity.rejected.type,
                produit_reducer_1.partialUpdateEntity.rejected.type,
                produit_reducer_1.deleteEntity.rejected.type,
            ], 'some message', state => {
                expect(state).toMatchObject({
                    errorMessage: null,
                    updateSuccess: false,
                    updating: false,
                });
            }, {
                message: 'error message',
            });
        });
    });
    describe('Successes', () => {
        it('should fetch all entities', () => {
            const payload = { data: [{ 1: 'fake1' }, { 2: 'fake2' }], headers: { 'x-total-count': 123 } };
            expect((0, produit_reducer_1.default)(undefined, {
                type: produit_reducer_1.getEntities.fulfilled.type,
                payload,
            })).toEqual(Object.assign(Object.assign({}, initialState), { loading: false, totalItems: payload.headers['x-total-count'], entities: payload.data }));
        });
        it('should fetch a single entity', () => {
            const payload = { data: { 1: 'fake1' } };
            expect((0, produit_reducer_1.default)(undefined, {
                type: produit_reducer_1.getEntity.fulfilled.type,
                payload,
            })).toEqual(Object.assign(Object.assign({}, initialState), { loading: false, entity: payload.data }));
        });
        it('should create/update entity', () => {
            const payload = { data: 'fake payload' };
            expect((0, produit_reducer_1.default)(undefined, {
                type: produit_reducer_1.createEntity.fulfilled.type,
                payload,
            })).toEqual(Object.assign(Object.assign({}, initialState), { updating: false, updateSuccess: true, entity: payload.data }));
        });
        it('should delete entity', () => {
            const payload = 'fake payload';
            const toTest = (0, produit_reducer_1.default)(undefined, {
                type: produit_reducer_1.deleteEntity.fulfilled.type,
                payload,
            });
            expect(toTest).toMatchObject({
                updating: false,
                updateSuccess: true,
            });
        });
    });
    describe('Actions', () => {
        let store;
        const resolvedObject = { value: 'whatever' };
        const getState = jest.fn();
        const dispatch = jest.fn();
        const extra = {};
        beforeEach(() => {
            store = (0, toolkit_1.configureStore)({
                reducer: (state = [], action) => [...state, action],
            });
            axios_1.default.get = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.post = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.put = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.patch = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.delete = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
        });
        it('dispatches FETCH_PRODUIT_LIST actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = {};
            const result = yield (0, produit_reducer_1.getEntities)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(produit_reducer_1.getEntities.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_PRODUIT actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = 42666;
            const result = yield (0, produit_reducer_1.getEntity)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(produit_reducer_1.getEntity.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches CREATE_PRODUIT actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = { id: 456 };
            const result = yield (0, produit_reducer_1.createEntity)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(produit_reducer_1.createEntity.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches UPDATE_PRODUIT actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = { id: 456 };
            const result = yield (0, produit_reducer_1.updateEntity)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(produit_reducer_1.updateEntity.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches PARTIAL_UPDATE_PRODUIT actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = { id: 123 };
            const result = yield (0, produit_reducer_1.partialUpdateEntity)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(produit_reducer_1.partialUpdateEntity.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches DELETE_PRODUIT actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = 42666;
            const result = yield (0, produit_reducer_1.deleteEntity)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(produit_reducer_1.deleteEntity.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches RESET actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield store.dispatch((0, produit_reducer_1.reset)());
            expect(store.getState()).toEqual([expect.any(Object), expect.objectContaining((0, produit_reducer_1.reset)())]);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,