cc49db71699479cb8272bae4adeb186e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _utils = require("./utils");
var _CloseButton = _interopRequireDefault(require("./CloseButton"));
const _excluded = ["active", "aria-label", "block", "className", "close", "cssModule", "color", "outline", "size", "tag", "innerRef"];
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
const propTypes = {
  /** Manually set the visual state of the button to active */
  active: _propTypes.default.bool,
  /** Aria label */
  'aria-label': _propTypes.default.string,
  block: _propTypes.default.bool,
  /** Pass children so this component can wrap them */
  children: _propTypes.default.node,
  /** Add custom class */
  className: _propTypes.default.string,
  /** Change existing className with a new className */
  cssModule: _propTypes.default.object,
  /** Use the button as a close button */
  close: _propTypes.default.bool,
  /** Change color of Button to one of the available colors */
  color: _propTypes.default.string,
  /** Disables the button */
  disabled: _propTypes.default.bool,
  innerRef: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.func, _propTypes.default.string]),
  /** Function to be triggered on click */
  onClick: _propTypes.default.func,
  /** Adds outline to the button */
  outline: _propTypes.default.bool,
  /** Make the button bigger or smaller */
  size: _propTypes.default.string,
  /** Set a custom element for this component */
  tag: _utils.tagPropType
};
function Button(props) {
  const onClick = (0, _react.useCallback)(e => {
    if (props.disabled) {
      e.preventDefault();
      return;
    }
    if (props.onClick) {
      return props.onClick(e);
    }
  }, [props.onClick, props.disabled]);
  let {
      active,
      'aria-label': ariaLabel,
      block,
      className,
      close,
      cssModule,
      color = 'secondary',
      outline,
      size,
      tag: Tag = 'button',
      innerRef
    } = props,
    attributes = _objectWithoutProperties(props, _excluded);
  if (close) {
    return /*#__PURE__*/_react.default.createElement(_CloseButton.default, attributes);
  }
  const btnOutlineColor = `btn${outline ? '-outline' : ''}-${color}`;
  const classes = (0, _utils.mapToCssModules)((0, _classnames.default)(className, 'btn', btnOutlineColor, size ? `btn-${size}` : false, block ? 'd-block w-100' : false, {
    active,
    disabled: props.disabled
  }), cssModule);
  if (attributes.href && Tag === 'button') {
    Tag = 'a';
  }
  return /*#__PURE__*/_react.default.createElement(Tag, _extends({
    type: Tag === 'button' && attributes.onClick ? 'button' : undefined
  }, attributes, {
    className: classes,
    ref: innerRef,
    onClick: onClick,
    "aria-label": ariaLabel
  }));
}
Button.propTypes = propTypes;
var _default = Button;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jbGFzc25hbWVzIiwiX3V0aWxzIiwiX0Nsb3NlQnV0dG9uIiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJwcm9wVHlwZXMiLCJhY3RpdmUiLCJib29sIiwic3RyaW5nIiwiYmxvY2siLCJjaGlsZHJlbiIsIm5vZGUiLCJjbGFzc05hbWUiLCJjc3NNb2R1bGUiLCJvYmplY3QiLCJjbG9zZSIsImNvbG9yIiwiZGlzYWJsZWQiLCJpbm5lclJlZiIsIm9uZU9mVHlwZSIsImZ1bmMiLCJvbkNsaWNrIiwib3V0bGluZSIsInNpemUiLCJ0YWciLCJ0YWdQcm9wVHlwZSIsIkJ1dHRvbiIsInByb3BzIiwidXNlQ2FsbGJhY2siLCJlIiwicHJldmVudERlZmF1bHQiLCJhcmlhTGFiZWwiLCJUYWciLCJhdHRyaWJ1dGVzIiwiY3JlYXRlRWxlbWVudCIsImJ0bk91dGxpbmVDb2xvciIsImNsYXNzZXMiLCJtYXBUb0Nzc01vZHVsZXMiLCJocmVmIiwidHlwZSIsInVuZGVmaW5lZCIsInJlZiIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiQnV0dG9uLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZVdpbGRjYXJkKHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG52YXIgX0Nsb3NlQnV0dG9uID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiLi9DbG9zZUJ1dHRvblwiKSk7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJhY3RpdmVcIiwgXCJhcmlhLWxhYmVsXCIsIFwiYmxvY2tcIiwgXCJjbGFzc05hbWVcIiwgXCJjbG9zZVwiLCBcImNzc01vZHVsZVwiLCBcImNvbG9yXCIsIFwib3V0bGluZVwiLCBcInNpemVcIiwgXCJ0YWdcIiwgXCJpbm5lclJlZlwiXTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApIHsgaWYgKHR5cGVvZiBXZWFrTWFwICE9PSBcImZ1bmN0aW9uXCIpIHJldHVybiBudWxsOyB2YXIgY2FjaGVCYWJlbEludGVyb3AgPSBuZXcgV2Vha01hcCgpOyB2YXIgY2FjaGVOb2RlSW50ZXJvcCA9IG5ldyBXZWFrTWFwKCk7IHJldHVybiAoX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlID0gZnVuY3Rpb24gKG5vZGVJbnRlcm9wKSB7IHJldHVybiBub2RlSW50ZXJvcCA/IGNhY2hlTm9kZUludGVyb3AgOiBjYWNoZUJhYmVsSW50ZXJvcDsgfSkobm9kZUludGVyb3ApOyB9XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChvYmosIG5vZGVJbnRlcm9wKSB7IGlmICghbm9kZUludGVyb3AgJiYgb2JqICYmIG9iai5fX2VzTW9kdWxlKSB7IHJldHVybiBvYmo7IH0gaWYgKG9iaiA9PT0gbnVsbCB8fCB0eXBlb2Ygb2JqICE9PSBcIm9iamVjdFwiICYmIHR5cGVvZiBvYmogIT09IFwiZnVuY3Rpb25cIikgeyByZXR1cm4geyBkZWZhdWx0OiBvYmogfTsgfSB2YXIgY2FjaGUgPSBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUobm9kZUludGVyb3ApOyBpZiAoY2FjaGUgJiYgY2FjaGUuaGFzKG9iaikpIHsgcmV0dXJuIGNhY2hlLmdldChvYmopOyB9IHZhciBuZXdPYmogPSB7fTsgdmFyIGhhc1Byb3BlcnR5RGVzY3JpcHRvciA9IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSAmJiBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yOyBmb3IgKHZhciBrZXkgaW4gb2JqKSB7IGlmIChrZXkgIT09IFwiZGVmYXVsdFwiICYmIE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChvYmosIGtleSkpIHsgdmFyIGRlc2MgPSBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPyBPYmplY3QuZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yKG9iaiwga2V5KSA6IG51bGw7IGlmIChkZXNjICYmIChkZXNjLmdldCB8fCBkZXNjLnNldCkpIHsgT2JqZWN0LmRlZmluZVByb3BlcnR5KG5ld09iaiwga2V5LCBkZXNjKTsgfSBlbHNlIHsgbmV3T2JqW2tleV0gPSBvYmpba2V5XTsgfSB9IH0gbmV3T2JqLmRlZmF1bHQgPSBvYmo7IGlmIChjYWNoZSkgeyBjYWNoZS5zZXQob2JqLCBuZXdPYmopOyB9IHJldHVybiBuZXdPYmo7IH1cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKTsgdmFyIGtleSwgaTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHNvdXJjZVN5bWJvbEtleXMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKHNvdXJjZSk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VTeW1ib2xLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZVN5bWJvbEtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IGlmICghT2JqZWN0LnByb3RvdHlwZS5wcm9wZXJ0eUlzRW51bWVyYWJsZS5jYWxsKHNvdXJjZSwga2V5KSkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSByZXR1cm4gdGFyZ2V0OyB9XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZShzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0ge307IHZhciBzb3VyY2VLZXlzID0gT2JqZWN0LmtleXMoc291cmNlKTsgdmFyIGtleSwgaTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZUtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5jb25zdCBwcm9wVHlwZXMgPSB7XG4gIC8qKiBNYW51YWxseSBzZXQgdGhlIHZpc3VhbCBzdGF0ZSBvZiB0aGUgYnV0dG9uIHRvIGFjdGl2ZSAqL1xuICBhY3RpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKiogQXJpYSBsYWJlbCAqL1xuICAnYXJpYS1sYWJlbCc6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGJsb2NrOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgLyoqIFBhc3MgY2hpbGRyZW4gc28gdGhpcyBjb21wb25lbnQgY2FuIHdyYXAgdGhlbSAqL1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG4gIC8qKiBBZGQgY3VzdG9tIGNsYXNzICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgLyoqIENoYW5nZSBleGlzdGluZyBjbGFzc05hbWUgd2l0aCBhIG5ldyBjbGFzc05hbWUgKi9cbiAgY3NzTW9kdWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICAvKiogVXNlIHRoZSBidXR0b24gYXMgYSBjbG9zZSBidXR0b24gKi9cbiAgY2xvc2U6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKiogQ2hhbmdlIGNvbG9yIG9mIEJ1dHRvbiB0byBvbmUgb2YgdGhlIGF2YWlsYWJsZSBjb2xvcnMgKi9cbiAgY29sb3I6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIC8qKiBEaXNhYmxlcyB0aGUgYnV0dG9uICovXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgaW5uZXJSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG4gIC8qKiBGdW5jdGlvbiB0byBiZSB0cmlnZ2VyZWQgb24gY2xpY2sgKi9cbiAgb25DbGljazogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsXG4gIC8qKiBBZGRzIG91dGxpbmUgdG8gdGhlIGJ1dHRvbiAqL1xuICBvdXRsaW5lOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgLyoqIE1ha2UgdGhlIGJ1dHRvbiBiaWdnZXIgb3Igc21hbGxlciAqL1xuICBzaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAvKiogU2V0IGEgY3VzdG9tIGVsZW1lbnQgZm9yIHRoaXMgY29tcG9uZW50ICovXG4gIHRhZzogX3V0aWxzLnRhZ1Byb3BUeXBlXG59O1xuZnVuY3Rpb24gQnV0dG9uKHByb3BzKSB7XG4gIGNvbnN0IG9uQ2xpY2sgPSAoMCwgX3JlYWN0LnVzZUNhbGxiYWNrKShlID0+IHtcbiAgICBpZiAocHJvcHMuZGlzYWJsZWQpIHtcbiAgICAgIGUucHJldmVudERlZmF1bHQoKTtcbiAgICAgIHJldHVybjtcbiAgICB9XG4gICAgaWYgKHByb3BzLm9uQ2xpY2spIHtcbiAgICAgIHJldHVybiBwcm9wcy5vbkNsaWNrKGUpO1xuICAgIH1cbiAgfSwgW3Byb3BzLm9uQ2xpY2ssIHByb3BzLmRpc2FibGVkXSk7XG4gIGxldCB7XG4gICAgICBhY3RpdmUsXG4gICAgICAnYXJpYS1sYWJlbCc6IGFyaWFMYWJlbCxcbiAgICAgIGJsb2NrLFxuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY2xvc2UsXG4gICAgICBjc3NNb2R1bGUsXG4gICAgICBjb2xvciA9ICdzZWNvbmRhcnknLFxuICAgICAgb3V0bGluZSxcbiAgICAgIHNpemUsXG4gICAgICB0YWc6IFRhZyA9ICdidXR0b24nLFxuICAgICAgaW5uZXJSZWZcbiAgICB9ID0gcHJvcHMsXG4gICAgYXR0cmlidXRlcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgaWYgKGNsb3NlKSB7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9DbG9zZUJ1dHRvbi5kZWZhdWx0LCBhdHRyaWJ1dGVzKTtcbiAgfVxuICBjb25zdCBidG5PdXRsaW5lQ29sb3IgPSBgYnRuJHtvdXRsaW5lID8gJy1vdXRsaW5lJyA6ICcnfS0ke2NvbG9yfWA7XG4gIGNvbnN0IGNsYXNzZXMgPSAoMCwgX3V0aWxzLm1hcFRvQ3NzTW9kdWxlcykoKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgJ2J0bicsIGJ0bk91dGxpbmVDb2xvciwgc2l6ZSA/IGBidG4tJHtzaXplfWAgOiBmYWxzZSwgYmxvY2sgPyAnZC1ibG9jayB3LTEwMCcgOiBmYWxzZSwge1xuICAgIGFjdGl2ZSxcbiAgICBkaXNhYmxlZDogcHJvcHMuZGlzYWJsZWRcbiAgfSksIGNzc01vZHVsZSk7XG4gIGlmIChhdHRyaWJ1dGVzLmhyZWYgJiYgVGFnID09PSAnYnV0dG9uJykge1xuICAgIFRhZyA9ICdhJztcbiAgfVxuICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoVGFnLCBfZXh0ZW5kcyh7XG4gICAgdHlwZTogVGFnID09PSAnYnV0dG9uJyAmJiBhdHRyaWJ1dGVzLm9uQ2xpY2sgPyAnYnV0dG9uJyA6IHVuZGVmaW5lZFxuICB9LCBhdHRyaWJ1dGVzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgIHJlZjogaW5uZXJSZWYsXG4gICAgb25DbGljazogb25DbGljayxcbiAgICBcImFyaWEtbGFiZWxcIjogYXJpYUxhYmVsXG4gIH0pKTtcbn1cbkJ1dHRvbi5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG52YXIgX2RlZmF1bHQgPSBCdXR0b247XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUlDLE1BQU0sR0FBR0MsdUJBQXVCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUN0RCxJQUFJQyxVQUFVLEdBQUdDLHNCQUFzQixDQUFDRixPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUQsSUFBSUcsV0FBVyxHQUFHRCxzQkFBc0IsQ0FBQ0YsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQy9ELElBQUlJLE1BQU0sR0FBR0osT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUMvQixJQUFJSyxZQUFZLEdBQUdILHNCQUFzQixDQUFDRixPQUFPLENBQUMsZUFBZSxDQUFDLENBQUM7QUFDbkUsTUFBTU0sU0FBUyxHQUFHLENBQUMsUUFBUSxFQUFFLFlBQVksRUFBRSxPQUFPLEVBQUUsV0FBVyxFQUFFLE9BQU8sRUFBRSxXQUFXLEVBQUUsT0FBTyxFQUFFLFNBQVMsRUFBRSxNQUFNLEVBQUUsS0FBSyxFQUFFLFVBQVUsQ0FBQztB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