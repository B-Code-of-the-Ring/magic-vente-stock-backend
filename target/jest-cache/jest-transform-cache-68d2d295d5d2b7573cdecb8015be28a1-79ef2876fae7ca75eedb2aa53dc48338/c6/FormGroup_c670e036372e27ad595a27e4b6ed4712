538f8b663f6a804743bca342ce84eea7
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _utils = require("./utils");
const _excluded = ["className", "cssModule", "row", "disabled", "check", "inline", "floating", "noMargin", "tag", "switch"];
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
const propTypes = {
  children: _propTypes.default.node,
  row: _propTypes.default.bool,
  check: _propTypes.default.bool,
  switch: _propTypes.default.bool,
  inline: _propTypes.default.bool,
  floating: _propTypes.default.bool,
  noMargin: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  tag: _utils.tagPropType,
  className: _propTypes.default.string,
  cssModule: _propTypes.default.object
};
function FormGroup(props) {
  const {
      className,
      cssModule,
      row,
      disabled,
      check,
      inline,
      floating,
      noMargin,
      tag: Tag = 'div',
      switch: switchProp
    } = props,
    attributes = _objectWithoutProperties(props, _excluded);
  const formCheck = check || switchProp;
  const classes = (0, _utils.mapToCssModules)((0, _classnames.default)(className, row ? 'row' : false, formCheck ? 'form-check' : false, switchProp ? 'form-switch' : false, formCheck || noMargin ? false : 'mb-3', formCheck && inline ? 'form-check-inline' : false, formCheck && disabled ? 'disabled' : false, floating && 'form-floating'), cssModule);
  if (Tag === 'fieldset') {
    attributes.disabled = disabled;
  }
  return /*#__PURE__*/_react.default.createElement(Tag, _extends({}, attributes, {
    className: classes
  }));
}
FormGroup.propTypes = propTypes;
var _default = FormGroup;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl91dGlscyIsIl9leGNsdWRlZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwicHJvcFR5cGVzIiwiY2hpbGRyZW4iLCJub2RlIiwicm93IiwiYm9vbCIsImNoZWNrIiwic3dpdGNoIiwiaW5saW5lIiwiZmxvYXRpbmciLCJub01hcmdpbiIsImRpc2FibGVkIiwidGFnIiwidGFnUHJvcFR5cGUiLCJjbGFzc05hbWUiLCJzdHJpbmciLCJjc3NNb2R1bGUiLCJvYmplY3QiLCJGb3JtR3JvdXAiLCJwcm9wcyIsIlRhZyIsInN3aXRjaFByb3AiLCJhdHRyaWJ1dGVzIiwiZm9ybUNoZWNrIiwiY2xhc3NlcyIsIm1hcFRvQ3NzTW9kdWxlcyIsImNyZWF0ZUVsZW1lbnQiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkZvcm1Hcm91cC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjc3NNb2R1bGVcIiwgXCJyb3dcIiwgXCJkaXNhYmxlZFwiLCBcImNoZWNrXCIsIFwiaW5saW5lXCIsIFwiZmxvYXRpbmdcIiwgXCJub01hcmdpblwiLCBcInRhZ1wiLCBcInN3aXRjaFwiXTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuY29uc3QgcHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG4gIHJvdzogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGNoZWNrOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgc3dpdGNoOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgaW5saW5lOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgZmxvYXRpbmc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBub01hcmdpbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgdGFnOiBfdXRpbHMudGFnUHJvcFR5cGUsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgY3NzTW9kdWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0XG59O1xuZnVuY3Rpb24gRm9ybUdyb3VwKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNzc01vZHVsZSxcbiAgICAgIHJvdyxcbiAgICAgIGRpc2FibGVkLFxuICAgICAgY2hlY2ssXG4gICAgICBpbmxpbmUsXG4gICAgICBmbG9hdGluZyxcbiAgICAgIG5vTWFyZ2luLFxuICAgICAgdGFnOiBUYWcgPSAnZGl2JyxcbiAgICAgIHN3aXRjaDogc3dpdGNoUHJvcFxuICAgIH0gPSBwcm9wcyxcbiAgICBhdHRyaWJ1dGVzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKHByb3BzLCBfZXhjbHVkZWQpO1xuICBjb25zdCBmb3JtQ2hlY2sgPSBjaGVjayB8fCBzd2l0Y2hQcm9wO1xuICBjb25zdCBjbGFzc2VzID0gKDAsIF91dGlscy5tYXBUb0Nzc01vZHVsZXMpKCgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIHJvdyA/ICdyb3cnIDogZmFsc2UsIGZvcm1DaGVjayA/ICdmb3JtLWNoZWNrJyA6IGZhbHNlLCBzd2l0Y2hQcm9wID8gJ2Zvcm0tc3dpdGNoJyA6IGZhbHNlLCBmb3JtQ2hlY2sgfHwgbm9NYXJnaW4gPyBmYWxzZSA6ICdtYi0zJywgZm9ybUNoZWNrICYmIGlubGluZSA/ICdmb3JtLWNoZWNrLWlubGluZScgOiBmYWxzZSwgZm9ybUNoZWNrICYmIGRpc2FibGVkID8gJ2Rpc2FibGVkJyA6IGZhbHNlLCBmbG9hdGluZyAmJiAnZm9ybS1mbG9hdGluZycpLCBjc3NNb2R1bGUpO1xuICBpZiAoVGFnID09PSAnZmllbGRzZXQnKSB7XG4gICAgYXR0cmlidXRlcy5kaXNhYmxlZCA9IGRpc2FibGVkO1xuICB9XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUYWcsIF9leHRlbmRzKHt9LCBhdHRyaWJ1dGVzLCB7XG4gICAgY2xhc3NOYW1lOiBjbGFzc2VzXG4gIH0pKTtcbn1cbkZvcm1Hcm91cC5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG52YXIgX2RlZmF1bHQgPSBGb3JtR3JvdXA7XG5leHBvcnRzLmRlZmF1bHQgPSBfZGVmYXVsdDsiXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQ3hCLElBQUlDLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRCxJQUFJQyxVQUFVLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUQsSUFBSUUsV0FBVyxHQUFHSCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQy9ELElBQUlHLE1BQU0sR0FBR0gsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUMvQixNQUFNSSxTQUFTLEdBQUcsQ0FBQyxXQUFXLEVBQUUsV0FBVyxFQUFFLEtBQUssRUFBRSxVQUFVLEVBQUUsT0FBTyxFQUFFLFFBQVEsRUFBRSxVQUFVLEVBQUUsVUFBVSxFQUFFLEtBQUssRUFBRSxRQUFRLENBQUM7QUFDM0gsU0FBU0wsc0JBQXNCQSxDQUFDTSxHQUFHLEVBQUU7RUFBRSxPQUFPQSxHQUFHLElBQUlBLEdBQUcsQ0FBQ0MsVUFBVSxH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