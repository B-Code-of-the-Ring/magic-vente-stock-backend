20317bd3713412be1bf805c0fb288e13
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getQueriesForElement = getQueriesForElement;
var defaultQueries = _interopRequireWildcard(require("./queries"));
function _getRequireWildcardCache(e) {
  if ("function" != typeof WeakMap) return null;
  var r = new WeakMap(),
    t = new WeakMap();
  return (_getRequireWildcardCache = function (e) {
    return e ? t : r;
  })(e);
}
function _interopRequireWildcard(e, r) {
  if (!r && e && e.__esModule) return e;
  if (null === e || "object" != typeof e && "function" != typeof e) return {
    default: e
  };
  var t = _getRequireWildcardCache(r);
  if (t && t.has(e)) return t.get(e);
  var n = {
      __proto__: null
    },
    a = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var u in e) if ("default" !== u && {}.hasOwnProperty.call(e, u)) {
    var i = a ? Object.getOwnPropertyDescriptor(e, u) : null;
    i && (i.get || i.set) ? Object.defineProperty(n, u, i) : n[u] = e[u];
  }
  return n.default = e, t && t.set(e, n), n;
}
/**
 * @typedef {{[key: string]: Function}} FuncMap
 */

/**
 * @param {HTMLElement} element container
 * @param {FuncMap} queries object of functions
 * @param {Object} initialValue for reducer
 * @returns {FuncMap} returns object of functions bound to container
 */
function getQueriesForElement(element, queries = defaultQueries, initialValue = {}) {
  return Object.keys(queries).reduce((helpers, key) => {
    const fn = queries[key];
    helpers[key] = fn.bind(null, element);
    return helpers;
  }, initialValue);
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldFF1ZXJpZXNGb3JFbGVtZW50IiwiZGVmYXVsdFF1ZXJpZXMiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUiLCJlIiwiV2Vha01hcCIsInIiLCJ0IiwiX19lc01vZHVsZSIsImRlZmF1bHQiLCJoYXMiLCJnZXQiLCJuIiwiX19wcm90b19fIiwiYSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvciIsInUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJpIiwic2V0IiwiZWxlbWVudCIsInF1ZXJpZXMiLCJpbml0aWFsVmFsdWUiLCJrZXlzIiwicmVkdWNlIiwiaGVscGVycyIsImtleSIsImZuIiwiYmluZCJdLCJzb3VyY2VzIjpbImdldC1xdWVyaWVzLWZvci1lbGVtZW50LmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRRdWVyaWVzRm9yRWxlbWVudCA9IGdldFF1ZXJpZXNGb3JFbGVtZW50O1xudmFyIGRlZmF1bHRRdWVyaWVzID0gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQocmVxdWlyZShcIi4vcXVlcmllc1wiKSk7XG5mdW5jdGlvbiBfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUoZSkgeyBpZiAoXCJmdW5jdGlvblwiICE9IHR5cGVvZiBXZWFrTWFwKSByZXR1cm4gbnVsbDsgdmFyIHIgPSBuZXcgV2Vha01hcCgpLCB0ID0gbmV3IFdlYWtNYXAoKTsgcmV0dXJuIChfZ2V0UmVxdWlyZVdpbGRjYXJkQ2FjaGUgPSBmdW5jdGlvbiAoZSkgeyByZXR1cm4gZSA/IHQgOiByOyB9KShlKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQoZSwgcikgeyBpZiAoIXIgJiYgZSAmJiBlLl9fZXNNb2R1bGUpIHJldHVybiBlOyBpZiAobnVsbCA9PT0gZSB8fCBcIm9iamVjdFwiICE9IHR5cGVvZiBlICYmIFwiZnVuY3Rpb25cIiAhPSB0eXBlb2YgZSkgcmV0dXJuIHsgZGVmYXVsdDogZSB9OyB2YXIgdCA9IF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZShyKTsgaWYgKHQgJiYgdC5oYXMoZSkpIHJldHVybiB0LmdldChlKTsgdmFyIG4gPSB7IF9fcHJvdG9fXzogbnVsbCB9LCBhID0gT2JqZWN0LmRlZmluZVByb3BlcnR5ICYmIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3I7IGZvciAodmFyIHUgaW4gZSkgaWYgKFwiZGVmYXVsdFwiICE9PSB1ICYmIHt9Lmhhc093blByb3BlcnR5LmNhbGwoZSwgdSkpIHsgdmFyIGkgPSBhID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihlLCB1KSA6IG51bGw7IGkgJiYgKGkuZ2V0IHx8IGkuc2V0KSA/IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuLCB1LCBpKSA6IG5bdV0gPSBlW3VdOyB9IHJldHVybiBuLmRlZmF1bHQgPSBlLCB0ICYmIHQuc2V0KGUsIG4pLCBuOyB9XG4vKipcbiAqIEB0eXBlZGVmIHt7W2tleTogc3RyaW5nXTogRnVuY3Rpb259fSBGdW5jTWFwXG4gKi9cblxuLyoqXG4gKiBAcGFyYW0ge0hUTUxFbGVtZW50fSBlbGVtZW50IGNvbnRhaW5lclxuICogQHBhcmFtIHtGdW5jTWFwfSBxdWVyaWVzIG9iamVjdCBvZiBmdW5jdGlvbnNcbiAqIEBwYXJhbSB7T2JqZWN0fSBpbml0aWFsVmFsdWUgZm9yIHJlZHVjZXJcbiAqIEByZXR1cm5zIHtGdW5jTWFwfSByZXR1cm5zIG9iamVjdCBvZiBmdW5jdGlvbnMgYm91bmQgdG8gY29udGFpbmVyXG4gKi9cbmZ1bmN0aW9uIGdldFF1ZXJpZXNGb3JFbGVtZW50KGVsZW1lbnQsIHF1ZXJpZXMgPSBkZWZhdWx0UXVlcmllcywgaW5pdGlhbFZhbHVlID0ge30pIHtcbiAgcmV0dXJuIE9iamVjdC5rZXlzKHF1ZXJpZXMpLnJlZHVjZSgoaGVscGVycywga2V5KSA9PiB7XG4gICAgY29uc3QgZm4gPSBxdWVyaWVzW2tleV07XG4gICAgaGVscGVyc1trZXldID0gZm4uYmluZChudWxsLCBlbGVtZW50KTtcbiAgICByZXR1cm4gaGVscGVycztcbiAgfSwgaW5pdGlhbFZhbHVlKTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDRSxvQkFBb0IsR0FBR0Esb0JBQW9CO0FBQ25ELElBQUlDLGNBQWMsR0FBR0MsdUJBQXVCLENBQUNDLE9BQU8sQ0FBQyxXQUFXLENBQUMsQ0FBQztBQUNsRSxTQUFTQyx3QkFBd0JBLENBQUNDLENBQUMsRUFBRTtFQUFFLElBQUksVUFBVSxJQUFJLE9BQU9DLE9BQU8sRUFBRSxPQUFPLElBQUk7RUFBRSxJQUFJQyxDQUFDLEdBQUcsSUFBSUQsT0FBTyxDQUFDLENBQUM7SUFBRUUsQ0FBQyxHQUFHLElBQUlGLE9BQU8sQ0FBQyxDQUFDO0VBQUUsT0FBTyxDQUFDRix3QkFBd0IsR0FBRyxTQUFBQSxDQUFVQyxDQUFDLEVBQUU7SUFBRSxPQUFPQSxDQUFDLEdBQUdHLENBQUMsR0FBR0QsQ0FBQztFQUFFLENBQUMsRUFBRUYsQ0FBQyxDQUFDO0FBQUU7QUFDM00sU0FBU0gsdUJBQXVCQSxDQUFDRyxDQUFDLEVBQUVFLENBQUMsRUFBRTtFQUFFLElBQUksQ0FBQ0EsQ0FBQyxJQUFJRixDQUFDLElBQUlBLENBQUMsQ0FBQ0ksVUFBVSxFQUFFLE9BQU9KLENBQUM7RUFBRSxJQUFJLElBQUksS0FBS0EsQ0FBQyxJQUFJLFFBQVEsSUFBSSxPQUFPQSxDQUFDLElBQUksVUFBVSxJQUFJLE9BQU9BLENBQUMsRUFBRSxPQUFPO0lBQUVLLE9BQU8sRUFBRUw7RUFBRSxDQUFDO0VBQUUsSUFBSUcsQ0FBQyxHQUFHSix3QkFBd0IsQ0FBQ0csQ0FBQyxDQUFDO0VBQUUsSUFBSUMsQ0FBQyxJQUFJQSxDQUFDLENBQUNHLEdBQUcsQ0FBQ04sQ0FBQyxDQUFDLEVBQUUsT0FBT0csQ0FBQyxDQUFDSSxHQUFHLENBQUNQLENBQUMsQ0FBQztFQUFFLElBQUlRLENBQUMsR0FBRztNQUFFQyxTQUFTLEVBQUU7SUFBSyxDQUFDO0lBQUVDLENBQUMsR0FBR25CLE1BQU0sQ0FBQ0MsY0FBYyxJQUFJRCxNQUFNLENBQUNvQix3QkFBd0I7RUFBRSxLQUFLLElBQUlDLENBQUMsSUFBSVosQ0FBQyxFQUFFLElBQUksU0FBUyxLQUFLWSxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDZCxDQUFDLEVBQUVZLENBQUMsQ0FBQyxFQUFFO0lBQUUsSUFBSUcsQ0FBQyxHQUFHTCxDQUFDLEdBQUduQixNQUFNLENBQUNvQix3QkFBd0IsQ0FBQ1gsQ0FBQyxFQUFFWSxDQUFDLENBQUMsR0FBRyxJQUFJO0lBQUVHLENBQUMsS0FBS0EsQ0FBQyxDQUFDUixHQUFHLElBQUlRLENBQUMsQ0FBQ0MsR0FBRyxDQUFDLEdBQUd6QixNQUFNLENBQUNDLGNBQWMsQ0FBQ2dCLENBQUMsRUFBRUksQ0FBQyxFQUFFRyxDQUFDLENBQUMsR0FBR1AsQ0FBQyxDQUFDSSxDQUFDLENBQUMsR0FBR1osQ0FBQyxDQUFDWSxDQUFDLENBQUM7RUFBRTtFQUFFLE9BQU9KLENBQUMsQ0FBQ0gsT0FBTyxHQUFHTCxDQUFDLEVBQUVHLENBQUMsSUFBSUEsQ0FBQyxDQUFDYSxHQUFHLENBQUNoQixDQUFDLEVBQUVRLENBQUMsQ0FBQyxFQUFFQSxDQUFDO0FBQUU7QUFDbGtCO0FBQ0E7QUFDQTs7QUFFQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTYixvQkFBb0JBLENBQUNzQixPQUFPLEVBQUVDLE9BQU8sR0FBR3RCLGNBQWMsRUFBRXVCLFlBQVksR0FBRyxDQUFDLENBQUMsRUFBRTtFQUNsRixPQUFPNUIsTUFBTSxDQUFDNkIsSUFBSSxDQUFDRixPQUFPLENBQUMsQ0FBQ0csTUFBTSxDQUFDLENBQUNDLE9BQU8sRUFBRUMsR0FBRyxLQUFLO0lBQ25ELE1BQU1DLEVBQUUsR0FBR04sT0FBTyxDQUFDSyxHQUFHLENBQUM7SUFDdkJELE9BQU8sQ0FBQ0MsR0FBRyxDQUFDLEdBQUdDLEVBQUUsQ0FBQ0MsSUFBSSxDQUFDLElBQUksRUFBRVIsT0FBTyxDQUFDO0lBQ3JDLE9BQU9LLE9BQU87RUFDaEIsQ0FBQyxFQUFFSCxZQUFZLENBQUM7QUFDbEIiLCJpZ25vcmVMaXN0IjpbXX0=