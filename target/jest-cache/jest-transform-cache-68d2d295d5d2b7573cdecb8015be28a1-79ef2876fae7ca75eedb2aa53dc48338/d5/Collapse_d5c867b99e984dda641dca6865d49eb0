eb91c818fa055de79441e57bebff06d8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireWildcard(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactTransitionGroup = require("react-transition-group");
var _utils = require("./utils");
const _excluded = ["tag", "horizontal", "isOpen", "className", "navbar", "cssModule", "children", "innerRef"];
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _getRequireWildcardCache(nodeInterop) {
  if (typeof WeakMap !== "function") return null;
  var cacheBabelInterop = new WeakMap();
  var cacheNodeInterop = new WeakMap();
  return (_getRequireWildcardCache = function (nodeInterop) {
    return nodeInterop ? cacheNodeInterop : cacheBabelInterop;
  })(nodeInterop);
}
function _interopRequireWildcard(obj, nodeInterop) {
  if (!nodeInterop && obj && obj.__esModule) {
    return obj;
  }
  if (obj === null || typeof obj !== "object" && typeof obj !== "function") {
    return {
      default: obj
    };
  }
  var cache = _getRequireWildcardCache(nodeInterop);
  if (cache && cache.has(obj)) {
    return cache.get(obj);
  }
  var newObj = {};
  var hasPropertyDescriptor = Object.defineProperty && Object.getOwnPropertyDescriptor;
  for (var key in obj) {
    if (key !== "default" && Object.prototype.hasOwnProperty.call(obj, key)) {
      var desc = hasPropertyDescriptor ? Object.getOwnPropertyDescriptor(obj, key) : null;
      if (desc && (desc.get || desc.set)) {
        Object.defineProperty(newObj, key, desc);
      } else {
        newObj[key] = obj[key];
      }
    }
  }
  newObj.default = obj;
  if (cache) {
    cache.set(obj, newObj);
  }
  return newObj;
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function ownKeys(object, enumerableOnly) {
  var keys = Object.keys(object);
  if (Object.getOwnPropertySymbols) {
    var symbols = Object.getOwnPropertySymbols(object);
    enumerableOnly && (symbols = symbols.filter(function (sym) {
      return Object.getOwnPropertyDescriptor(object, sym).enumerable;
    })), keys.push.apply(keys, symbols);
  }
  return keys;
}
function _objectSpread(target) {
  for (var i = 1; i < arguments.length; i++) {
    var source = null != arguments[i] ? arguments[i] : {};
    i % 2 ? ownKeys(Object(source), !0).forEach(function (key) {
      _defineProperty(target, key, source[key]);
    }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) {
      Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key));
    });
  }
  return target;
}
function _defineProperty(obj, key, value) {
  if (key in obj) {
    Object.defineProperty(obj, key, {
      value: value,
      enumerable: true,
      configurable: true,
      writable: true
    });
  } else {
    obj[key] = value;
  }
  return obj;
}
const propTypes = _objectSpread(_objectSpread({}, _reactTransitionGroup.Transition.propTypes), {}, {
  /** Make content animation appear horizontally */
  horizontal: _propTypes.default.bool,
  /** Set if Collapse is open or closed */
  isOpen: _propTypes.default.bool,
  children: _propTypes.default.oneOfType([_propTypes.default.arrayOf(_propTypes.default.node), _propTypes.default.node]),
  /** Set a custom element for this component */
  tag: _utils.tagPropType,
  /** Add custom class */
  className: _propTypes.default.node,
  navbar: _propTypes.default.bool,
  /** Change underlying component's CSS base class name */
  cssModule: _propTypes.default.object,
  innerRef: _propTypes.default.shape({
    current: _propTypes.default.object
  })
});
const defaultProps = _objectSpread(_objectSpread({}, _reactTransitionGroup.Transition.defaultProps), {}, {
  horizontal: false,
  isOpen: false,
  appear: false,
  enter: true,
  exit: true,
  tag: 'div',
  timeout: _utils.TransitionTimeouts.Collapse
});
const transitionStatusToClassHash = {
  [_utils.TransitionStatuses.ENTERING]: 'collapsing',
  [_utils.TransitionStatuses.ENTERED]: 'collapse show',
  [_utils.TransitionStatuses.EXITING]: 'collapsing',
  [_utils.TransitionStatuses.EXITED]: 'collapse'
};
function getTransitionClass(status) {
  return transitionStatusToClassHash[status] || 'collapse';
}
class Collapse extends _react.Component {
  constructor(props) {
    super(props);
    this.state = {
      dimension: null
    };
    this.nodeRef = props.innerRef || /*#__PURE__*/_react.default.createRef();
    ['onEntering', 'onEntered', 'onExit', 'onExiting', 'onExited'].forEach(name => {
      this[name] = this[name].bind(this);
    });
  }
  onEntering(_, isAppearing) {
    const node = this.getNode();
    this.setState({
      dimension: this.getDimension(node)
    });
    this.props.onEntering(node, isAppearing);
  }
  onEntered(_, isAppearing) {
    const node = this.getNode();
    this.setState({
      dimension: null
    });
    this.props.onEntered(node, isAppearing);
  }
  onExit() {
    const node = this.getNode();
    this.setState({
      dimension: this.getDimension(node)
    });
    this.props.onExit(node);
  }
  onExiting() {
    const node = this.getNode();
    // getting this variable triggers a reflow
    const _unused = this.getDimension(node); // eslint-disable-line no-unused-vars
    this.setState({
      dimension: 0
    });
    this.props.onExiting(node);
  }
  onExited() {
    const node = this.getNode();
    this.setState({
      dimension: null
    });
    this.props.onExited(node);
  }
  getNode() {
    return this.nodeRef.current;
  }
  getDimension(node) {
    return this.props.horizontal ? node.scrollWidth : node.scrollHeight;
  }
  render() {
    const _this$props = this.props,
      {
        tag: Tag,
        horizontal,
        isOpen,
        className,
        navbar,
        cssModule,
        children,
        innerRef
      } = _this$props,
      otherProps = _objectWithoutProperties(_this$props, _excluded);
    const {
      dimension
    } = this.state;
    const transitionProps = (0, _utils.pick)(otherProps, _utils.TransitionPropTypeKeys);
    const childProps = (0, _utils.omit)(otherProps, _utils.TransitionPropTypeKeys);
    return /*#__PURE__*/_react.default.createElement(_reactTransitionGroup.Transition, _extends({}, transitionProps, {
      in: isOpen,
      nodeRef: this.nodeRef,
      onEntering: this.onEntering,
      onEntered: this.onEntered,
      onExit: this.onExit,
      onExiting: this.onExiting,
      onExited: this.onExited
    }), status => {
      let collapseClass = getTransitionClass(status);
      const classes = (0, _utils.mapToCssModules)((0, _classnames.default)(className, horizontal && 'collapse-horizontal', collapseClass, navbar && 'navbar-collapse'), cssModule);
      const style = dimension === null ? null : {
        [horizontal ? 'width' : 'height']: dimension
      };
      return /*#__PURE__*/_react.default.createElement(Tag, _extends({}, childProps, {
        style: _objectSpread(_objectSpread({}, childProps.style), style),
        className: classes,
        ref: this.nodeRef
      }), children);
    });
  }
}
Collapse.propTypes = propTypes;
Collapse.defaultProps = defaultProps;
var _default = Collapse;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsIl9jbGFzc25hbWVzIiwiX3JlYWN0VHJhbnNpdGlvbkdyb3VwIiwiX3V0aWxzIiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSIsIm5vZGVJbnRlcm9wIiwiV2Vha01hcCIsImNhY2hlQmFiZWxJbnRlcm9wIiwiY2FjaGVOb2RlSW50ZXJvcCIsImNhY2hlIiwiaGFzIiwiZ2V0IiwibmV3T2JqIiwiaGFzUHJvcGVydHlEZXNjcmlwdG9yIiwiZ2V0T3duUHJvcGVydHlEZXNjcmlwdG9yIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiZGVzYyIsInNldCIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJvd25LZXlzIiwib2JqZWN0IiwiZW51bWVyYWJsZU9ubHkiLCJzeW1ib2xzIiwiZmlsdGVyIiwic3ltIiwiZW51bWVyYWJsZSIsInB1c2giLCJfb2JqZWN0U3ByZWFkIiwiZm9yRWFjaCIsIl9kZWZpbmVQcm9wZXJ0eSIsImdldE93blByb3BlcnR5RGVzY3JpcHRvcnMiLCJkZWZpbmVQcm9wZXJ0aWVzIiwiY29uZmlndXJhYmxlIiwid3JpdGFibGUiLCJwcm9wVHlwZXMiLCJUcmFuc2l0aW9uIiwiaG9yaXpvbnRhbCIsImJvb2wiLCJpc09wZW4iLCJjaGlsZHJlbiIsIm9uZU9mVHlwZSIsImFycmF5T2YiLCJub2RlIiwidGFnIiwidGFnUHJvcFR5cGUiLCJjbGFzc05hbWUiLCJuYXZiYXIiLCJjc3NNb2R1bGUiLCJpbm5lclJlZiIsInNoYXBlIiwiY3VycmVudCIsImRlZmF1bHRQcm9wcyIsImFwcGVhciIsImVudGVyIiwiZXhpdCIsInRpbWVvdXQiLCJUcmFuc2l0aW9uVGltZW91dHMiLCJDb2xsYXBzZSIsInRyYW5zaXRpb25TdGF0dXNUb0NsYXNzSGFzaCIsIlRyYW5zaXRpb25TdGF0dXNlcyIsIkVOVEVSSU5HIiwiRU5URVJFRCIsIkVYSVRJTkciLCJFWElURUQiLCJnZXRUcmFuc2l0aW9uQ2xhc3MiLCJzdGF0dXMiLCJDb21wb25lbnQiLCJjb25zdHJ1Y3RvciIsInByb3BzIiwic3RhdGUiLCJkaW1lbnNpb24iLCJub2RlUmVmIiwiY3JlYXRlUmVmIiwibmFtZSIsIm9uRW50ZXJpbmciLCJfIiwiaXNBcHBlYXJpbmciLCJnZXROb2RlIiwic2V0U3RhdGUiLCJnZXREaW1lbnNpb24iLCJvbkVudGVyZWQiLCJvbkV4aXQiLCJvbkV4aXRpbmciLCJfdW51c2VkIiwib25FeGl0ZWQiLCJzY3JvbGxXaWR0aCIsInNjcm9sbEhlaWdodCIsInJlbmRlciIsIl90aGlzJHByb3BzIiwiVGFnIiwib3RoZXJQcm9wcyIsInRyYW5zaXRpb25Qcm9wcyIsInBpY2siLCJUcmFuc2l0aW9uUHJvcFR5cGVLZXlzIiwiY2hpbGRQcm9wcyIsIm9taXQiLCJjcmVhdGVFbGVtZW50IiwiaW4iLCJjb2xsYXBzZUNsYXNzIiwiY2xhc3NlcyIsIm1hcFRvQ3NzTW9kdWxlcyIsInN0eWxlIiwicmVmIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJDb2xsYXBzZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVXaWxkY2FyZChyZXF1aXJlKFwicmVhY3RcIikpO1xudmFyIF9wcm9wVHlwZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJwcm9wLXR5cGVzXCIpKTtcbnZhciBfY2xhc3NuYW1lcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcImNsYXNzbmFtZXNcIikpO1xudmFyIF9yZWFjdFRyYW5zaXRpb25Hcm91cCA9IHJlcXVpcmUoXCJyZWFjdC10cmFuc2l0aW9uLWdyb3VwXCIpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuY29uc3QgX2V4Y2x1ZGVkID0gW1widGFnXCIsIFwiaG9yaXpvbnRhbFwiLCBcImlzT3BlblwiLCBcImNsYXNzTmFtZVwiLCBcIm5hdmJhclwiLCBcImNzc01vZHVsZVwiLCBcImNoaWxkcmVuXCIsIFwiaW5uZXJSZWZcIl07XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKSB7IGlmICh0eXBlb2YgV2Vha01hcCAhPT0gXCJmdW5jdGlvblwiKSByZXR1cm4gbnVsbDsgdmFyIGNhY2hlQmFiZWxJbnRlcm9wID0gbmV3IFdlYWtNYXAoKTsgdmFyIGNhY2hlTm9kZUludGVyb3AgPSBuZXcgV2Vha01hcCgpOyByZXR1cm4gKF9nZXRSZXF1aXJlV2lsZGNhcmRDYWNoZSA9IGZ1bmN0aW9uIChub2RlSW50ZXJvcCkgeyByZXR1cm4gbm9kZUludGVyb3AgPyBjYWNoZU5vZGVJbnRlcm9wIDogY2FjaGVCYWJlbEludGVyb3A7IH0pKG5vZGVJbnRlcm9wKTsgfVxuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlV2lsZGNhcmQob2JqLCBub2RlSW50ZXJvcCkgeyBpZiAoIW5vZGVJbnRlcm9wICYmIG9iaiAmJiBvYmouX19lc01vZHVsZSkgeyByZXR1cm4gb2JqOyB9IGlmIChvYmogPT09IG51bGwgfHwgdHlwZW9mIG9iaiAhPT0gXCJvYmplY3RcIiAmJiB0eXBlb2Ygb2JqICE9PSBcImZ1bmN0aW9uXCIpIHsgcmV0dXJuIHsgZGVmYXVsdDogb2JqIH07IH0gdmFyIGNhY2hlID0gX2dldFJlcXVpcmVXaWxkY2FyZENhY2hlKG5vZGVJbnRlcm9wKTsgaWYgKGNhY2hlICYmIGNhY2hlLmhhcyhvYmopKSB7IHJldHVybiBjYWNoZS5nZXQob2JqKTsgfSB2YXIgbmV3T2JqID0ge307IHZhciBoYXNQcm9wZXJ0eURlc2NyaXB0b3IgPSBPYmplY3QuZGVmaW5lUHJvcGVydHkgJiYgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcjsgZm9yICh2YXIga2V5IGluIG9iaikgeyBpZiAoa2V5ICE9PSBcImRlZmF1bHRcIiAmJiBPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwob2JqLCBrZXkpKSB7IHZhciBkZXNjID0gaGFzUHJvcGVydHlEZXNjcmlwdG9yID8gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmosIGtleSkgOiBudWxsOyBpZiAoZGVzYyAmJiAoZGVzYy5nZXQgfHwgZGVzYy5zZXQpKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShuZXdPYmosIGtleSwgZGVzYyk7IH0gZWxzZSB7IG5ld09ialtrZXldID0gb2JqW2tleV07IH0gfSB9IG5ld09iai5kZWZhdWx0ID0gb2JqOyBpZiAoY2FjaGUpIHsgY2FjaGUuc2V0KG9iaiwgbmV3T2JqKTsgfSByZXR1cm4gbmV3T2JqOyB9XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gb3duS2V5cyhvYmplY3QsIGVudW1lcmFibGVPbmx5KSB7IHZhciBrZXlzID0gT2JqZWN0LmtleXMob2JqZWN0KTsgaWYgKE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMpIHsgdmFyIHN5bWJvbHMgPSBPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKG9iamVjdCk7IGVudW1lcmFibGVPbmx5ICYmIChzeW1ib2xzID0gc3ltYm9scy5maWx0ZXIoZnVuY3Rpb24gKHN5bSkgeyByZXR1cm4gT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihvYmplY3QsIHN5bSkuZW51bWVyYWJsZTsgfSkpLCBrZXlzLnB1c2guYXBwbHkoa2V5cywgc3ltYm9scyk7IH0gcmV0dXJuIGtleXM7IH1cbmZ1bmN0aW9uIF9vYmplY3RTcHJlYWQodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBudWxsICE9IGFyZ3VtZW50c1tpXSA/IGFyZ3VtZW50c1tpXSA6IHt9OyBpICUgMiA/IG93bktleXMoT2JqZWN0KHNvdXJjZSksICEwKS5mb3JFYWNoKGZ1bmN0aW9uIChrZXkpIHsgX2RlZmluZVByb3BlcnR5KHRhcmdldCwga2V5LCBzb3VyY2Vba2V5XSk7IH0pIDogT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcnMgPyBPYmplY3QuZGVmaW5lUHJvcGVydGllcyh0YXJnZXQsIE9iamVjdC5nZXRPd25Qcm9wZXJ0eURlc2NyaXB0b3JzKHNvdXJjZSkpIDogb3duS2V5cyhPYmplY3Qoc291cmNlKSkuZm9yRWFjaChmdW5jdGlvbiAoa2V5KSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eSh0YXJnZXQsIGtleSwgT2JqZWN0LmdldE93blByb3BlcnR5RGVzY3JpcHRvcihzb3VyY2UsIGtleSkpOyB9KTsgfSByZXR1cm4gdGFyZ2V0OyB9XG5mdW5jdGlvbiBfZGVmaW5lUHJvcGVydHkob2JqLCBrZXksIHZhbHVlKSB7IGlmIChrZXkgaW4gb2JqKSB7IE9iamVjdC5kZWZpbmVQcm9wZXJ0eShvYmosIGtleSwgeyB2YWx1ZTogdmFsdWUsIGVudW1lcmFibGU6IHRydWUsIGNvbmZpZ3VyYWJsZTogdHJ1ZSwgd3JpdGFibGU6IHRydWUgfSk7IH0gZWxzZSB7IG9ialtrZXldID0gdmFsdWU7IH0gcmV0dXJuIG9iajsgfVxuY29uc3QgcHJvcFR5cGVzID0gX29iamVjdFNwcmVhZChfb2JqZWN0U3ByZWFkKHt9LCBfcmVhY3RUcmFuc2l0aW9uR3JvdXAuVHJhbnNpdGlvbi5wcm9wVHlwZXMpLCB7fSwge1xuICAvKiogTWFrZSBjb250ZW50IGFuaW1hdGlvbiBhcHBlYXIgaG9yaXpvbnRhbGx5ICovXG4gIGhvcml6b250YWw6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKiogU2V0IGlmIENvbGxhcHNlIGlzIG9wZW4gb3IgY2xvc2VkICovXG4gIGlzT3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGNoaWxkcmVuOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXlPZihfcHJvcFR5cGVzLmRlZmF1bHQubm9kZSksIF9wcm9wVHlwZXMuZGVmYXVsdC5ub2RlXSksXG4gIC8qKiBTZXQgYSBjdXN0b20gZWxlbWVudCBmb3IgdGhpcyBjb21wb25lbnQgKi9cbiAgdGFnOiBfdXRpbHMudGFnUHJvcFR5cGUsXG4gIC8qKiBBZGQgY3VzdG9tIGNsYXNzICovXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG4gIG5hdmJhcjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKiBDaGFuZ2UgdW5kZXJseWluZyBjb21wb25lbnQncyBDU1MgYmFzZSBjbGFzcyBuYW1lICovXG4gIGNzc01vZHVsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgaW5uZXJSZWY6IF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gICAgY3VycmVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdFxuICB9KVxufSk7XG5jb25zdCBkZWZhdWx0UHJvcHMgPSBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIF9yZWFjdFRyYW5zaXRpb25Hcm91cC5UcmFuc2l0aW9uLmRlZmF1bHRQcm9wcyksIHt9LCB7XG4gIGhvcml6b250YWw6IGZhbHNlLFxuICBpc09wZW46IGZhbHNlLFxuICBhcHBlYXI6IGZhbHNlLFxuICBlbnRlcjogdHJ1ZSxcbiAgZXhpdDogdHJ1ZSxcbiAgdGFnOiAnZGl2JyxcbiAgdGltZW91dDogX3V0aWxzLlRyYW5zaXRpb25UaW1lb3V0cy5Db2xsYXBzZVxufSk7XG5jb25zdCB0cmFuc2l0aW9uU3RhdHVzVG9DbGFzc0hhc2ggPSB7XG4gIFtfdXRpbHMuVHJhbnNpdGlvblN0YXR1c2VzLkVOVEVSSU5HXTogJ2NvbGxhcHNpbmcnLFxuICBbX3V0aWxzLlRyYW5zaXRpb25TdGF0dXNlcy5FTlRFUkVEXTogJ2NvbGxhcHNlIHNob3cnLFxuICBbX3V0aWxzLlRyYW5zaXRpb25TdGF0dXNlcy5FWElUSU5HXTogJ2NvbGxhcHNpbmcnLFxuICBbX3V0aWxzLlRyYW5zaXRpb25TdGF0dXNlcy5FWElURURdOiAnY29sbGFwc2UnXG59O1xuZnVuY3Rpb24gZ2V0VHJhbnNpdGlvbkNsYXNzKHN0YXR1cykge1xuICByZXR1cm4gdHJhbnNpdGlvblN0YXR1c1RvQ2xhc3NIYXNoW3N0YXR1c10gfHwgJ2NvbGxhcHNlJztcbn1cbmNsYXNzIENvbGxhcHNlIGV4dGVuZHMgX3JlYWN0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMuc3RhdGUgPSB7XG4gICAgICBkaW1lbnNpb246IG51bGxcbiAgICB9O1xuICAgIHRoaXMubm9kZVJlZiA9IHByb3BzLmlubmVyUmVmIHx8IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVSZWYoKTtcbiAgICBbJ29uRW50ZXJpbmcnLCAnb25FbnRlcmVkJywgJ29uRXhpdCcsICdvbkV4aXRpbmcnLCAnb25FeGl0ZWQnXS5mb3JFYWNoKG5hbWUgPT4ge1xuICAgICAgdGhpc1tuYW1lXSA9IHRoaXNbbmFtZV0uYmluZCh0aGlzKTtcbiAgICB9KTtcbiAgfVxuICBvbkVudGVyaW5nKF8sIGlzQXBwZWFyaW5nKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0Tm9kZSgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGltZW5zaW9uOiB0aGlzLmdldERpbWVuc2lvbihub2RlKVxuICAgIH0pO1xuICAgIHRoaXMucHJvcHMub25FbnRlcmluZyhub2RlLCBpc0FwcGVhcmluZyk7XG4gIH1cbiAgb25FbnRlcmVkKF8sIGlzQXBwZWFyaW5nKSB7XG4gICAgY29uc3Qgbm9kZSA9IHRoaXMuZ2V0Tm9kZSgpO1xuICAgIHRoaXMuc2V0U3RhdGUoe1xuICAgICAgZGltZW5zaW9uOiBudWxsXG4gICAgfSk7XG4gICAgdGhpcy5wcm9wcy5vbkVudGVyZWQobm9kZSwgaXNBcHBlYXJpbmcpO1xuICB9XG4gIG9uRXhpdCgpIHtcbiAgICBjb25zdCBub2RlID0gdGhpcy5nZXROb2RlKCk7XG4gICAgdGhpcy5zZXRTdGF0ZSh7XG4gICAgICBkaW1lbnNpb246IHRoaXMuZ2V0RGltZW5zaW9uKG5vZGUpXG4gICAgfSk7XG4gICAgdGhpcy5wcm9wcy5vbkV4aXQobm9kZSk7XG4gIH1cbiAgb25FeGl0aW5nKCkge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldE5vZGUoKTtcbiAgICAvLyBnZXR0aW5nIHRoaXMgdmFyaWFibGUgdHJpZ2dlcnMgYSByZWZsb3dcbiAgICBjb25zdCBfdW51c2VkID0gdGhpcy5nZXREaW1lbnNpb24obm9kZSk7IC8vIGVzbGludC1kaXNhYmxlLWxpbmUgbm8tdW51c2VkLXZhcnNcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRpbWVuc2lvbjogMFxuICAgIH0pO1xuICAgIHRoaXMucHJvcHMub25FeGl0aW5nKG5vZGUpO1xuICB9XG4gIG9uRXhpdGVkKCkge1xuICAgIGNvbnN0IG5vZGUgPSB0aGlzLmdldE5vZGUoKTtcbiAgICB0aGlzLnNldFN0YXRlKHtcbiAgICAgIGRpbWVuc2lvbjogbnVsbFxuICAgIH0pO1xuICAgIHRoaXMucHJvcHMub25FeGl0ZWQobm9kZSk7XG4gIH1cbiAgZ2V0Tm9kZSgpIHtcbiAgICByZXR1cm4gdGhpcy5ub2RlUmVmLmN1cnJlbnQ7XG4gIH1cbiAgZ2V0RGltZW5zaW9uKG5vZGUpIHtcbiAgICByZXR1cm4gdGhpcy5wcm9wcy5ob3Jpem9udGFsID8gbm9kZS5zY3JvbGxXaWR0aCA6IG5vZGUuc2Nyb2xsSGVpZ2h0O1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICB7XG4gICAgICAgIHRhZzogVGFnLFxuICAgICAgICBob3Jpem9udGFsLFxuICAgICAgICBpc09wZW4sXG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgbmF2YmFyLFxuICAgICAgICBjc3NNb2R1bGUsXG4gICAgICAgIGNoaWxkcmVuLFxuICAgICAgICBpbm5lclJlZlxuICAgICAgfSA9IF90aGlzJHByb3BzLFxuICAgICAgb3RoZXJQcm9wcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhfdGhpcyRwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgICBjb25zdCB7XG4gICAgICBkaW1lbnNpb25cbiAgICB9ID0gdGhpcy5zdGF0ZTtcbiAgICBjb25zdCB0cmFuc2l0aW9uUHJvcHMgPSAoMCwgX3V0aWxzLnBpY2spKG90aGVyUHJvcHMsIF91dGlscy5UcmFuc2l0aW9uUHJvcFR5cGVLZXlzKTtcbiAgICBjb25zdCBjaGlsZFByb3BzID0gKDAsIF91dGlscy5vbWl0KShvdGhlclByb3BzLCBfdXRpbHMuVHJhbnNpdGlvblByb3BUeXBlS2V5cyk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdFRyYW5zaXRpb25Hcm91cC5UcmFuc2l0aW9uLCBfZXh0ZW5kcyh7fSwgdHJhbnNpdGlvblByb3BzLCB7XG4gICAgICBpbjogaXNPcGVuLFxuICAgICAgbm9kZVJlZjogdGhpcy5ub2RlUmVmLFxuICAgICAgb25FbnRlcmluZzogdGhpcy5vbkVudGVyaW5nLFxuICAgICAgb25FbnRlcmVkOiB0aGlzLm9uRW50ZXJlZCxcbiAgICAgIG9uRXhpdDogdGhpcy5vbkV4aXQsXG4gICAgICBvbkV4aXRpbmc6IHRoaXMub25FeGl0aW5nLFxuICAgICAgb25FeGl0ZWQ6IHRoaXMub25FeGl0ZWRcbiAgICB9KSwgc3RhdHVzID0+IHtcbiAgICAgIGxldCBjb2xsYXBzZUNsYXNzID0gZ2V0VHJhbnNpdGlvbkNsYXNzKHN0YXR1cyk7XG4gICAgICBjb25zdCBjbGFzc2VzID0gKDAsIF91dGlscy5tYXBUb0Nzc01vZHVsZXMpKCgwLCBfY2xhc3NuYW1lcy5kZWZhdWx0KShjbGFzc05hbWUsIGhvcml6b250YWwgJiYgJ2NvbGxhcHNlLWhvcml6b250YWwnLCBjb2xsYXBzZUNsYXNzLCBuYXZiYXIgJiYgJ25hdmJhci1jb2xsYXBzZScpLCBjc3NNb2R1bGUpO1xuICAgICAgY29uc3Qgc3R5bGUgPSBkaW1lbnNpb24gPT09IG51bGwgPyBudWxsIDoge1xuICAgICAgICBbaG9yaXpvbnRhbCA/ICd3aWR0aCcgOiAnaGVpZ2h0J106IGRpbWVuc2lvblxuICAgICAgfTtcbiAgICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUYWcsIF9leHRlbmRzKHt9LCBjaGlsZFByb3BzLCB7XG4gICAgICAgIHN0eWxlOiBfb2JqZWN0U3ByZWFkKF9vYmplY3RTcHJlYWQoe30sIGNoaWxkUHJvcHMuc3R5bGUpLCBzdHlsZSksXG4gICAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgICAgcmVmOiB0aGlzLm5vZGVSZWZcbiAgICAgIH0pLCBjaGlsZHJlbik7XG4gICAgfSk7XG4gIH1cbn1cbkNvbGxhcHNlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkNvbGxhcHNlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBfZGVmYXVsdCA9IENvbGxhcHNlO1xuZXhwb3J0cy5kZWZhdWx0ID0gX2RlZmF1bHQ7Il0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaQSxNQUFNLENBQUNDLGNBQWMsQ0FBQ0MsT0FBTyxFQUFFLFlBQVksRUFBRTtFQUMzQ0MsS0FBSyxFQUFFO0FBQ1QsQ0FBQyxDQUFDO0FBQ0ZELE9BQU8sQ0FBQ0UsT0FBTyxHQUFHLEtBQUssQ0FBQztBQUN4QixJQUFJQyxNQUFNLEdBQUdDLHVCQUF1QixDQUFDQyxPQUFPLENBQUMsT0FBTyxDQUFDLENBQUM7QUFDdEQsSUFBSUMsVUFBVSxHQUFHQyxzQkFBc0IsQ0FBQ0YsT0FBTyxDQUFDLFlBQVksQ0FBQyxDQUFDO0FBQzlELElBQUlHLFdBQVcsR0FBR0Qsc0JBQXNCLENBQUNGLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUMvRCxJQUFJSSxxQkFBcUIsR0FBR0osT0FBTyxDQUFDLHdCQUF3QixDQUFDO0FBQzdELElBQUlLLE1BQU0sR0FBR0wsT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUMvQixNQUFNTSxTQUFTLEdBQUcsQ0FBQyxLQUFLLEVBQUUsWUFBWSxFQUFFLFFBQVEsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLFdBQVcsRUFBRSxVQUFVLEVBQUUsVUFBVSxDQUFDO0FBQzdHLFNBQVNKLHNCQUFzQkEsQ0FBQ0ssR0FBRyxFQUFFO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVUsR0FBR0QsR0FBRyxHQUFH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