d61ecdededc43dc6aed11153050486ca
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JvmMemory = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const formatter_1 = require("../../formatter");
const reactstrap_1 = require("reactstrap");
class JvmMemory extends react_1.default.Component {
  render() {
    const {
      jvmMetrics,
      wholeNumberFormat
    } = this.props;
    return react_1.default.createElement("div", null, react_1.default.createElement("h3", null, "Memory"), Object.keys(jvmMetrics).map((key, index) => react_1.default.createElement("div", {
      key: index
    }, jvmMetrics[key].max !== -1 ? react_1.default.createElement("span", null, react_1.default.createElement("span", null, key), " (", react_1.default.createElement(formatter_1.TextFormat, {
      value: jvmMetrics[key].used / 1048576,
      type: "number",
      format: wholeNumberFormat
    }), "M /", ' ', react_1.default.createElement(formatter_1.TextFormat, {
      value: jvmMetrics[key].max / 1048576,
      type: "number",
      format: wholeNumberFormat
    }), "M)") : react_1.default.createElement("span", null, react_1.default.createElement("span", null, key), " ", react_1.default.createElement(formatter_1.TextFormat, {
      value: jvmMetrics[key].used / 1048576,
      type: "number",
      format: wholeNumberFormat
    }), "M"), react_1.default.createElement("div", null, "Committed : ", react_1.default.createElement(formatter_1.TextFormat, {
      value: jvmMetrics[key].committed / 1048576,
      type: "number",
      format: wholeNumberFormat
    }), "M"), jvmMetrics[key].max !== -1 ? react_1.default.createElement(reactstrap_1.Progress, {
      animated: true,
      value: jvmMetrics[key].used,
      min: "0",
      max: jvmMetrics[key].max,
      color: "success"
    }, react_1.default.createElement("span", null, react_1.default.createElement(formatter_1.TextFormat, {
      value: jvmMetrics[key].used * 100 / jvmMetrics[key].max,
      type: "number",
      format: wholeNumberFormat
    }), "%")) : '')));
  }
}
exports.JvmMemory = JvmMemory;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwidHNsaWJfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlcXVpcmUiLCJmb3JtYXR0ZXJfMSIsInJlYWN0c3RyYXBfMSIsIkp2bU1lbW9yeSIsImRlZmF1bHQiLCJDb21wb25lbnQiLCJyZW5kZXIiLCJqdm1NZXRyaWNzIiwid2hvbGVOdW1iZXJGb3JtYXQiLCJwcm9wcyIsImNyZWF0ZUVsZW1lbnQiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwia2V5IiwiaW5kZXgiLCJtYXgiLCJUZXh0Rm9ybWF0IiwidmFsdWUiLCJ1c2VkIiwidHlwZSIsImZvcm1hdCIsImNvbW1pdHRlZCIsIlByb2dyZXNzIiwiYW5pbWF0ZWQiLCJtaW4iLCJjb2xvciIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50L21ldHJpY3MvanZtTWVtb3J5LnRzeCJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBLE1BQUFBLE9BQUEsR0FBQUMsT0FBQSxDQUFBQyxlQUFBLENBQUFDLE9BQUE7QUFDQSxNQUFBQyxXQUFBLEdBQUFELE9BQUE7QUFDQSxNQUFBRSxZQUFBLEdBQUFGLE9BQUE7QUFPQSxNQUFhRyxTQUFVLFNBQVFOLE9BQUEsQ0FBQU8sT0FBSyxDQUFDQyxTQUEwQjtFQUM3REMsTUFBTUEsQ0FBQTtJQUNKLE1BQU07TUFBRUMsVUFBVTtNQUFFQztJQUFpQixDQUFFLEdBQUcsSUFBSSxDQUFDQyxLQUFLO0lBQ3BELE9BQ0VaLE9BQUEsQ0FBQU8sT0FBQSxDQUFBTSxhQUFBLGNBQ0ViLE9BQUEsQ0FBQU8sT0FBQSxDQUFBTSxhQUFBLHNCQUFlLEVBQ2RDLE1BQU0sQ0FBQ0MsSUFBSSxDQUFDTCxVQUFVLENBQUMsQ0FBQ00sR0FBRyxDQUFDLENBQUNDLEdBQUcsRUFBRUMsS0FBSyxLQUN0Q2xCLE9BQUEsQ0FBQU8sT0FBQSxDQUFBTSxhQUFBO01BQUtJLEdBQUcsRUFBRUM7SUFBSyxHQUNaUixVQUFVLENB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