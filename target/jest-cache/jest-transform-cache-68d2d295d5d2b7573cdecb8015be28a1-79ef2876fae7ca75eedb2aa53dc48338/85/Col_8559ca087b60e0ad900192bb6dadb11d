17fb0f48530c72a330744d63a9b9a7fe
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getColumnClasses = exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _utils = require("./utils");
const _excluded = ["className", "cssModule", "widths", "tag"];
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
const colWidths = ['xs', 'sm', 'md', 'lg', 'xl', 'xxl'];
const stringOrNumberProp = _propTypes.default.oneOfType([_propTypes.default.number, _propTypes.default.string]);
const columnProps = _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.string, _propTypes.default.shape({
  size: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.number, _propTypes.default.string]),
  order: stringOrNumberProp,
  offset: stringOrNumberProp
})]);
const propTypes = {
  tag: _utils.tagPropType,
  xs: columnProps,
  sm: columnProps,
  md: columnProps,
  lg: columnProps,
  xl: columnProps,
  xxl: columnProps,
  className: _propTypes.default.string,
  cssModule: _propTypes.default.object,
  widths: _propTypes.default.array
};
const getColumnSizeClass = (isXs, colWidth, colSize) => {
  if (colSize === true || colSize === '') {
    return isXs ? 'col' : `col-${colWidth}`;
  }
  if (colSize === 'auto') {
    return isXs ? 'col-auto' : `col-${colWidth}-auto`;
  }
  return isXs ? `col-${colSize}` : `col-${colWidth}-${colSize}`;
};
const getColumnClasses = (attributes, cssModule, widths = colWidths) => {
  const modifiedAttributes = attributes;
  const colClasses = [];
  widths.forEach((colWidth, i) => {
    let columnProp = modifiedAttributes[colWidth];
    delete modifiedAttributes[colWidth];
    if (!columnProp && columnProp !== '') {
      return;
    }
    const isXs = !i;
    if ((0, _utils.isObject)(columnProp)) {
      const colSizeInterfix = isXs ? '-' : `-${colWidth}-`;
      const colClass = getColumnSizeClass(isXs, colWidth, columnProp.size);
      colClasses.push((0, _utils.mapToCssModules)((0, _classnames.default)({
        [colClass]: columnProp.size || columnProp.size === '',
        [`order${colSizeInterfix}${columnProp.order}`]: columnProp.order || columnProp.order === 0,
        [`offset${colSizeInterfix}${columnProp.offset}`]: columnProp.offset || columnProp.offset === 0
      }), cssModule));
    } else {
      const colClass = getColumnSizeClass(isXs, colWidth, columnProp);
      colClasses.push(colClass);
    }
  });
  return {
    colClasses,
    modifiedAttributes
  };
};
exports.getColumnClasses = getColumnClasses;
function Col(props) {
  const {
      className,
      cssModule,
      widths = colWidths,
      tag: Tag = 'div'
    } = props,
    attributes = _objectWithoutProperties(props, _excluded);
  let {
    modifiedAttributes,
    colClasses
  } = getColumnClasses(attributes, cssModule, widths);
  if (!colClasses.length) {
    colClasses.push('col');
  }
  const classes = (0, _utils.mapToCssModules)((0, _classnames.default)(className, colClasses), cssModule);
  return /*#__PURE__*/_react.default.createElement(Tag, _extends({}, modifiedAttributes, {
    className: classes
  }));
}
Col.propTypes = propTypes;
var _default = Col;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImdldENvbHVtbkNsYXNzZXMiLCJkZWZhdWx0IiwiX3JlYWN0IiwiX2ludGVyb3BSZXF1aXJlRGVmYXVsdCIsInJlcXVpcmUiLCJfcHJvcFR5cGVzIiwiX2NsYXNzbmFtZXMiLCJfdXRpbHMiLCJfZXhjbHVkZWQiLCJvYmoiLCJfX2VzTW9kdWxlIiwiX2V4dGVuZHMiLCJhc3NpZ24iLCJiaW5kIiwidGFyZ2V0IiwiaSIsImFyZ3VtZW50cyIsImxlbmd0aCIsInNvdXJjZSIsImtleSIsInByb3RvdHlwZSIsImhhc093blByb3BlcnR5IiwiY2FsbCIsImFwcGx5IiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzIiwiZXhjbHVkZWQiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXNMb29zZSIsImdldE93blByb3BlcnR5U3ltYm9scyIsInNvdXJjZVN5bWJvbEtleXMiLCJpbmRleE9mIiwicHJvcGVydHlJc0VudW1lcmFibGUiLCJzb3VyY2VLZXlzIiwia2V5cyIsImNvbFdpZHRocyIsInN0cmluZ09yTnVtYmVyUHJvcCIsIm9uZU9mVHlwZSIsIm51bWJlciIsInN0cmluZyIsImNvbHVtblByb3BzIiwiYm9vbCIsInNoYXBlIiwic2l6ZSIsIm9yZGVyIiwib2Zmc2V0IiwicHJvcFR5cGVzIiwidGFnIiwidGFnUHJvcFR5cGUiLCJ4cyIsInNtIiwibWQiLCJsZyIsInhsIiwieHhsIiwiY2xhc3NOYW1lIiwiY3NzTW9kdWxlIiwib2JqZWN0Iiwid2lkdGhzIiwiYXJyYXkiLCJnZXRDb2x1bW5TaXplQ2xhc3MiLCJpc1hzIiwiY29sV2lkdGgiLCJjb2xTaXplIiwiYXR0cmlidXRlcyIsIm1vZGlmaWVkQXR0cmlidXRlcyIsImNvbENsYXNzZXMiLCJmb3JFYWNoIiwiY29sdW1uUHJvcCIsImlzT2JqZWN0IiwiY29sU2l6ZUludGVyZml4IiwiY29sQ2xhc3MiLCJwdXNoIiwibWFwVG9Dc3NNb2R1bGVzIiwiQ29sIiwicHJvcHMiLCJUYWciLCJjbGFzc2VzIiwiY3JlYXRlRWxlbWVudCIsIl9kZWZhdWx0Il0sInNvdXJjZXMiOlsiQ29sLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0cy5nZXRDb2x1bW5DbGFzc2VzID0gZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX2NsYXNzbmFtZXMgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJjbGFzc25hbWVzXCIpKTtcbnZhciBfdXRpbHMgPSByZXF1aXJlKFwiLi91dGlsc1wiKTtcbmNvbnN0IF9leGNsdWRlZCA9IFtcImNsYXNzTmFtZVwiLCBcImNzc01vZHVsZVwiLCBcIndpZHRoc1wiLCBcInRhZ1wiXTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuY29uc3QgY29sV2lkdGhzID0gWyd4cycsICdzbScsICdtZCcsICdsZycsICd4bCcsICd4eGwnXTtcbmNvbnN0IHN0cmluZ09yTnVtYmVyUHJvcCA9IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmddKTtcbmNvbnN0IGNvbHVtblByb3BzID0gX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsIF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5zaGFwZSh7XG4gIHNpemU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQubnVtYmVyLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG4gIG9yZGVyOiBzdHJpbmdPck51bWJlclByb3AsXG4gIG9mZnNldDogc3RyaW5nT3JOdW1iZXJQcm9wXG59KV0pO1xuY29uc3QgcHJvcFR5cGVzID0ge1xuICB0YWc6IF91dGlscy50YWdQcm9wVHlwZSxcbiAgeHM6IGNvbHVtblByb3BzLFxuICBzbTogY29sdW1uUHJvcHMsXG4gIG1kOiBjb2x1bW5Qcm9wcyxcbiAgbGc6IGNvbHVtblByb3BzLFxuICB4bDogY29sdW1uUHJvcHMsXG4gIHh4bDogY29sdW1uUHJvcHMsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgY3NzTW9kdWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICB3aWR0aHM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheVxufTtcbmNvbnN0IGdldENvbHVtblNpemVDbGFzcyA9IChpc1hzLCBjb2xXaWR0aCwgY29sU2l6ZSkgPT4ge1xuICBpZiAoY29sU2l6ZSA9PT0gdHJ1ZSB8fCBjb2xTaXplID09PSAnJykge1xuICAgIHJldHVybiBpc1hzID8gJ2NvbCcgOiBgY29sLSR7Y29sV2lkdGh9YDtcbiAgfVxuICBpZiAoY29sU2l6ZSA9PT0gJ2F1dG8nKSB7XG4gICAgcmV0dXJuIGlzWHMgPyAnY29sLWF1dG8nIDogYGNvbC0ke2NvbFdpZHRofS1hdXRvYDtcbiAgfVxuICByZXR1cm4gaXNYcyA/IGBjb2wtJHtjb2xTaXplfWAgOiBgY29sLSR7Y29sV2lkdGh9LSR7Y29sU2l6ZX1gO1xufTtcbmNvbnN0IGdldENvbHVtbkNsYXNzZXMgPSAoYXR0cmlidXRlcywgY3NzTW9kdWxlLCB3aWR0aHMgPSBjb2xXaWR0aHMpID0+IHtcbiAgY29uc3QgbW9kaWZpZWRBdHRyaWJ1dGVzID0gYXR0cmlidXRlcztcbiAgY29uc3QgY29sQ2xhc3NlcyA9IFtdO1xuICB3aWR0aHMuZm9yRWFjaCgoY29sV2lkdGgsIGkpID0+IHtcbiAgICBsZXQgY29sdW1uUHJvcCA9IG1vZGlmaWVkQXR0cmlidXRlc1tjb2xXaWR0aF07XG4gICAgZGVsZXRlIG1vZGlmaWVkQXR0cmlidXRlc1tjb2xXaWR0aF07XG4gICAgaWYgKCFjb2x1bW5Qcm9wICYmIGNvbHVtblByb3AgIT09ICcnKSB7XG4gICAgICByZXR1cm47XG4gICAgfVxuICAgIGNvbnN0IGlzWHMgPSAhaTtcbiAgICBpZiAoKDAsIF91dGlscy5pc09iamVjdCkoY29sdW1uUHJvcCkpIHtcbiAgICAgIGNvbnN0IGNvbFNpemVJbnRlcmZpeCA9IGlzWHMgPyAnLScgOiBgLSR7Y29sV2lkdGh9LWA7XG4gICAgICBjb25zdCBjb2xDbGFzcyA9IGdldENvbHVtblNpemVDbGFzcyhpc1hzLCBjb2xXaWR0aCwgY29sdW1uUHJvcC5zaXplKTtcbiAgICAgIGNvbENsYXNzZXMucHVzaCgoMCwgX3V0aWxzLm1hcFRvQ3NzTW9kdWxlcykoKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKHtcbiAgICAgICAgW2NvbENsYXNzXTogY29sdW1uUHJvcC5zaXplIHx8IGNvbHVtblByb3Auc2l6ZSA9PT0gJycsXG4gICAgICAgIFtgb3JkZXIke2NvbFNpemVJbnRlcmZpeH0ke2NvbHVtblByb3Aub3JkZXJ9YF06IGNvbHVtblByb3Aub3JkZXIgfHwgY29sdW1uUHJvcC5vcmRlciA9PT0gMCxcbiAgICAgICAgW2BvZmZzZXQke2NvbFNpemVJbnRlcmZpeH0ke2NvbHVtblByb3Aub2Zmc2V0fWBdOiBjb2x1bW5Qcm9wLm9mZnNldCB8fCBjb2x1bW5Qcm9wLm9mZnNldCA9PT0gMFxuICAgICAgfSksIGNzc01vZHVsZSkpO1xuICAgIH0gZWxzZSB7XG4gICAgICBjb25zdCBjb2xDbGFzcyA9IGdldENvbHVtblNpemVDbGFzcyhpc1hzLCBjb2xXaWR0aCwgY29sdW1uUHJvcCk7XG4gICAgICBjb2xDbGFzc2VzLnB1c2goY29sQ2xhc3MpO1xuICAgIH1cbiAgfSk7XG4gIHJldHVybiB7XG4gICAgY29sQ2xhc3NlcyxcbiAgICBtb2RpZmllZEF0dHJpYnV0ZXNcbiAgfTtcbn07XG5leHBvcnRzLmdldENvbHVtbkNsYXNzZXMgPSBnZXRDb2x1bW5DbGFzc2VzO1xuZnVuY3Rpb24gQ29sKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNzc01vZHVsZSxcbiAgICAgIHdpZHRocyA9IGNvbFdpZHRocyxcbiAgICAgIHRhZzogVGFnID0gJ2RpdidcbiAgICB9ID0gcHJvcHMsXG4gICAgYXR0cmlidXRlcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgbGV0IHtcbiAgICBtb2RpZmllZEF0dHJpYnV0ZXMsXG4gICAgY29sQ2xhc3Nlc1xuICB9ID0gZ2V0Q29sdW1uQ2xhc3NlcyhhdHRyaWJ1dGVzLCBjc3NNb2R1bGUsIHdpZHRocyk7XG4gIGlmICghY29sQ2xhc3Nlcy5sZW5ndGgpIHtcbiAgICBjb2xDbGFzc2VzLnB1c2goJ2NvbCcpO1xuICB9XG4gIGNvbnN0IGNsYXNzZXMgPSAoMCwgX3V0aWxzLm1hcFRvQ3NzTW9kdWxlcykoKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgY29sQ2xhc3NlcyksIGNzc01vZHVsZSk7XG4gIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChUYWcsIF9leHRlbmRzKHt9LCBtb2RpZmllZEF0dHJpYnV0ZXMsIHtcbiAgICBjbGFzc05hbWU6IGNsYXNzZXNcbiAgfSkpO1xufVxuQ29sLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbnZhciBfZGVmYXVsdCA9IENvbDtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLGdCQUFnQixHQUFHRixPQUFPLENBQUNHLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDbkQsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELElBQUlDLFVBQVUsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5RCxJQUFJRSxXQUFXLEdBQUdILHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0QsSUFBSUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQy9CLE1BQU1JLFNBQVMsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQztBQUM3RCxTQUFTTCxzQkFBc0JBLENBQUNNLEdBQUcsRUFBRTtFQUFFLE9BQU9BLEdBQUcsSUFBSUEsR0FBRyxDQUFDQyxVQUFVLEdBQUdELEdBQUcsR0FBRztJQUFFUixPQUFPLEVBQUVRO0VBQUksQ0FBQztBQUFFO0FBQzlGLFNBQVNFLFFBQVFBLENBQUEsRUFBRztFQUFFQSxRQUFRLEdBQUdmLE1BQU0sQ0FBQ2dCLE1BQU0sR0FBR2hC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