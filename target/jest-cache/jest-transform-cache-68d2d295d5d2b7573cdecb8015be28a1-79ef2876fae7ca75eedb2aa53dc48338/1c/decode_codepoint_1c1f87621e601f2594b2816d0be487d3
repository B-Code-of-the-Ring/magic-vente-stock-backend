e86bc86b81610cc6de42a97f37adaa63
"use strict";

// Adapted from https://github.com/mathiasbynens/he/blob/36afe179392226cf1b6ccdb16ebbb7a5a844d93a/src/he.js#L106-L134
var _a;
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.replaceCodePoint = exports.fromCodePoint = void 0;
var decodeMap = new Map([[0, 65533],
// C1 Unicode control character reference replacements
[128, 8364], [130, 8218], [131, 402], [132, 8222], [133, 8230], [134, 8224], [135, 8225], [136, 710], [137, 8240], [138, 352], [139, 8249], [140, 338], [142, 381], [145, 8216], [146, 8217], [147, 8220], [148, 8221], [149, 8226], [150, 8211], [151, 8212], [152, 732], [153, 8482], [154, 353], [155, 8250], [156, 339], [158, 382], [159, 376]]);
/**
 * Polyfill for `String.fromCodePoint`. It is used to create a string from a Unicode code point.
 */
exports.fromCodePoint =
// eslint-disable-next-line @typescript-eslint/no-unnecessary-condition, node/no-unsupported-features/es-builtins
(_a = String.fromCodePoint) !== null && _a !== void 0 ? _a : function (codePoint) {
  var output = "";
  if (codePoint > 0xffff) {
    codePoint -= 0x10000;
    output += String.fromCharCode(codePoint >>> 10 & 0x3ff | 0xd800);
    codePoint = 0xdc00 | codePoint & 0x3ff;
  }
  output += String.fromCharCode(codePoint);
  return output;
};
/**
 * Replace the given code point with a replacement character if it is a
 * surrogate or is outside the valid range. Otherwise return the code
 * point unchanged.
 */
function replaceCodePoint(codePoint) {
  var _a;
  if (codePoint >= 0xd800 && codePoint <= 0xdfff || codePoint > 0x10ffff) {
    return 0xfffd;
  }
  return (_a = decodeMap.get(codePoint)) !== null && _a !== void 0 ? _a : codePoint;
}
exports.replaceCodePoint = replaceCodePoint;
/**
 * Replace the code point if relevant, then convert it to a string.
 *
 * @deprecated Use `fromCodePoint(replaceCodePoint(codePoint))` instead.
 * @param codePoint The code point to decode.
 * @returns The decoded code point.
 */
function decodeCodePoint(codePoint) {
  return (0, exports.fromCodePoint)(replaceCodePoint(codePoint));
}
exports.default = decodeCodePoint;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkZWNvZGVNYXAiLCJNYXAiLCJleHBvcnRzIiwiZnJvbUNvZGVQb2ludCIsIl9hIiwiU3RyaW5nIiwiY29kZVBvaW50Iiwib3V0cHV0IiwiZnJvbUNoYXJDb2RlIiwicmVwbGFjZUNvZGVQb2ludCIsImdldCIsImRlY29kZUNvZGVQb2ludCIsImRlZmF1bHQiXSwic291cmNlcyI6WyJodHRwczovL3Jhdy5naXRodWJ1c2VyY29udGVudC5jb20vZmI1NS9lbnRpdGllcy82MWFmZDQ3MDFlYWE3MzY5NzhiMTNjNzM1MWNkM2RlOWE5NmIwNGJjL3NyYy9kZWNvZGVfY29kZXBvaW50LnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOztBQUFBOzs7Ozs7QUFFQSxJQUFNQSxTQUFTLEdBQUcsSUFBSUMsR0FBRyxDQUFDLENBQ3RCLENBQUMsQ0FBQyxFQUFFLEtBQUssQ0FBQztBQUNWO0FBQ0EsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsSUFBSSxDQUFDLEVBQ1gsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLEVBQ1YsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQ2IsQ0FBQztBQUVGOzs7QUFHYUMsT0FBQSxDQUFBQyxhQUFhO0FBQ3RCO0FBQ0EsQ0FBQUMsRUFBQSxHQUFBQyxNQUFNLENBQUNGLGFBQWEsY0FBQUMsRUFBQSxjQUFBQSxFQUFBLEdBQ3BCLFVBQVVFLFNBQWlCO0VBQ3ZCLElBQUlDLE1BQU0sR0FBRyxFQUFFO0VBRWYsSUFBSUQsU0FBUyxHQUFHLE1BQU0sRUFBRTtJQUNwQkEsU0FBUyxJQUFJLE9BQU87SUFDcEJDLE1BQU0sSUFBSUYsTUFBTSxDQUFDRyxZQUFZLENBQ3ZCRixTQUFTLEtBQUssRUFBRSxHQUFJLEtBQUssR0FBSSxNQUFNLENBQ3hDO0lBQ0RBLFNBQVMsR0FBRyxNQUFNLEdBQUlBLFNBQVMsR0FBRyxLQUFNOztFQUc1Q0MsTUFBTSxJQUFJRixNQUFNLENBQUNHLFlBQVksQ0FBQ0YsU0FBUyxDQUFDO0VBQ3hDLE9BQU9DLE1BQU07QUFDakIsQ0FBQztBQUVMOzs7OztBQUtBLFNBQWdCRSxnQkFBZ0JBLENBQUNILFNBQWlCOztFQUM5QyxJQUFLQSxTQUFTLElBQUksTUFBTSxJQUFJQSxTQUFTLElBQUksTUFBTSxJQUFLQSxTQUFTLEdBQUcsUUFBUSxFQUFFO0lBQ3RFLE9BQU8sTUFBTTs7RUFHakIsT0FBTyxDQUFBRixFQUFBLEdBQUFKLFNBQVMsQ0FBQ1UsR0FBRyxDQUFDSixTQUFTLENBQUMsY0FBQUYsRUFBQSxjQUFBQSxFQUFBLEdBQUlFLFNBQVM7QUFDaEQ7QUFOQUosT0FBQSxDQUFBTyxnQkFBQSxHQUFBQSxnQkFBQTtBQVFBOzs7Ozs7O0FBT0EsU0FBd0JFLGVBQWVBLENBQUNMLFNBQWlCO0VBQ3JELE9BQU8sSUFBQUosT0FBQSxDQUFBQyxhQUFhLEVBQUNNLGdCQUFnQixDQUFDSCxTQUFTLENBQUMsQ0FBQztBQUNyRDtBQUZBSixPQUFBLENBQUFVLE9BQUEsR0FBQUQsZUFBQSIsImlnbm9yZUxpc3QiOltdfQ==