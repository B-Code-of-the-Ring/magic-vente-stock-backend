06e288ae40368f7cfe26323196123cda
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.JvmThreads = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const formatter_1 = require("../../formatter");
const reactstrap_1 = require("reactstrap");
const threads_modal_1 = tslib_1.__importDefault(require("./threads-modal"));
class JvmThreads extends react_1.default.Component {
  constructor() {
    super(...arguments);
    this.state = {
      showModal: false,
      threadStats: {
        threadDumpAll: 0,
        threadDumpRunnable: 0,
        threadDumpTimedWaiting: 0,
        threadDumpWaiting: 0,
        threadDumpBlocked: 0
      }
    };
    this.openModal = () => {
      this.setState({
        showModal: true
      });
    };
    this.handleClose = e => {
      this.setState({
        showModal: false
      });
    };
    this.renderModal = () => react_1.default.createElement(threads_modal_1.default, {
      handleClose: this.handleClose,
      showModal: this.state.showModal,
      threadDump: this.props.jvmThreads
    });
  }
  countThreadByState() {
    if (this.props.jvmThreads.threads) {
      const threadStats = {
        threadDumpAll: 0,
        threadDumpRunnable: 0,
        threadDumpTimedWaiting: 0,
        threadDumpWaiting: 0,
        threadDumpBlocked: 0
      };
      this.props.jvmThreads.threads.forEach(thread => {
        if (thread.threadState === 'RUNNABLE') {
          threadStats.threadDumpRunnable += 1;
        } else if (thread.threadState === 'WAITING') {
          threadStats.threadDumpWaiting += 1;
        } else if (thread.threadState === 'TIMED_WAITING') {
          threadStats.threadDumpTimedWaiting += 1;
        } else if (thread.threadState === 'BLOCKED') {
          threadStats.threadDumpBlocked += 1;
        }
      });
      threadStats.threadDumpAll = threadStats.threadDumpRunnable + threadStats.threadDumpWaiting + threadStats.threadDumpTimedWaiting + threadStats.threadDumpBlocked;
      this.setState({
        threadStats
      });
    }
  }
  componentDidMount() {
    if (this.props.jvmThreads.threads) {
      this.countThreadByState();
    }
  }
  componentDidUpdate(prevProps) {
    if (this.props.jvmThreads.threads && this.props.jvmThreads.threads !== prevProps.jvmThreads.threads) {
      this.countThreadByState();
    }
  }
  render() {
    const {
      wholeNumberFormat
    } = this.props;
    const {
      threadStats
    } = this.state;
    return react_1.default.createElement("div", null, react_1.default.createElement("b", null, "Threads"), " (Total: ", threadStats.threadDumpAll, ")", ' ', react_1.default.createElement("p", null, react_1.default.createElement("span", null, "Runnable"), " ", threadStats.threadDumpRunnable), react_1.default.createElement(reactstrap_1.Progress, {
      animated: true,
      min: "0",
      value: threadStats.threadDumpRunnable,
      max: threadStats.threadDumpAll,
      color: "success"
    }, react_1.default.createElement("span", null, react_1.default.createElement(formatter_1.TextFormat, {
      value: threadStats.threadDumpRunnable * 100 / threadStats.threadDumpAll,
      type: "number",
      format: wholeNumberFormat
    }))), react_1.default.createElement("p", null, react_1.default.createElement("span", null, "Timed Waiting"), " (", threadStats.threadDumpTimedWaiting, ")"), react_1.default.createElement(reactstrap_1.Progress, {
      animated: true,
      min: "0",
      value: threadStats.threadDumpTimedWaiting,
      max: threadStats.threadDumpAll,
      color: "warning"
    }, react_1.default.createElement("span", null, react_1.default.createElement(formatter_1.TextFormat, {
      value: threadStats.threadDumpTimedWaiting * 100 / threadStats.threadDumpAll,
      type: "number",
      format: wholeNumberFormat
    }))), react_1.default.createElement("p", null, react_1.default.createElement("span", null, "Waiting"), " (", threadStats.threadDumpWaiting, ")"), react_1.default.createElement(reactstrap_1.Progress, {
      animated: true,
      min: "0",
      value: threadStats.threadDumpWaiting,
      max: threadStats.threadDumpAll,
      color: "warning"
    }, react_1.default.createElement("span", null, react_1.default.createElement(formatter_1.TextFormat, {
      value: threadStats.threadDumpWaiting * 100 / threadStats.threadDumpAll,
      type: "number",
      format: wholeNumberFormat
    }))), react_1.default.createElement("p", null, react_1.default.createElement("span", null, "Blocked"), " (", threadStats.threadDumpBlocked, ")"), react_1.default.createElement(reactstrap_1.Progress, {
      animated: true,
      min: "0",
      value: threadStats.threadDumpBlocked,
      max: threadStats.threadDumpAll,
      color: "success"
    }, react_1.default.createElement("span", null, react_1.default.createElement(formatter_1.TextFormat, {
      value: threadStats.threadDumpBlocked * 100 / threadStats.threadDumpAll,
      type: "number",
      format: wholeNumberFormat
    }))), this.renderModal(), react_1.default.createElement(reactstrap_1.Button, {
      color: "primary",
      size: "sm",
      className: "hand",
      onClick: this.openModal
    }, "Expand"));
  }
}
exports.JvmThreads = JvmThreads;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwidHNsaWJfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlcXVpcmUiLCJmb3JtYXR0ZXJfMSIsInJlYWN0c3RyYXBfMSIsInRocmVhZHNfbW9kYWxfMSIsIkp2bVRocmVhZHMiLCJkZWZhdWx0IiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJzdGF0ZSIsInNob3dNb2RhbCIsInRocmVhZFN0YXRzIiwidGhyZWFkRHVtcEFsbCIsInRocmVhZER1bXBSdW5uYWJsZSIsInRocmVhZER1bXBUaW1lZFdhaXRpbmciLCJ0aHJlYWREdW1wV2FpdGluZyIsInRocmVhZER1bXBCbG9ja2VkIiwib3Blbk1vZGFsIiwic2V0U3RhdGUiLCJoYW5kbGVDbG9zZSIsImUiLCJyZW5kZXJNb2RhbCIsImNyZWF0ZUVsZW1lbnQiLCJ0aHJlYWREdW1wIiwicHJvcHMiLCJqdm1UaHJlYWRzIiwiY291bnRUaHJlYWRCeVN0YXRlIiwidGhyZWFkcyIsImZvckVhY2giLCJ0aHJlYWQiLCJ0aHJlYWRTdGF0ZSIsImNvbXBvbmVudERpZE1vdW50IiwiY29tcG9uZW50RGlkVXBkYXRlIiwicHJldlByb3BzIiwicmVuZGVyIiwid2hvbGVOdW1iZXJGb3JtYXQiLCJQcm9ncmVzcyIsImFuaW1hdGVkIiwibWluIiwidmFsdWUiLCJtYXgiLCJjb2xvciIsIlRleHRGb3JtYXQiLCJ0eXBlIiwiZm9ybWF0IiwiQnV0dG9uIiwic2l6ZSIsImNsYXNzTmFtZSIsIm9uQ2xpY2siLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiLi4vLi4vLi4vc3JjL2NvbXBvbmVudC9tZXRyaWNzL2p2bVRocmVhZHMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBQUEsT0FBQSxHQUFBQyxPQUFBLENBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLE1BQUFDLFdBQUEsR0FBQUQsT0FBQTtBQUNBLE1BQUFFLFlBQUEsR0FBQUYsT0FBQTtBQUNBLE1BQUFHLGVB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