37c5b0bc233b0036117215728f314f8f
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _utils = require("./utils");
const _excluded = ["items", "activeIndex", "cssModule", "onClickHandler", "className"];
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
function CarouselIndicators(props) {
  const {
      items,
      activeIndex,
      cssModule,
      onClickHandler,
      className
    } = props,
    attributes = _objectWithoutProperties(props, _excluded);
  const listClasses = (0, _utils.mapToCssModules)((0, _classnames.default)(className, 'carousel-indicators'), cssModule);
  const indicators = items.map((item, idx) => {
    const indicatorClasses = (0, _utils.mapToCssModules)((0, _classnames.default)({
      active: activeIndex === idx
    }), cssModule);
    return /*#__PURE__*/_react.default.createElement("button", {
      "aria-label": item.caption,
      "data-bs-target": true,
      type: "button",
      key: `${item.key || Object.values(item).join('')}`,
      onClick: e => {
        e.preventDefault();
        onClickHandler(idx);
      },
      className: indicatorClasses
    });
  });
  return /*#__PURE__*/_react.default.createElement("div", _extends({
    className: listClasses
  }, attributes), indicators);
}
CarouselIndicators.propTypes = {
  /** The current active index */
  activeIndex: _propTypes.default.number.isRequired,
  /** Add custom class */
  className: _propTypes.default.string,
  /** Change underlying component's CSS base class name */
  cssModule: _propTypes.default.object,
  /** Array of items to show */
  items: _propTypes.default.array.isRequired,
  /** Function to be triggered on click */
  onClickHandler: _propTypes.default.func.isRequired
};
var _default = CarouselIndicators;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl91dGlscyIsIl9leGNsdWRlZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwiQ2Fyb3VzZWxJbmRpY2F0b3JzIiwicHJvcHMiLCJpdGVtcyIsImFjdGl2ZUluZGV4IiwiY3NzTW9kdWxlIiwib25DbGlja0hhbmRsZXIiLCJjbGFzc05hbWUiLCJhdHRyaWJ1dGVzIiwibGlzdENsYXNzZXMiLCJtYXBUb0Nzc01vZHVsZXMiLCJpbmRpY2F0b3JzIiwibWFwIiwiaXRlbSIsImlkeCIsImluZGljYXRvckNsYXNzZXMiLCJhY3RpdmUiLCJjcmVhdGVFbGVtZW50IiwiY2FwdGlvbiIsInR5cGUiLCJ2YWx1ZXMiLCJqb2luIiwib25DbGljayIsImUiLCJwcmV2ZW50RGVmYXVsdCIsInByb3BUeXBlcyIsIm51bWJlciIsImlzUmVxdWlyZWQiLCJzdHJpbmciLCJvYmplY3QiLCJhcnJheSIsImZ1bmMiLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIkNhcm91c2VsSW5kaWNhdG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJpdGVtc1wiLCBcImFjdGl2ZUluZGV4XCIsIFwiY3NzTW9kdWxlXCIsIFwib25DbGlja0hhbmRsZXJcIiwgXCJjbGFzc05hbWVcIl07XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIENhcm91c2VsSW5kaWNhdG9ycyhwcm9wcykge1xuICBjb25zdCB7XG4gICAgICBpdGVtcyxcbiAgICAgIGFjdGl2ZUluZGV4LFxuICAgICAgY3NzTW9kdWxlLFxuICAgICAgb25DbGlja0hhbmRsZXIsXG4gICAgICBjbGFzc05hbWVcbiAgICB9ID0gcHJvcHMsXG4gICAgYXR0cmlidXRlcyA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhwcm9wcywgX2V4Y2x1ZGVkKTtcbiAgY29uc3QgbGlzdENsYXNzZXMgPSAoMCwgX3V0aWxzLm1hcFRvQ3NzTW9kdWxlcykoKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgJ2Nhcm91c2VsLWluZGljYXRvcnMnKSwgY3NzTW9kdWxlKTtcbiAgY29uc3QgaW5kaWNhdG9ycyA9IGl0ZW1zLm1hcCgoaXRlbSwgaWR4KSA9PiB7XG4gICAgY29uc3QgaW5kaWNhdG9yQ2xhc3NlcyA9ICgwLCBfdXRpbHMubWFwVG9Dc3NNb2R1bGVzKSgoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoe1xuICAgICAgYWN0aXZlOiBhY3RpdmVJbmRleCA9PT0gaWR4XG4gICAgfSksIGNzc01vZHVsZSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiYnV0dG9uXCIsIHtcbiAgICAgIFwiYXJpYS1sYWJlbFwiOiBpdGVtLmNhcHRpb24sXG4gICAgICBcImRhdGEtYnMtdGFyZ2V0XCI6IHRydWUsXG4gICAgICB0eXBlOiBcImJ1dHRvblwiLFxuICAgICAga2V5OiBgJHtpdGVtLmtleSB8fCBPYmplY3QudmFsdWVzKGl0ZW0pLmpvaW4oJycpfWAsXG4gICAgICBvbkNsaWNrOiBlID0+IHtcbiAgICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgICBvbkNsaWNrSGFuZGxlcihpZHgpO1xuICAgICAgfSxcbiAgICAgIGNsYXNzTmFtZTogaW5kaWNhdG9yQ2xhc3Nlc1xuICAgIH0pO1xuICB9KTtcbiAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwiZGl2XCIsIF9leHRlbmRzKHtcbiAgICBjbGFzc05hbWU6IGxpc3RDbGFzc2VzXG4gIH0sIGF0dHJpYnV0ZXMpLCBpbmRpY2F0b3JzKTtcbn1cbkNhcm91c2VsSW5kaWNhdG9ycy5wcm9wVHlwZXMgPSB7XG4gIC8qKiBUaGUgY3VycmVudCBhY3RpdmUgaW5kZXggKi9cbiAgYWN0aXZlSW5kZXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIuaXNSZXF1aXJlZCxcbiAgLyoqIEFkZCBjdXN0b20gY2xhc3MgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAvKiogQ2hhbmdlIHVuZGVybHlpbmcgY29tcG9uZW50J3MgQ1NTIGJhc2UgY2xhc3MgbmFtZSAqL1xuICBjc3NNb2R1bGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3QsXG4gIC8qKiBBcnJheSBvZiBpdGVtcyB0byBzaG93ICovXG4gIGl0ZW1zOiBfcHJvcFR5cGVzLmRlZmF1bHQuYXJyYXkuaXNSZXF1aXJlZCxcbiAgLyoqIEZ1bmN0aW9uIHRvIGJlIHRyaWdnZXJlZCBvbiBjbGljayAqL1xuICBvbkNsaWNrSGFuZGxlcjogX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMuaXNSZXF1aXJlZFxufTtcbnZhciBfZGVmYXVsdCA9IENhcm91c2VsSW5kaWNhdG9ycztcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELElBQUlDLFVBQVUsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5RCxJQUFJRSxXQUFXLEdBQUdILHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0QsSUFBSUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsU0FB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