871a0000c31f6e8036046a4f176b7d10
var assignValue = require('./_assignValue'),
  castPath = require('./_castPath'),
  isIndex = require('./_isIndex'),
  isObject = require('./isObject'),
  toKey = require('./_toKey');

/**
 * The base implementation of `_.set`.
 *
 * @private
 * @param {Object} object The object to modify.
 * @param {Array|string} path The path of the property to set.
 * @param {*} value The value to set.
 * @param {Function} [customizer] The function to customize path creation.
 * @returns {Object} Returns `object`.
 */
function baseSet(object, path, value, customizer) {
  if (!isObject(object)) {
    return object;
  }
  path = castPath(path, object);
  var index = -1,
    length = path.length,
    lastIndex = length - 1,
    nested = object;
  while (nested != null && ++index < length) {
    var key = toKey(path[index]),
      newValue = value;
    if (key === '__proto__' || key === 'constructor' || key === 'prototype') {
      return object;
    }
    if (index != lastIndex) {
      var objValue = nested[key];
      newValue = customizer ? customizer(objValue, key, nested) : undefined;
      if (newValue === undefined) {
        newValue = isObject(objValue) ? objValue : isIndex(path[index + 1]) ? [] : {};
      }
    }
    assignValue(nested, key, newValue);
    nested = nested[key];
  }
  return object;
}
module.exports = baseSet;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhc3NpZ25WYWx1ZSIsInJlcXVpcmUiLCJjYXN0UGF0aCIsImlzSW5kZXgiLCJpc09iamVjdCIsInRvS2V5IiwiYmFzZVNldCIsIm9iamVjdCIsInBhdGgiLCJ2YWx1ZSIsImN1c3RvbWl6ZXIiLCJpbmRleCIsImxlbmd0aCIsImxhc3RJbmRleCIsIm5lc3RlZCIsImtleSIsIm5ld1ZhbHVlIiwib2JqVmFsdWUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiX2Jhc2VTZXQuanMiXSwic291cmNlc0NvbnRlbnQiOlsidmFyIGFzc2lnblZhbHVlID0gcmVxdWlyZSgnLi9fYXNzaWduVmFsdWUnKSxcbiAgICBjYXN0UGF0aCA9IHJlcXVpcmUoJy4vX2Nhc3RQYXRoJyksXG4gICAgaXNJbmRleCA9IHJlcXVpcmUoJy4vX2lzSW5kZXgnKSxcbiAgICBpc09iamVjdCA9IHJlcXVpcmUoJy4vaXNPYmplY3QnKSxcbiAgICB0b0tleSA9IHJlcXVpcmUoJy4vX3RvS2V5Jyk7XG5cbi8qKlxuICogVGhlIGJhc2UgaW1wbGVtZW50YXRpb24gb2YgYF8uc2V0YC5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgb2JqZWN0IHRvIG1vZGlmeS5cbiAqIEBwYXJhbSB7QXJyYXl8c3RyaW5nfSBwYXRoIFRoZSBwYXRoIG9mIHRoZSBwcm9wZXJ0eSB0byBzZXQuXG4gKiBAcGFyYW0geyp9IHZhbHVlIFRoZSB2YWx1ZSB0byBzZXQuXG4gKiBAcGFyYW0ge0Z1bmN0aW9ufSBbY3VzdG9taXplcl0gVGhlIGZ1bmN0aW9uIHRvIGN1c3RvbWl6ZSBwYXRoIGNyZWF0aW9uLlxuICogQHJldHVybnMge09iamVjdH0gUmV0dXJucyBgb2JqZWN0YC5cbiAqL1xuZnVuY3Rpb24gYmFzZVNldChvYmplY3QsIHBhdGgsIHZhbHVlLCBjdXN0b21pemVyKSB7XG4gIGlmICghaXNPYmplY3Qob2JqZWN0KSkge1xuICAgIHJldHVybiBvYmplY3Q7XG4gIH1cbiAgcGF0aCA9IGNhc3RQYXRoKHBhdGgsIG9iamVjdCk7XG5cbiAgdmFyIGluZGV4ID0gLTEsXG4gICAgICBsZW5ndGggPSBwYXRoLmxlbmd0aCxcbiAgICAgIGxhc3RJbmRleCA9IGxlbmd0aCAtIDEsXG4gICAgICBuZXN0ZWQgPSBvYmplY3Q7XG5cbiAgd2hpbGUgKG5lc3RlZCAhPSBudWxsICYmICsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIga2V5ID0gdG9LZXkocGF0aFtpbmRleF0pLFxuICAgICAgICBuZXdWYWx1ZSA9IHZhbHVlO1xuXG4gICAgaWYgKGtleSA9PT0gJ19fcHJvdG9fXycgfHwga2V5ID09PSAnY29uc3RydWN0b3InIHx8IGtleSA9PT0gJ3Byb3RvdHlwZScpIHtcbiAgICAgIHJldHVybiBvYmplY3Q7XG4gICAgfVxuXG4gICAgaWYgKGluZGV4ICE9IGxhc3RJbmRleCkge1xuICAgICAgdmFyIG9ialZhbHVlID0gbmVzdGVkW2tleV07XG4gICAgICBuZXdWYWx1ZSA9IGN1c3RvbWl6ZXIgPyBjdXN0b21pemVyKG9ialZhbHVlLCBrZXksIG5lc3RlZCkgOiB1bmRlZmluZWQ7XG4gICAgICBpZiAobmV3VmFsdWUgPT09IHVuZGVmaW5lZCkge1xuICAgICAgICBuZXdWYWx1ZSA9IGlzT2JqZWN0KG9ialZhbHVlKVxuICAgICAgICAgID8gb2JqVmFsdWVcbiAgICAgICAgICA6IChpc0luZGV4KHBhdGhbaW5kZXggKyAxXSkgPyBbXSA6IHt9KTtcbiAgICAgIH1cbiAgICB9XG4gICAgYXNzaWduVmFsdWUobmVzdGVkLCBrZXksIG5ld1ZhbHVlKTtcbiAgICBuZXN0ZWQgPSBuZXN0ZWRba2V5XTtcbiAgfVxuICByZXR1cm4gb2JqZWN0O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VTZXQ7XG4iXSwibWFwcGluZ3MiOiJBQUFBLElBQUlBLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGdCQUFnQixDQUFDO0VBQ3ZDQyxRQUFRLEdBQUdELE9BQU8sQ0FBQyxhQUFhLENBQUM7RUFDakNFLE9BQU8sR0FBR0YsT0FBTyxDQUFDLFlBQVksQ0FBQztFQUMvQkcsUUFBUSxHQUFHSCxPQUFPLENBQUMsWUFBWSxDQUFDO0VBQ2hDSSxLQUFLLEdBQUdKLE9BQU8sQ0FBQyxVQUFVLENBQUM7O0FBRS9CO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU0ssT0FBT0EsQ0FBQ0MsTUFBTSxFQUFFQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsVUFBVSxFQUFFO0VBQ2hELElBQUksQ0FBQ04sUUFBUSxDQUFDRyxNQUFNLENBQUMsRUFBRTtJQUNyQixPQUFPQSxNQUFNO0VBQ2Y7RUFDQUMsSUFBSSxHQUFHTixRQUFRLENBQUNNLElBQUksRUFBRUQsTUFBTSxDQUFDO0VBRTdCLElBQUlJLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDVkMsTUFBTSxHQUFHSixJQUFJLENBQUNJLE1BQU07SUFDcEJDLFNBQVMsR0FBR0QsTUFBTSxHQUFHLENBQUM7SUFDdEJFLE1BQU0sR0FBR1AsTUFBTTtFQUVuQixPQUFPTyxNQUFNLElBQUksSUFBSSxJQUFJLEVBQUVILEtBQUssR0FBR0MsTUFBTSxFQUFFO0lBQ3pDLElBQUlHLEdBQUcsR0FBR1YsS0FBSyxDQUFDRyxJQUFJLENBQUNHLEtBQUssQ0FBQyxDQUFDO01BQ3hCSyxRQUFRLEdBQUdQLEtBQUs7SUFFcEIsSUFBSU0sR0FBRyxLQUFLLFdBQVcsSUFBSUEsR0FBRyxLQUFLLGFBQWEsSUFBSUEsR0FBRyxLQUFLLFdBQVcsRUFBRTtNQUN2RSxPQUFPUixNQUFNO0lBQ2Y7SUFFQSxJQUFJSSxLQUFLLElBQUlFLFNBQVMsRUFBRTtNQUN0QixJQUFJSSxRQUFRLEdBQUdILE1BQU0sQ0FBQ0MsR0FBRyxDQUFDO01BQzFCQyxRQUFRLEdBQUdOLFVBQVUsR0FBR0EsVUFBVSxDQUFDTyxRQUFRLEVBQUVGLEdBQUcsRUFBRUQsTUFBTSxDQUFDLEdBQUdJLFNBQVM7TUFDckUsSUFBSUYsUUFBUSxLQUFLRSxTQUFTLEVBQUU7UUFDMUJGLFFBQVEsR0FBR1osUUFBUSxDQUFDYSxRQUFRLENBQUMsR0FDekJBLFFBQVEsR0FDUGQsT0FBTyxDQUFDSyxJQUFJLENBQUNHLEtBQUssR0FBRyxDQUFDLENBQUMsQ0FBQyxHQUFHLEVBQUUsR0FBRyxDQUFDLENBQUU7TUFDMUM7SUFDRjtJQUNBWCxXQUFXLENBQUNjLE1BQU0sRUFBRUMsR0FBRyxFQUFFQyxRQUFRLENBQUM7SUFDbENGLE1BQU0sR0FBR0EsTUFBTSxDQUFDQyxHQUFHLENBQUM7RUFDdEI7RUFDQSxPQUFPUixNQUFNO0FBQ2Y7QUFFQVksTUFBTSxDQUFDQyxPQUFPLEdBQUdkLE9BQU8iLCJpZ25vcmVMaXN0IjpbXX0=