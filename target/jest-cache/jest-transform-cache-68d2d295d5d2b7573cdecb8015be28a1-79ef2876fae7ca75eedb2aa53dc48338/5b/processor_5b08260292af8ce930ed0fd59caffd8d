789f515fb8a947e947fe98ba287f26d2
'use strict';

let NoWorkResult = require('./no-work-result');
let LazyResult = require('./lazy-result');
let Document = require('./document');
let Root = require('./root');
class Processor {
  constructor(plugins = []) {
    this.version = '8.4.38';
    this.plugins = this.normalize(plugins);
  }
  normalize(plugins) {
    let normalized = [];
    for (let i of plugins) {
      if (i.postcss === true) {
        i = i();
      } else if (i.postcss) {
        i = i.postcss;
      }
      if (typeof i === 'object' && Array.isArray(i.plugins)) {
        normalized = normalized.concat(i.plugins);
      } else if (typeof i === 'object' && i.postcssPlugin) {
        normalized.push(i);
      } else if (typeof i === 'function') {
        normalized.push(i);
      } else if (typeof i === 'object' && (i.parse || i.stringify)) {
        if (process.env.NODE_ENV !== 'production') {
          throw new Error('PostCSS syntaxes cannot be used as plugins. Instead, please use ' + 'one of the syntax/parser/stringifier options as outlined ' + 'in your PostCSS runner documentation.');
        }
      } else {
        throw new Error(i + ' is not a PostCSS plugin');
      }
    }
    return normalized;
  }
  process(css, opts = {}) {
    if (!this.plugins.length && !opts.parser && !opts.stringifier && !opts.syntax) {
      return new NoWorkResult(this, css, opts);
    } else {
      return new LazyResult(this, css, opts);
    }
  }
  use(plugin) {
    this.plugins = this.plugins.concat(this.normalize([plugin]));
    return this;
  }
}
module.exports = Processor;
Processor.default = Processor;
Root.registerProcessor(Processor);
Document.registerProcessor(Processor);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJOb1dvcmtSZXN1bHQiLCJyZXF1aXJlIiwiTGF6eVJlc3VsdCIsIkRvY3VtZW50IiwiUm9vdCIsIlByb2Nlc3NvciIsImNvbnN0cnVjdG9yIiwicGx1Z2lucyIsInZlcnNpb24iLCJub3JtYWxpemUiLCJub3JtYWxpemVkIiwiaSIsInBvc3Rjc3MiLCJBcnJheSIsImlzQXJyYXkiLCJjb25jYXQiLCJwb3N0Y3NzUGx1Z2luIiwicHVzaCIsInBhcnNlIiwic3RyaW5naWZ5IiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwiRXJyb3IiLCJjc3MiLCJvcHRzIiwibGVuZ3RoIiwicGFyc2VyIiwic3RyaW5naWZpZXIiLCJzeW50YXgiLCJ1c2UiLCJwbHVnaW4iLCJtb2R1bGUiLCJleHBvcnRzIiwiZGVmYXVsdCIsInJlZ2lzdGVyUHJvY2Vzc29yIl0sInNvdXJjZXMiOlsicHJvY2Vzc29yLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIid1c2Ugc3RyaWN0J1xuXG5sZXQgTm9Xb3JrUmVzdWx0ID0gcmVxdWlyZSgnLi9uby13b3JrLXJlc3VsdCcpXG5sZXQgTGF6eVJlc3VsdCA9IHJlcXVpcmUoJy4vbGF6eS1yZXN1bHQnKVxubGV0IERvY3VtZW50ID0gcmVxdWlyZSgnLi9kb2N1bWVudCcpXG5sZXQgUm9vdCA9IHJlcXVpcmUoJy4vcm9vdCcpXG5cbmNsYXNzIFByb2Nlc3NvciB7XG4gIGNvbnN0cnVjdG9yKHBsdWdpbnMgPSBbXSkge1xuICAgIHRoaXMudmVyc2lvbiA9ICc4LjQuMzgnXG4gICAgdGhpcy5wbHVnaW5zID0gdGhpcy5ub3JtYWxpemUocGx1Z2lucylcbiAgfVxuXG4gIG5vcm1hbGl6ZShwbHVnaW5zKSB7XG4gICAgbGV0IG5vcm1hbGl6ZWQgPSBbXVxuICAgIGZvciAobGV0IGkgb2YgcGx1Z2lucykge1xuICAgICAgaWYgKGkucG9zdGNzcyA9PT0gdHJ1ZSkge1xuICAgICAgICBpID0gaSgpXG4gICAgICB9IGVsc2UgaWYgKGkucG9zdGNzcykge1xuICAgICAgICBpID0gaS5wb3N0Y3NzXG4gICAgICB9XG5cbiAgICAgIGlmICh0eXBlb2YgaSA9PT0gJ29iamVjdCcgJiYgQXJyYXkuaXNBcnJheShpLnBsdWdpbnMpKSB7XG4gICAgICAgIG5vcm1hbGl6ZWQgPSBub3JtYWxpemVkLmNvbmNhdChpLnBsdWdpbnMpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpID09PSAnb2JqZWN0JyAmJiBpLnBvc3Rjc3NQbHVnaW4pIHtcbiAgICAgICAgbm9ybWFsaXplZC5wdXNoKGkpXG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIG5vcm1hbGl6ZWQucHVzaChpKVxuICAgICAgfSBlbHNlIGlmICh0eXBlb2YgaSA9PT0gJ29iamVjdCcgJiYgKGkucGFyc2UgfHwgaS5zdHJpbmdpZnkpKSB7XG4gICAgICAgIGlmIChwcm9jZXNzLmVudi5OT0RFX0VOViAhPT0gJ3Byb2R1Y3Rpb24nKSB7XG4gICAgICAgICAgdGhyb3cgbmV3IEVycm9yKFxuICAgICAgICAgICAgJ1Bvc3RDU1Mgc3ludGF4ZXMgY2Fubm90IGJlIHVzZWQgYXMgcGx1Z2lucy4gSW5zdGVhZCwgcGxlYXNlIHVzZSAnICtcbiAgICAgICAgICAgICAgJ29uZSBvZiB0aGUgc3ludGF4L3BhcnNlci9zdHJpbmdpZmllciBvcHRpb25zIGFzIG91dGxpbmVkICcgK1xuICAgICAgICAgICAgICAnaW4geW91ciBQb3N0Q1NTIHJ1bm5lciBkb2N1bWVudGF0aW9uLidcbiAgICAgICAgICApXG4gICAgICAgIH1cbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRocm93IG5ldyBFcnJvcihpICsgJyBpcyBub3QgYSBQb3N0Q1NTIHBsdWdpbicpXG4gICAgICB9XG4gICAgfVxuICAgIHJldHVybiBub3JtYWxpemVkXG4gIH1cblxuICBwcm9jZXNzKGNzcywgb3B0cyA9IHt9KSB7XG4gICAgaWYgKFxuICAgICAgIXRoaXMucGx1Z2lucy5sZW5ndGggJiZcbiAgICAgICFvcHRzLnBhcnNlciAmJlxuICAgICAgIW9wdHMuc3RyaW5naWZpZXIgJiZcbiAgICAgICFvcHRzLnN5bnRheFxuICAgICkge1xuICAgICAgcmV0dXJuIG5ldyBOb1dvcmtSZXN1bHQodGhpcywgY3NzLCBvcHRzKVxuICAgIH0gZWxzZSB7XG4gICAgICByZXR1cm4gbmV3IExhenlSZXN1bHQodGhpcywgY3NzLCBvcHRzKVxuICAgIH1cbiAgfVxuXG4gIHVzZShwbHVnaW4pIHtcbiAgICB0aGlzLnBsdWdpbnMgPSB0aGlzLnBsdWdpbnMuY29uY2F0KHRoaXMubm9ybWFsaXplKFtwbHVnaW5dKSlcbiAgICByZXR1cm4gdGhpc1xuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gUHJvY2Vzc29yXG5Qcm9jZXNzb3IuZGVmYXVsdCA9IFByb2Nlc3NvclxuXG5Sb290LnJlZ2lzdGVyUHJvY2Vzc29yKFByb2Nlc3NvcilcbkRvY3VtZW50LnJlZ2lzdGVyUHJvY2Vzc29yKFByb2Nlc3NvcilcbiJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWixJQUFJQSxZQUFZLEdBQUdDLE9BQU8sQ0FBQyxrQkFBa0IsQ0FBQztBQUM5QyxJQUFJQyxVQUFVLEdBQUdELE9BQU8sQ0FBQyxlQUFlLENBQUM7QUFDekMsSUFBSUUsUUFBUSxHQUFHRixPQUFPLENBQUMsWUFBWSxDQUFDO0FBQ3BDLElBQUlHLElBQUksR0FBR0gsT0FBTyxDQUFDLFFBQVEsQ0FBQztBQUU1QixNQUFNSSxTQUFTLENBQUM7RUFDZEMsV0FBV0EsQ0FBQ0MsT0FBTyxHQUFHLEVBQUUsRUFBRTtJQUN4QixJQUFJLENBQUNDLE9BQU8sR0FBRyxRQUFRO0lBQ3ZCLElBQUksQ0FBQ0QsT0FBTyxHQUFHLElBQUksQ0FBQ0UsU0FBUyxDQUFDRixPQUFPLENBQUM7RUFDeEM7RUFFQUUsU0FBU0EsQ0FBQ0YsT0FBTyxFQUFFO0lBQ2pCLElBQUlHLFVBQVUsR0FBRyxFQUFFO0lBQ25CLEtBQUssSUFBSUMsQ0FBQyxJQUFJSixPQUFPLEVBQUU7TUFDckIsSUFBSUksQ0FBQyxDQUFDQyxPQUFPLEtBQUssSUFBSSxFQUFFO1FBQ3RCRCxDQUFDLEdBQUdBLENBQUMsQ0FBQyxDQUFDO01BQ1QsQ0FBQyxNQUFNLElBQUlBLENBQUMsQ0FBQ0MsT0FBTyxFQUFFO1FBQ3BCRCxDQUFDLEdBQUdBLENBQUMsQ0FBQ0MsT0FBTztNQUNmO01BRUEsSUFBSSxPQUFPRCxDQUFDLEtBQUssUUFBUSxJQUFJRSxLQUFLLENBQUNDLE9BQU8sQ0FBQ0gsQ0FBQyxDQUFDSixPQUFPLENBQUMsRUFBRTtRQUNyREcsVUFBVSxHQUFHQSxVQUFVLENBQUNLLE1BQU0sQ0FBQ0osQ0FBQyxDQUFDSixPQUFPLENBQUM7TUFDM0MsQ0FBQyxNQUFNLElBQUksT0FBT0ksQ0FBQyxLQUFLLFFBQVEsSUFBSUEsQ0FBQyxDQUFDSyxhQUFhLEVBQUU7UUFDbkROLFVBQVUsQ0FBQ08sSUFBSSxDQUFDTixDQUFDLENBQUM7TUFDcEIsQ0FBQyxNQUFNLElBQUksT0FBT0EsQ0FBQyxLQUFLLFVBQVUsRUFBRTtRQUNsQ0QsVUFBVSxDQUFDTyxJQUFJLENBQUNOLENBQUMsQ0FBQztNQUNwQixDQUFDLE1BQU0sSUFBSSxPQUFPQSxDQUFDLEtBQUssUUFBUSxLQUFLQSxDQUFDLENBQUNPLEtBQUssSUFBSVAsQ0FBQyxDQUFDUSxTQUFTLENBQUMsRUFBRTtRQUM1RCxJQUFJQyxPQUFPLENBQUNDLEdBQUcsQ0FBQ0MsUUFBUSxLQUFLLFlBQVksRUFBRTtVQUN6QyxNQUFNLElBQUlDLEtBQUssQ0FDYixrRUFBa0UsR0FDaEUsMkRBQTJELEdBQzNELHVDQUNKLENBQUM7UUFDSDtNQUNGLENBQUMsTUFBTTtRQUNMLE1BQU0sSUFBSUEsS0FBSyxDQUFDWixDQUFDLEdBQUcsMEJBQTBCLENBQUM7TUFDakQ7SUFDRjtJQUNBLE9BQU9ELFVBQVU7RUFDbkI7RUFFQVUsT0FBT0EsQ0FBQ0ksR0FBRyxFQUFFQyxJQUFJLEdBQUcsQ0FBQyxDQUFDLEVBQUU7SUFDdEIsSUFDRSxDQUFDLElBQUksQ0FBQ2xCLE9BQU8sQ0FBQ21CLE1BQU0sSUFDcEIsQ0FBQ0QsSUFBSSxDQUFDRSxNQUFNLElBQ1osQ0FBQ0YsSUFBSSxDQUFDRyxXQUFXLElBQ2pCLENBQUNILElBQUksQ0FBQ0ksTUFBTSxFQUNaO01BQ0EsT0FBTyxJQUFJN0IsWUFBWSxDQUFDLElBQUksRUFBRXdCLEdBQUcsRUFBRUMsSUFBSSxDQUFDO0lBQzFDLENBQUMsTUFBTTtNQUNMLE9BQU8sSUFBSXZCLFVBQVUsQ0FBQyxJQUFJLEVBQUVzQixHQUFHLEVBQUVDLElBQUksQ0FBQztJQUN4QztFQUNGO0VBRUFLLEdBQUdBLENBQUNDLE1BQU0sRUFBRTtJQUNWLElBQUksQ0FBQ3hCLE9BQU8sR0FBRyxJQUFJLENBQUNBLE9BQU8sQ0FBQ1EsTUFBTSxDQUFDLElBQUksQ0FBQ04sU0FBUyxDQUFDLENBQUNzQixNQUFNLENBQUMsQ0FBQyxDQUFDO0lBQzVELE9BQU8sSUFBSTtFQUNiO0FBQ0Y7QUFFQUMsTUFBTSxDQUFDQyxPQUFPLEdBQUc1QixTQUFTO0FBQzFCQSxTQUFTLENBQUM2QixPQUFPLEdBQUc3QixTQUFTO0FBRTdCRCxJQUFJLENBQUMrQixpQkFBaUIsQ0FBQzlCLFNBQVMsQ0FBQztBQUNqQ0YsUUFBUSxDQUFDZ0MsaUJBQWlCLENBQUM5QixTQUFTLENBQUMiLCJpZ25vcmVMaXN0IjpbXX0=