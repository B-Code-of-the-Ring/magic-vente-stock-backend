aa1846f4fa8be7fe8f4c5e789f985d7b
let argv = process.argv || [],
  env = process.env;
let isColorSupported = !("NO_COLOR" in env || argv.includes("--no-color")) && ("FORCE_COLOR" in env || argv.includes("--color") || process.platform === "win32" || require != null && require("tty").isatty(1) && env.TERM !== "dumb" || "CI" in env);
let formatter = (open, close, replace = open) => input => {
  let string = "" + input;
  let index = string.indexOf(close, open.length);
  return ~index ? open + replaceClose(string, close, replace, index) + close : open + string + close;
};
let replaceClose = (string, close, replace, index) => {
  let result = "";
  let cursor = 0;
  do {
    result += string.substring(cursor, index) + replace;
    cursor = index + close.length;
    index = string.indexOf(close, cursor);
  } while (~index);
  return result + string.substring(cursor);
};
let createColors = (enabled = isColorSupported) => {
  let init = enabled ? formatter : () => String;
  return {
    isColorSupported: enabled,
    reset: init("\x1b[0m", "\x1b[0m"),
    bold: init("\x1b[1m", "\x1b[22m", "\x1b[22m\x1b[1m"),
    dim: init("\x1b[2m", "\x1b[22m", "\x1b[22m\x1b[2m"),
    italic: init("\x1b[3m", "\x1b[23m"),
    underline: init("\x1b[4m", "\x1b[24m"),
    inverse: init("\x1b[7m", "\x1b[27m"),
    hidden: init("\x1b[8m", "\x1b[28m"),
    strikethrough: init("\x1b[9m", "\x1b[29m"),
    black: init("\x1b[30m", "\x1b[39m"),
    red: init("\x1b[31m", "\x1b[39m"),
    green: init("\x1b[32m", "\x1b[39m"),
    yellow: init("\x1b[33m", "\x1b[39m"),
    blue: init("\x1b[34m", "\x1b[39m"),
    magenta: init("\x1b[35m", "\x1b[39m"),
    cyan: init("\x1b[36m", "\x1b[39m"),
    white: init("\x1b[37m", "\x1b[39m"),
    gray: init("\x1b[90m", "\x1b[39m"),
    bgBlack: init("\x1b[40m", "\x1b[49m"),
    bgRed: init("\x1b[41m", "\x1b[49m"),
    bgGreen: init("\x1b[42m", "\x1b[49m"),
    bgYellow: init("\x1b[43m", "\x1b[49m"),
    bgBlue: init("\x1b[44m", "\x1b[49m"),
    bgMagenta: init("\x1b[45m", "\x1b[49m"),
    bgCyan: init("\x1b[46m", "\x1b[49m"),
    bgWhite: init("\x1b[47m", "\x1b[49m")
  };
};
module.exports = createColors();
module.exports.createColors = createColors;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJhcmd2IiwicHJvY2VzcyIsImVudiIsImlzQ29sb3JTdXBwb3J0ZWQiLCJpbmNsdWRlcyIsInBsYXRmb3JtIiwicmVxdWlyZSIsImlzYXR0eSIsIlRFUk0iLCJmb3JtYXR0ZXIiLCJvcGVuIiwiY2xvc2UiLCJyZXBsYWNlIiwiaW5wdXQiLCJzdHJpbmciLCJpbmRleCIsImluZGV4T2YiLCJsZW5ndGgiLCJyZXBsYWNlQ2xvc2UiLCJyZXN1bHQiLCJjdXJzb3IiLCJzdWJzdHJpbmciLCJjcmVhdGVDb2xvcnMiLCJlbmFibGVkIiwiaW5pdCIsIlN0cmluZyIsInJlc2V0IiwiYm9sZCIsImRpbSIsIml0YWxpYyIsInVuZGVybGluZSIsImludmVyc2UiLCJoaWRkZW4iLCJzdHJpa2V0aHJvdWdoIiwiYmxhY2siLCJyZWQiLCJncmVlbiIsInllbGxvdyIsImJsdWUiLCJtYWdlbnRhIiwiY3lhbiIsIndoaXRlIiwiZ3JheSIsImJnQmxhY2siLCJiZ1JlZCIsImJnR3JlZW4iLCJiZ1llbGxvdyIsImJnQmx1ZSIsImJnTWFnZW50YSIsImJnQ3lhbiIsImJnV2hpdGUiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsicGljb2NvbG9ycy5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJsZXQgYXJndiA9IHByb2Nlc3MuYXJndiB8fCBbXSxcblx0ZW52ID0gcHJvY2Vzcy5lbnZcbmxldCBpc0NvbG9yU3VwcG9ydGVkID1cblx0IShcIk5PX0NPTE9SXCIgaW4gZW52IHx8IGFyZ3YuaW5jbHVkZXMoXCItLW5vLWNvbG9yXCIpKSAmJlxuXHQoXCJGT1JDRV9DT0xPUlwiIGluIGVudiB8fFxuXHRcdGFyZ3YuaW5jbHVkZXMoXCItLWNvbG9yXCIpIHx8XG5cdFx0cHJvY2Vzcy5wbGF0Zm9ybSA9PT0gXCJ3aW4zMlwiIHx8XG5cdFx0KHJlcXVpcmUgIT0gbnVsbCAmJiByZXF1aXJlKFwidHR5XCIpLmlzYXR0eSgxKSAmJiBlbnYuVEVSTSAhPT0gXCJkdW1iXCIpIHx8XG5cdFx0XCJDSVwiIGluIGVudilcblxubGV0IGZvcm1hdHRlciA9XG5cdChvcGVuLCBjbG9zZSwgcmVwbGFjZSA9IG9wZW4pID0+XG5cdGlucHV0ID0+IHtcblx0XHRsZXQgc3RyaW5nID0gXCJcIiArIGlucHV0XG5cdFx0bGV0IGluZGV4ID0gc3RyaW5nLmluZGV4T2YoY2xvc2UsIG9wZW4ubGVuZ3RoKVxuXHRcdHJldHVybiB+aW5kZXhcblx0XHRcdD8gb3BlbiArIHJlcGxhY2VDbG9zZShzdHJpbmcsIGNsb3NlLCByZXBsYWNlLCBpbmRleCkgKyBjbG9zZVxuXHRcdFx0OiBvcGVuICsgc3RyaW5nICsgY2xvc2Vcblx0fVxuXG5sZXQgcmVwbGFjZUNsb3NlID0gKHN0cmluZywgY2xvc2UsIHJlcGxhY2UsIGluZGV4KSA9PiB7XG5cdGxldCByZXN1bHQgPSBcIlwiXG5cdGxldCBjdXJzb3IgPSAwXG5cdGRvIHtcblx0XHRyZXN1bHQgKz0gc3RyaW5nLnN1YnN0cmluZyhjdXJzb3IsIGluZGV4KSArIHJlcGxhY2Vcblx0XHRjdXJzb3IgPSBpbmRleCArIGNsb3NlLmxlbmd0aFxuXHRcdGluZGV4ID0gc3RyaW5nLmluZGV4T2YoY2xvc2UsIGN1cnNvcilcblx0fSB3aGlsZSAofmluZGV4KVxuXHRyZXR1cm4gcmVzdWx0ICsgc3RyaW5nLnN1YnN0cmluZyhjdXJzb3IpXG59XG5cbmxldCBjcmVhdGVDb2xvcnMgPSAoZW5hYmxlZCA9IGlzQ29sb3JTdXBwb3J0ZWQpID0+IHtcblx0bGV0IGluaXQgPSBlbmFibGVkID8gZm9ybWF0dGVyIDogKCkgPT4gU3RyaW5nXG5cdHJldHVybiB7XG5cdFx0aXNDb2xvclN1cHBvcnRlZDogZW5hYmxlZCxcblx0XHRyZXNldDogaW5pdChcIlxceDFiWzBtXCIsIFwiXFx4MWJbMG1cIiksXG5cdFx0Ym9sZDogaW5pdChcIlxceDFiWzFtXCIsIFwiXFx4MWJbMjJtXCIsIFwiXFx4MWJbMjJtXFx4MWJbMW1cIiksXG5cdFx0ZGltOiBpbml0KFwiXFx4MWJbMm1cIiwgXCJcXHgxYlsyMm1cIiwgXCJcXHgxYlsyMm1cXHgxYlsybVwiKSxcblx0XHRpdGFsaWM6IGluaXQoXCJcXHgxYlszbVwiLCBcIlxceDFiWzIzbVwiKSxcblx0XHR1bmRlcmxpbmU6IGluaXQoXCJcXHgxYls0bVwiLCBcIlxceDFiWzI0bVwiKSxcblx0XHRpbnZlcnNlOiBpbml0KFwiXFx4MWJbN21cIiwgXCJcXHgxYlsyN21cIiksXG5cdFx0aGlkZGVuOiBpbml0KFwiXFx4MWJbOG1cIiwgXCJcXHgxYlsyOG1cIiksXG5cdFx0c3RyaWtldGhyb3VnaDogaW5pdChcIlxceDFiWzltXCIsIFwiXFx4MWJbMjltXCIpLFxuXHRcdGJsYWNrOiBpbml0KFwiXFx4MWJbMzBtXCIsIFwiXFx4MWJbMzltXCIpLFxuXHRcdHJlZDogaW5pdChcIlxceDFiWzMxbVwiLCBcIlxceDFiWzM5bVwiKSxcblx0XHRncmVlbjogaW5pdChcIlxceDFiWzMybVwiLCBcIlxceDFiWzM5bVwiKSxcblx0XHR5ZWxsb3c6IGluaXQoXCJcXHgxYlszM21cIiwgXCJcXHgxYlszOW1cIiksXG5cdFx0Ymx1ZTogaW5pdChcIlxceDFiWzM0bVwiLCBcIlxceDFiWzM5bVwiKSxcblx0XHRtYWdlbnRhOiBpbml0KFwiXFx4MWJbMzVtXCIsIFwiXFx4MWJbMzltXCIpLFxuXHRcdGN5YW46IGluaXQoXCJcXHgxYlszNm1cIiwgXCJcXHgxYlszOW1cIiksXG5cdFx0d2hpdGU6IGluaXQoXCJcXHgxYlszN21cIiwgXCJcXHgxYlszOW1cIiksXG5cdFx0Z3JheTogaW5pdChcIlxceDFiWzkwbVwiLCBcIlxceDFiWzM5bVwiKSxcblx0XHRiZ0JsYWNrOiBpbml0KFwiXFx4MWJbNDBtXCIsIFwiXFx4MWJbNDltXCIpLFxuXHRcdGJnUmVkOiBpbml0KFwiXFx4MWJbNDFtXCIsIFwiXFx4MWJbNDltXCIpLFxuXHRcdGJnR3JlZW46IGluaXQoXCJcXHgxYls0Mm1cIiwgXCJcXHgxYls0OW1cIiksXG5cdFx0YmdZZWxsb3c6IGluaXQoXCJcXHgxYls0M21cIiwgXCJcXHgxYls0OW1cIiksXG5cdFx0YmdCbHVlOiBpbml0KFwiXFx4MWJbNDRtXCIsIFwiXFx4MWJbNDltXCIpLFxuXHRcdGJnTWFnZW50YTogaW5pdChcIlxceDFiWzQ1bVwiLCBcIlxceDFiWzQ5bVwiKSxcblx0XHRiZ0N5YW46IGluaXQoXCJcXHgxYls0Nm1cIiwgXCJcXHgxYls0OW1cIiksXG5cdFx0YmdXaGl0ZTogaW5pdChcIlxceDFiWzQ3bVwiLCBcIlxceDFiWzQ5bVwiKSxcblx0fVxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGNyZWF0ZUNvbG9ycygpXG5tb2R1bGUuZXhwb3J0cy5jcmVhdGVDb2xvcnMgPSBjcmVhdGVDb2xvcnNcbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsSUFBSSxHQUFHQyxPQUFPLENBQUNELElBQUksSUFBSSxFQUFFO0VBQzVCRSxHQUFHLEdBQUdELE9BQU8sQ0FBQ0MsR0FBRztBQUNsQixJQUFJQyxnQkFBZ0IsR0FDbkIsRUFBRSxVQUFVLElBQUlELEdBQUcsSUFBSUYsSUFBSSxDQUFDSSxRQUFRLENBQUMsWUFBWSxDQUFDLENBQUMsS0FDbEQsYUFBYSxJQUFJRixHQUFHLElBQ3BCRixJQUFJLENBQUNJLFFBQVEsQ0FBQyxTQUFTLENBQUMsSUFDeEJILE9BQU8sQ0FBQ0ksUUFBUSxLQUFLLE9BQU8sSUFDM0JDLE9BQU8sSUFBSSxJQUFJLElBQUlBLE9BQU8sQ0FBQyxLQUFLLENBQUMsQ0FBQ0MsTUFBTSxDQUFDLENBQUMsQ0FBQyxJQUFJTCxHQUFHLENBQUNNLElBQUksS0FBSyxNQUFPLElBQ3BFLElBQUksSUFBSU4sR0FBRyxDQUFDO0FBRWQsSUFBSU8sU0FBUyxHQUNaQSxDQUFDQyxJQUFJLEVBQUVDLEtBQUssRUFBRUMsT0FBTyxHQUFHRixJQUFJLEtBQzVCRyxLQUFLLElBQUk7RUFDUixJQUFJQyxNQUFNLEdBQUcsRUFBRSxHQUFHRCxLQUFLO0VBQ3ZCLElBQUlFLEtBQUssR0FBR0QsTUFBTSxDQUFDRSxPQUFPLENBQUNMLEtBQUssRUFBRUQsSUFBSSxDQUFDTyxNQUFN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