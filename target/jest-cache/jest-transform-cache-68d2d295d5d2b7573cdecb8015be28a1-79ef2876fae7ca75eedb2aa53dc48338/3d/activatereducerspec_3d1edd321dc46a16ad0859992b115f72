c2f33090fe04cf73ed5af7f8f516f312
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const toolkit_1 = require("@reduxjs/toolkit");
const activate_reducer_1 = tslib_1.__importStar(require("./activate.reducer"));
describe('Activate reducer tests', () => {
    it('should return the initial state', () => {
        expect((0, activate_reducer_1.default)(undefined, { type: '' })).toMatchObject({
            activationSuccess: false,
            activationFailure: false,
        });
    });
    it('should reset', () => {
        expect((0, activate_reducer_1.default)({ activationSuccess: true, activationFailure: false }, activate_reducer_1.reset)).toMatchObject({
            activationSuccess: false,
            activationFailure: false,
        });
    });
    it('should detect a success', () => {
        expect((0, activate_reducer_1.default)(undefined, { type: activate_reducer_1.activateAction.fulfilled.type })).toMatchObject({
            activationSuccess: true,
            activationFailure: false,
        });
    });
    it('should return the same state on request', () => {
        expect((0, activate_reducer_1.default)(undefined, { type: activate_reducer_1.activateAction.pending.type })).toMatchObject({
            activationSuccess: false,
            activationFailure: false,
        });
    });
    it('should detect a failure', () => {
        expect((0, activate_reducer_1.default)(undefined, { type: activate_reducer_1.activateAction.rejected.type })).toMatchObject({
            activationSuccess: false,
            activationFailure: true,
        });
    });
    it('should reset the state', () => {
        const initialState = {
            activationSuccess: false,
            activationFailure: false,
        };
        expect((0, activate_reducer_1.default)({ activationSuccess: true, activationFailure: true }, activate_reducer_1.reset)).toEqual(Object.assign({}, initialState));
    });
    describe('Actions', () => {
        let store;
        const resolvedObject = { value: 'whatever' };
        const getState = jest.fn();
        const dispatch = jest.fn();
        const extra = {};
        beforeEach(() => {
            store = (0, toolkit_1.configureStore)({
                reducer: (state = [], action) => [...state, action],
            });
            axios_1.default.get = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
        });
        it('dispatches ACTIVATE_ACCOUNT_PENDING and ACTIVATE_ACCOUNT_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = '';
            const result = yield (0, activate_reducer_1.activateAction)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(activate_reducer_1.activateAction.fulfilled.match(result)).toBe(true);
            expect(result.payload).toBe(resolvedObject);
        }));
        it('dispatches RESET actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield store.dispatch((0, activate_reducer_1.reset)());
            expect(store.getState()).toEqual([expect.any(Object), expect.objectContaining((0, activate_reducer_1.reset)())]);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3BjY28wNTYvRG9jdW1lbnRzL0NvdXJzIElUVS9yaWJvdWNob24vbWFnaWN2ZW50ZXN0b2NrL3NyYy9tYWluL3dlYmFwcC9hcHAvbW9kdWxlcy9hY2NvdW50L2FjdGl2YXRlL2FjdGl2YXRlLnJlZHVjZXIuc3BlYy50cyIsIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBMEI7QUFDMUIsMERBQTBCO0FBQzFCLDhDQUFrRDtBQUVsRCwrRUFBcUU7QUFFckUsUUFBUSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtJQUN0QyxFQUFFLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO1FBQ3pDLE1BQU0sQ0FBQyxJQUFBLDBCQUFRLEVBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLEVBQUUsRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDdEQsaUJBQWlCLEVBQUUsS0FBSztZQUN4QixpQkFBaUIsRUFBRSxLQUFLO1NBQ3pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLGNBQWMsRUFBRSxHQUFHLEVBQUU7UUFDdEIsTUFBTSxDQUFDLElBQUEsMEJBQVEsRUFBQyxFQUFFLGlCQUFpQixFQUFFLElBQUksRUFBRSxpQkFBaUIsRUFBRSxLQUFLLEVBQUUsRUFBRSx3QkFBSyxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDM0YsaUJBQWlCLEVBQUUsS0FBSztZQUN4QixpQkFBaUIsRUFBRSxLQUFLO1NBQ3pCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHlCQUF5QixFQUFFLEdBQUcsRUFBRTtRQUNqQyxNQUFNLENBQUMsSUFBQSwwQkFBUSxFQUFDLFNBQVMsRUFBRSxFQUFFLElBQUksRUFBRSxpQ0FBYyxDQUFDLFNBQVMsQ0FBQyxJQUFJLEVBQUUsQ0FBQyxDQUFDLENBQUMsYUFBYSxDQUFDO1lBQ2pGLGlCQUFpQixFQUFFLElBQUk7WUFDdkIsaUJBQWlCLEVBQUUsS0FBSztTQUN6QixDQUFDLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyx5Q0FBeUMsRUFBRSxHQUFHLEVBQUU7UUFDakQsTUFBTSxDQUFDLElBQUEsMEJBQVEsRUFBQyxTQUFTLEVBQUUsRUFBRSxJQUFJLEVBQUUsaUNBQWMsQ0FBQyxPQUFPLENBQUMsSUFBSSxFQUFFLENBQUMsQ0FBQyxDQUFDLGFBQWEsQ0FBQztZQUMvRSxpQkFBaUIsRUFBRSxLQUFLO1lBQ3hCLGlCQUFpQixFQUFFLEtBQUs7U0FDekIsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7SUFFSCxFQUFFLENBQUMseUJBQXlCLEVBQUUsR0FBRyxFQUFFO1FBQ2pDLE1BQU0sQ0FBQyxJQUFBLDBCQUFRLEVBQUMsU0FBUyxFQUFFLEVBQUUsSUFBSSxFQUFFLGlDQUFjLENBQUMsUUFBUSxDQUFDLElBQUksRUFBRSxDQUFDLENBQUMsQ0FBQyxhQUFhLENBQUM7WUFDaEYsaUJBQWlCLEVBQUUsS0FBSztZQUN4QixpQkFBaUIsRUFBRSxJQUFJO1NBQ3hCLENBQUMsQ0FBQztJQUNMLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHdCQUF3QixFQUFFLEdBQUcsRUFBRTtRQUNoQyxNQUFNLFlBQVksR0FBRztZQUNuQixpQkFBaUIsRUFBRSxLQUFLO1lBQ3hCLGlCQUFpQixFQUFFLEtBQUs7U0FDekIsQ0FBQztRQUNGLE1BQU0sQ0FBQyxJQUFBLDBCQUFRLEVBQUMsRUFBRSxpQkFBaUIsRUFBRSxJQUFJLEVBQUUsaUJBQWlCLEVBQUUsSUFBSSxFQUFFLEVBQUUsd0JBQUssQ0FBQyxDQUFDLENBQUMsT0FBTyxtQkFDaEYsWUFBWSxFQUNmLENBQUM7SUFDTCxDQUFDLENBQUMsQ0FBQztJQUVILFFBQVEsQ0FBQyxTQUFTLEVBQUUsR0FBRyxFQUFFO1FBQ3ZCLElBQUksS0FBSyxDQUFDO1FBRVYsTUFBTSxjQUFjLEdBQUcsRUFBRSxLQUFLLEVBQUUsVUFBVSxFQUFFLENBQUM7UUFDN0MsTUFBTSxRQUFRLEdBQUcsSUFBSSxDQUFDLEVBQUUsRUFBRSxDQUFDO1FBQzNCLE1BQU0sUUFBUSxHQUFHLElBQUksQ0FBQyxFQUFFLEVBQUUsQ0FBQztRQUMzQixNQUFNLEtBQUssR0FBRyxFQUFFLENBQUM7UUFDakIsVUFBVSxDQUFDLEdBQUcsRUFBRTtZQUNkLEtBQUssR0FBRyxJQUFBLHdCQUFjLEVBQUM7Z0JBQ3JCLE9BQU8sRUFBRSxDQUFDLEtBQUssR0FBRyxFQUFFLEVBQUUsTUFBTSxFQUFFLEVBQUUsQ0FBQyxDQUFDLEdBQUcsS0FBSyxFQUFFLE1BQU0sQ0FBQzthQUNwRCxDQUFDLENBQUM7WUFDSCxlQUFLLENBQUMsR0FBRyxHQUFHLGVBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQyxPQUFPLENBQUMsT0FBTyxDQUFDLE9BQU8sQ0FBQyxjQUFjLENBQUMsQ0FBQyxDQUFDO1FBQ3BFLENBQUMsQ0FBQyxDQUFDO1FBRUgsRUFBRSxDQUFDLDRFQUE0RSxFQUFFLEdBQVMsRUFBRTtZQUMxRixNQUFNLEdBQUcsR0FBRyxFQUFFLENBQUM7WUFFZixNQUFNLE1BQU0sR0FBRyxNQUFNLElBQUEsaUNBQWMsRUFBQyxHQUFHLENBQUMsQ0FBQyxRQUFRLEVBQUUsUUFBUSxFQUFFLEtBQUssQ0FBQyxDQUFDO1lBRXBFLE1BQU0sYUFBYSxHQUFHLFFBQVEsQ0FBQyxJQUFJLENBQUMsS0FBSyxDQUFDLENBQUMsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO1lBQ2hELE1BQU0sQ0FBQyxhQUFhLENBQUMsSUFBSSxDQUFDLGFBQWEsQ0FBQyxDQUFDLElBQUksQ0FBQyxTQUFTLENBQUMsQ0FBQztZQUN6RCxNQUFNLENBQUMsaUNBQWMsQ0FBQyxTQUFTLENBQUMsS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQyxDQUFDO1lBQzFELE1BQU0sQ0FBQyxNQUFNLENBQUMsT0FBTyxDQUFDLENBQUMsSUFBSSxDQUFDLGNBQWMsQ0FBQyxDQUFDO1FBQzlDLENBQUMsQ0FBQSxDQUFDLENBQUM7UUFDSCxFQUFFLENBQUMsMEJBQTBCLEVBQUUsR0FBUyxFQUFFO1lBQ3hDLE1BQU0sS0FBSyxDQUFDLFFBQVEsQ0FBQyxJQUFBLHdCQUFLLEdBQUUsQ0FBQyxDQUFDO1lBQzlCLE1BQU0sQ0FBQyxLQUFLLENBQUMsUUFBUSxFQUFFLENBQUMsQ0FBQyxPQUFPLENBQUMsQ0FBQyxNQUFNLENBQUMsR0FBRyxDQUFDLE1BQU0sQ0FBQyxFQUFFLE1BQU0sQ0FBQyxnQkFBZ0IsQ0FBQyxJQUFBLHdCQUFLLEdBQUUsQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUMzRixDQUFDLENBQUEsQ0FBQyxDQUFDO0lBQ0wsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvcGNjbzA1Ni9Eb2N1bWVudHMvQ291cnMgSVRVL3JpYm91Y2hvbi9tYWdpY3ZlbnRlc3RvY2svc3JjL21haW4vd2ViYXBwL2FwcC9tb2R1bGVzL2FjY291bnQvYWN0aXZhdGUvYWN0aXZhdGUucmVkdWNlci5zcGVjLnRzIl0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBheGlvcyBmcm9tICdheGlvcyc7XG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuaW1wb3J0IHsgY29uZmlndXJlU3RvcmUgfSBmcm9tICdAcmVkdXhqcy90b29sa2l0JztcblxuaW1wb3J0IGFjdGl2YXRlLCB7IGFjdGl2YXRlQWN0aW9uLCByZXNldCB9IGZyb20gJy4vYWN0aXZhdGUucmVkdWNlcic7XG5cbmRlc2NyaWJlKCdBY3RpdmF0ZSByZWR1Y2VyIHRlc3RzJywgKCkgPT4ge1xuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgaW5pdGlhbCBzdGF0ZScsICgpID0+IHtcbiAgICBleHBlY3QoYWN0aXZhdGUodW5kZWZpbmVkLCB7IHR5cGU6ICcnIH0pKS50b01hdGNoT2JqZWN0KHtcbiAgICAgIGFjdGl2YXRpb25TdWNjZXNzOiBmYWxzZSxcbiAgICAgIGFjdGl2YXRpb25GYWlsdXJlOiBmYWxzZSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXNldCcsICgpID0+IHtcbiAgICBleHBlY3QoYWN0aXZhdGUoeyBhY3RpdmF0aW9uU3VjY2VzczogdHJ1ZSwgYWN0aXZhdGlvbkZhaWx1cmU6IGZhbHNlIH0sIHJlc2V0KSkudG9NYXRjaE9iamVjdCh7XG4gICAgICBhY3RpdmF0aW9uU3VjY2VzczogZmFsc2UsXG4gICAgICBhY3RpdmF0aW9uRmFpbHVyZTogZmFsc2UsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgZGV0ZWN0IGEgc3VjY2VzcycsICgpID0+IHtcbiAgICBleHBlY3QoYWN0aXZhdGUodW5kZWZpbmVkLCB7IHR5cGU6IGFjdGl2YXRlQWN0aW9uLmZ1bGZpbGxlZC50eXBlIH0pKS50b01hdGNoT2JqZWN0KHtcbiAgICAgIGFjdGl2YXRpb25TdWNjZXNzOiB0cnVlLFxuICAgICAgYWN0aXZhdGlvbkZhaWx1cmU6IGZhbHNlLFxuICAgIH0pO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHJldHVybiB0aGUgc2FtZSBzdGF0ZSBvbiByZXF1ZXN0JywgKCkgPT4ge1xuICAgIGV4cGVjdChhY3RpdmF0ZSh1bmRlZmluZWQsIHsgdHlwZTogYWN0aXZhdGVBY3Rpb24ucGVuZGluZy50eXBlIH0pKS50b01hdGNoT2JqZWN0KHtcbiAgICAgIGFjdGl2YXRpb25TdWNjZXNzOiBmYWxzZSxcbiAgICAgIGFjdGl2YXRpb25GYWlsdXJlOiBmYWxzZSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCBkZXRlY3QgYSBmYWlsdXJlJywgKCkgPT4ge1xuICAgIGV4cGVjdChhY3RpdmF0ZSh1bmRlZmluZWQsIHsgdHlwZTogYWN0aXZhdGVBY3Rpb24ucmVqZWN0ZWQudHlwZSB9KSkudG9NYXRjaE9iamVjdCh7XG4gICAgICBhY3RpdmF0aW9uU3VjY2VzczogZmFsc2UsXG4gICAgICBhY3RpdmF0aW9uRmFpbHVyZTogdHJ1ZSxcbiAgICB9KTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCByZXNldCB0aGUgc3RhdGUnLCAoKSA9PiB7XG4gICAgY29uc3QgaW5pdGlhbFN0YXRlID0ge1xuICAgICAgYWN0aXZhdGlvblN1Y2Nlc3M6IGZhbHNlLFxuICAgICAgYWN0aXZhdGlvbkZhaWx1cmU6IGZhbHNlLFxuICAgIH07XG4gICAgZXhwZWN0KGFjdGl2YXRlKHsgYWN0aXZhdGlvblN1Y2Nlc3M6IHRydWUsIGFjdGl2YXRpb25GYWlsdXJlOiB0cnVlIH0sIHJlc2V0KSkudG9FcXVhbCh7XG4gICAgICAuLi5pbml0aWFsU3RhdGUsXG4gICAgfSk7XG4gIH0pO1xuXG4gIGRlc2NyaWJlKCdBY3Rpb25zJywgKCkgPT4ge1xuICAgIGxldCBzdG9yZTtcblxuICAgIGNvbnN0IHJlc29sdmVkT2JqZWN0ID0geyB2YWx1ZTogJ3doYXRldmVyJyB9O1xuICAgIGNvbnN0IGdldFN0YXRlID0gamVzdC5mbigpO1xuICAgIGNvbnN0IGRpc3BhdGNoID0gamVzdC5mbigpO1xuICAgIGNvbnN0IGV4dHJhID0ge307XG4gICAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgICBzdG9yZSA9IGNvbmZpZ3VyZVN0b3JlKHtcbiAgICAgICAgcmVkdWNlcjogKHN0YXRlID0gW10sIGFjdGlvbikgPT4gWy4uLnN0YXRlLCBhY3Rpb25dLFxuICAgICAgfSk7XG4gICAgICBheGlvcy5nZXQgPSBzaW5vbi5zdHViKCkucmV0dXJucyhQcm9taXNlLnJlc29sdmUocmVzb2x2ZWRPYmplY3QpKTtcbiAgICB9KTtcblxuICAgIGl0KCdkaXNwYXRjaGVzIEFDVElWQVRFX0FDQ09VTlRfUEVORElORyBhbmQgQUNUSVZBVEVfQUNDT1VOVF9GVUxGSUxMRUQgYWN0aW9ucycsIGFzeW5jICgpID0+IHtcbiAgICAgIGNvbnN0IGFyZyA9ICcnO1xuXG4gICAgICBjb25zdCByZXN1bHQgPSBhd2FpdCBhY3RpdmF0ZUFjdGlvbihhcmcpKGRpc3BhdGNoLCBnZXRTdGF0ZSwgZXh0cmEpO1xuXG4gICAgICBjb25zdCBwZW5kaW5nQWN0aW9uID0gZGlzcGF0Y2gubW9jay5jYWxsc1swXVswXTtcbiAgICAgIGV4cGVjdChwZW5kaW5nQWN0aW9uLm1ldGEucmVxdWVzdFN0YXR1cykudG9CZSgncGVuZGluZycpO1xuICAgICAgZXhwZWN0KGFjdGl2YXRlQWN0aW9uLmZ1bGZpbGxlZC5tYXRjaChyZXN1bHQpKS50b0JlKHRydWUpO1xuICAgICAgZXhwZWN0KHJlc3VsdC5wYXlsb2FkKS50b0JlKHJlc29sdmVkT2JqZWN0KTtcbiAgICB9KTtcbiAgICBpdCgnZGlzcGF0Y2hlcyBSRVNFVCBhY3Rpb25zJywgYXN5bmMgKCkgPT4ge1xuICAgICAgYXdhaXQgc3RvcmUuZGlzcGF0Y2gocmVzZXQoKSk7XG4gICAgICBleHBlY3Qoc3RvcmUuZ2V0U3RhdGUoKSkudG9FcXVhbChbZXhwZWN0LmFueShPYmplY3QpLCBleHBlY3Qub2JqZWN0Q29udGFpbmluZyhyZXNldCgpKV0pO1xuICAgIH0pO1xuICB9KTtcbn0pO1xuIl0sInZlcnNpb24iOjN9