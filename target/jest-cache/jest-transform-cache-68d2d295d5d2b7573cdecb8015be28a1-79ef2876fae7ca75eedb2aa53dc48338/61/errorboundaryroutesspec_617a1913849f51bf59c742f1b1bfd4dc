ed190824c60e2a5ccf16d8f38799f3fb
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const react_router_dom_1 = require("react-router-dom");
const react_2 = require("@testing-library/react");
const error_boundary_routes_1 = tslib_1.__importDefault(require("./error-boundary-routes"));
const ErrorComp = () => {
    throw new Error('test');
};
const NoErrorComp = () => {
    return react_1.default.createElement("div", null, "No error");
};
describe('error-boundary-routes component', () => {
    beforeEach(() => {
        // ignore console and jsdom errors
        jest.spyOn(window._virtualConsole, 'emit').mockImplementation(() => false);
        jest.spyOn(window.console, 'error').mockImplementation(() => false);
    });
    it('Should render fallback component when an uncaught error is thrown in route', () => {
        const { container } = (0, react_2.render)(react_1.default.createElement(react_router_dom_1.MemoryRouter, null,
            react_1.default.createElement(error_boundary_routes_1.default, null,
                react_1.default.createElement(react_router_dom_1.Route, { path: "*", element: react_1.default.createElement(ErrorComp, null) }))));
        expect(container.innerHTML).toEqual('<div><h2 class="error">An unexpected error has occurred.</h2></div>');
    });
    it('Should not render fallback component when route with uncaught error is not matched', () => {
        const { container } = (0, react_2.render)(react_1.default.createElement(react_router_dom_1.MemoryRouter, { initialEntries: ['/path'] },
            react_1.default.createElement(error_boundary_routes_1.default, null,
                react_1.default.createElement(react_router_dom_1.Route, { path: "/path", element: react_1.default.createElement(NoErrorComp, null) }),
                react_1.default.createElement(react_router_dom_1.Route, { path: "*", element: react_1.default.createElement(ErrorComp, null) }))));
        expect(container.innerHTML).toEqual('<div>No error</div>');
    });
    it('Should not render fallback component when no uncaught error is thrown', () => {
        const { container } = (0, react_2.render)(react_1.default.createElement(react_router_dom_1.MemoryRouter, null,
            react_1.default.createElement(error_boundary_routes_1.default, null,
                react_1.default.createElement(react_router_dom_1.Route, { path: "*", element: react_1.default.createElement(NoErrorComp, null) }))));
        expect(container.innerHTML).toEqual('<div>No error</div>');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3BjY28wNTYvRG9jdW1lbnRzL0NvdXJzIElUVS9yaWJvdWNob24vbWFnaWN2ZW50ZXN0b2NrL3NyYy9tYWluL3dlYmFwcC9hcHAvc2hhcmVkL2Vycm9yL2Vycm9yLWJvdW5kYXJ5LXJvdXRlcy5zcGVjLnRzeCIsIm1hcHBpbmdzIjoiOzs7QUFBQSwwREFBMEI7QUFDMUIsdURBQXVEO0FBQ3ZELGtEQUFnRDtBQUVoRCw0RkFBMEQ7QUFFMUQsTUFBTSxTQUFTLEdBQUcsR0FBZ0IsRUFBRTtJQUNsQyxNQUFNLElBQUksS0FBSyxDQUFDLE1BQU0sQ0FBQyxDQUFDO0FBQzFCLENBQUMsQ0FBQztBQUVGLE1BQU0sV0FBVyxHQUFHLEdBQWdCLEVBQUU7SUFDcEMsT0FBTyxzREFBbUIsQ0FBQztBQUM3QixDQUFDLENBQUM7QUFFRixRQUFRLENBQUMsaUNBQWlDLEVBQUUsR0FBRyxFQUFFO0lBQy9DLFVBQVUsQ0FBQyxHQUFHLEVBQUU7UUFDZCxrQ0FBa0M7UUFDbEMsSUFBSSxDQUFDLEtBQUssQ0FBRSxNQUFjLENBQUMsZUFBZSxFQUFFLE1BQU0sQ0FBQyxDQUFDLGtCQUFrQixDQUFDLEdBQUcsRUFBRSxDQUFDLEtBQUssQ0FBQyxDQUFDO1FBQ3BGLElBQUksQ0FBQyxLQUFLLENBQUUsTUFBYyxDQUFDLE9BQU8sRUFBRSxPQUFPLENBQUMsQ0FBQyxrQkFBa0IsQ0FBQyxHQUFHLEVBQUUsQ0FBQyxLQUFLLENBQUMsQ0FBQztJQUMvRSxDQUFDLENBQUMsQ0FBQztJQUVILEVBQUUsQ0FBQyw0RUFBNEUsRUFBRSxHQUFHLEVBQUU7UUFDcEYsTUFBTSxFQUFFLFNBQVMsRUFBRSxHQUFHLElBQUEsY0FBTSxFQUMxQiw4QkFBQywrQkFBWTtZQUNYLDhCQUFDLCtCQUFtQjtnQkFDbEIsOEJBQUMsd0JBQUssSUFBQyxJQUFJLEVBQUMsR0FBRyxFQUFDLE9BQU8sRUFBRSw4QkFBQyxTQUFTLE9BQUcsR0FBSSxDQUN0QixDQUNULENBQ2hCLENBQUM7UUFDRixNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxRUFBcUUsQ0FBQyxDQUFDO0lBQzdHLENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLG9GQUFvRixFQUFFLEdBQUcsRUFBRTtRQUM1RixNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBQSxjQUFNLEVBQzFCLDhCQUFDLCtCQUFZLElBQUMsY0FBYyxFQUFFLENBQUMsT0FBTyxDQUFDO1lBQ3JDLDhCQUFDLCtCQUFtQjtnQkFDbEIsOEJBQUMsd0JBQUssSUFBQyxJQUFJLEVBQUMsT0FBTyxFQUFDLE9BQU8sRUFBRSw4QkFBQyxXQUFXLE9BQUcsR0FBSTtnQkFDaEQsOEJBQUMsd0JBQUssSUFBQyxJQUFJLEVBQUMsR0FBRyxFQUFDLE9BQU8sRUFBRSw4QkFBQyxTQUFTLE9BQUcsR0FBSSxDQUN0QixDQUNULENBQ2hCLENBQUM7UUFDRixNQUFNLENBQUMsU0FBUyxDQUFDLFNBQVMsQ0FBQyxDQUFDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQyxDQUFDO0lBQzdELENBQUMsQ0FBQyxDQUFDO0lBRUgsRUFBRSxDQUFDLHVFQUF1RSxFQUFFLEdBQUcsRUFBRTtRQUMvRSxNQUFNLEVBQUUsU0FBUyxFQUFFLEdBQUcsSUFBQSxjQUFNLEVBQzFCLDhCQUFDLCtCQUFZO1lBQ1gsOEJBQUMsK0JBQW1CO2dCQUNsQiw4QkFBQyx3QkFBSyxJQUFDLElBQUksRUFBQyxHQUFHLEVBQUMsT0FBTyxFQUFFLDhCQUFDLFdBQVcsT0FBRyxHQUFJLENBQ3hCLENBQ1QsQ0FDaEIsQ0FBQztRQUNGLE1BQU0sQ0FBQyxTQUFTLENBQUMsU0FBUyxDQUFDLENBQUMsT0FBTyxDQUFDLHFCQUFxQixDQUFDLENBQUM7SUFDN0QsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvcGNjbzA1Ni9Eb2N1bWVudHMvQ291cnMgSVRVL3JpYm91Y2hvbi9tYWdpY3ZlbnRlc3RvY2svc3JjL21haW4vd2ViYXBwL2FwcC9zaGFyZWQvZXJyb3IvZXJyb3ItYm91bmRhcnktcm91dGVzLnNwZWMudHN4Il0sInNvdXJjZXNDb250ZW50IjpbImltcG9ydCBSZWFjdCBmcm9tICdyZWFjdCc7XG5pbXBvcnQgeyBNZW1vcnlSb3V0ZXIsIFJvdXRlIH0gZnJvbSAncmVhY3Qtcm91dGVyLWRvbSc7XG5pbXBvcnQgeyByZW5kZXIgfSBmcm9tICdAdGVzdGluZy1saWJyYXJ5L3JlYWN0JztcblxuaW1wb3J0IEVycm9yQm91bmRhcnlSb3V0ZXMgZnJvbSAnLi9lcnJvci1ib3VuZGFyeS1yb3V0ZXMnO1xuXG5jb25zdCBFcnJvckNvbXAgPSAoKTogSlNYLkVsZW1lbnQgPT4ge1xuICB0aHJvdyBuZXcgRXJyb3IoJ3Rlc3QnKTtcbn07XG5cbmNvbnN0IE5vRXJyb3JDb21wID0gKCk6IEpTWC5FbGVtZW50ID0+IHtcbiAgcmV0dXJuIDxkaXY+Tm8gZXJyb3I8L2Rpdj47XG59O1xuXG5kZXNjcmliZSgnZXJyb3ItYm91bmRhcnktcm91dGVzIGNvbXBvbmVudCcsICgpID0+IHtcbiAgYmVmb3JlRWFjaCgoKSA9PiB7XG4gICAgLy8gaWdub3JlIGNvbnNvbGUgYW5kIGpzZG9tIGVycm9yc1xuICAgIGplc3Quc3B5T24oKHdpbmRvdyBhcyBhbnkpLl92aXJ0dWFsQ29uc29sZSwgJ2VtaXQnKS5tb2NrSW1wbGVtZW50YXRpb24oKCkgPT4gZmFsc2UpO1xuICAgIGplc3Quc3B5T24oKHdpbmRvdyBhcyBhbnkpLmNvbnNvbGUsICdlcnJvcicpLm1vY2tJbXBsZW1lbnRhdGlvbigoKSA9PiBmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdTaG91bGQgcmVuZGVyIGZhbGxiYWNrIGNvbXBvbmVudCB3aGVuIGFuIHVuY2F1Z2h0IGVycm9yIGlzIHRocm93biBpbiByb3V0ZScsICgpID0+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKFxuICAgICAgPE1lbW9yeVJvdXRlcj5cbiAgICAgICAgPEVycm9yQm91bmRhcnlSb3V0ZXM+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIqXCIgZWxlbWVudD17PEVycm9yQ29tcCAvPn0gLz5cbiAgICAgICAgPC9FcnJvckJvdW5kYXJ5Um91dGVzPlxuICAgICAgPC9NZW1vcnlSb3V0ZXI+LFxuICAgICk7XG4gICAgZXhwZWN0KGNvbnRhaW5lci5pbm5lckhUTUwpLnRvRXF1YWwoJzxkaXY+PGgyIGNsYXNzPVwiZXJyb3JcIj5BbiB1bmV4cGVjdGVkIGVycm9yIGhhcyBvY2N1cnJlZC48L2gyPjwvZGl2PicpO1xuICB9KTtcblxuICBpdCgnU2hvdWxkIG5vdCByZW5kZXIgZmFsbGJhY2sgY29tcG9uZW50IHdoZW4gcm91dGUgd2l0aCB1bmNhdWdodCBlcnJvciBpcyBub3QgbWF0Y2hlZCcsICgpID0+IHtcbiAgICBjb25zdCB7IGNvbnRhaW5lciB9ID0gcmVuZGVyKFxuICAgICAgPE1lbW9yeVJvdXRlciBpbml0aWFsRW50cmllcz17WycvcGF0aCddfT5cbiAgICAgICAgPEVycm9yQm91bmRhcnlSb3V0ZXM+XG4gICAgICAgICAgPFJvdXRlIHBhdGg9XCIvcGF0aFwiIGVsZW1lbnQ9ezxOb0Vycm9yQ29tcCAvPn0gLz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIipcIiBlbGVtZW50PXs8RXJyb3JDb21wIC8+fSAvPlxuICAgICAgICA8L0Vycm9yQm91bmRhcnlSb3V0ZXM+XG4gICAgICA8L01lbW9yeVJvdXRlcj4sXG4gICAgKTtcbiAgICBleHBlY3QoY29udGFpbmVyLmlubmVySFRNTCkudG9FcXVhbCgnPGRpdj5ObyBlcnJvcjwvZGl2PicpO1xuICB9KTtcblxuICBpdCgnU2hvdWxkIG5vdCByZW5kZXIgZmFsbGJhY2sgY29tcG9uZW50IHdoZW4gbm8gdW5jYXVnaHQgZXJyb3IgaXMgdGhyb3duJywgKCkgPT4ge1xuICAgIGNvbnN0IHsgY29udGFpbmVyIH0gPSByZW5kZXIoXG4gICAgICA8TWVtb3J5Um91dGVyPlxuICAgICAgICA8RXJyb3JCb3VuZGFyeVJvdXRlcz5cbiAgICAgICAgICA8Um91dGUgcGF0aD1cIipcIiBlbGVtZW50PXs8Tm9FcnJvckNvbXAgLz59IC8+XG4gICAgICAgIDwvRXJyb3JCb3VuZGFyeVJvdXRlcz5cbiAgICAgIDwvTWVtb3J5Um91dGVyPixcbiAgICApO1xuICAgIGV4cGVjdChjb250YWluZXIuaW5uZXJIVE1MKS50b0VxdWFsKCc8ZGl2Pk5vIGVycm9yPC9kaXY+Jyk7XG4gIH0pO1xufSk7XG4iXSwidmVyc2lvbiI6M30=