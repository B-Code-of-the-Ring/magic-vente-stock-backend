{"file":"/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/shared/error/error-boundary-routes.spec.tsx","mappings":";;;AAAA,0DAA0B;AAC1B,uDAAuD;AACvD,kDAAgD;AAEhD,4FAA0D;AAE1D,MAAM,SAAS,GAAG,GAAgB,EAAE;IAClC,MAAM,IAAI,KAAK,CAAC,MAAM,CAAC,CAAC;AAC1B,CAAC,CAAC;AAEF,MAAM,WAAW,GAAG,GAAgB,EAAE;IACpC,OAAO,sDAAmB,CAAC;AAC7B,CAAC,CAAC;AAEF,QAAQ,CAAC,iCAAiC,EAAE,GAAG,EAAE;IAC/C,UAAU,CAAC,GAAG,EAAE;QACd,kCAAkC;QAClC,IAAI,CAAC,KAAK,CAAE,MAAc,CAAC,eAAe,EAAE,MAAM,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;QACpF,IAAI,CAAC,KAAK,CAAE,MAAc,CAAC,OAAO,EAAE,OAAO,CAAC,CAAC,kBAAkB,CAAC,GAAG,EAAE,CAAC,KAAK,CAAC,CAAC;IAC/E,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,4EAA4E,EAAE,GAAG,EAAE;QACpF,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,cAAM,EAC1B,8BAAC,+BAAY;YACX,8BAAC,+BAAmB;gBAClB,8BAAC,wBAAK,IAAC,IAAI,EAAC,GAAG,EAAC,OAAO,EAAE,8BAAC,SAAS,OAAG,GAAI,CACtB,CACT,CAChB,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,qEAAqE,CAAC,CAAC;IAC7G,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,oFAAoF,EAAE,GAAG,EAAE;QAC5F,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,cAAM,EAC1B,8BAAC,+BAAY,IAAC,cAAc,EAAE,CAAC,OAAO,CAAC;YACrC,8BAAC,+BAAmB;gBAClB,8BAAC,wBAAK,IAAC,IAAI,EAAC,OAAO,EAAC,OAAO,EAAE,8BAAC,WAAW,OAAG,GAAI;gBAChD,8BAAC,wBAAK,IAAC,IAAI,EAAC,GAAG,EAAC,OAAO,EAAE,8BAAC,SAAS,OAAG,GAAI,CACtB,CACT,CAChB,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,uEAAuE,EAAE,GAAG,EAAE;QAC/E,MAAM,EAAE,SAAS,EAAE,GAAG,IAAA,cAAM,EAC1B,8BAAC,+BAAY;YACX,8BAAC,+BAAmB;gBAClB,8BAAC,wBAAK,IAAC,IAAI,EAAC,GAAG,EAAC,OAAO,EAAE,8BAAC,WAAW,OAAG,GAAI,CACxB,CACT,CAChB,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,qBAAqB,CAAC,CAAC;IAC7D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/shared/error/error-boundary-routes.spec.tsx"],"sourcesContent":["import React from 'react';\nimport { MemoryRouter, Route } from 'react-router-dom';\nimport { render } from '@testing-library/react';\n\nimport ErrorBoundaryRoutes from './error-boundary-routes';\n\nconst ErrorComp = (): JSX.Element => {\n  throw new Error('test');\n};\n\nconst NoErrorComp = (): JSX.Element => {\n  return <div>No error</div>;\n};\n\ndescribe('error-boundary-routes component', () => {\n  beforeEach(() => {\n    // ignore console and jsdom errors\n    jest.spyOn((window as any)._virtualConsole, 'emit').mockImplementation(() => false);\n    jest.spyOn((window as any).console, 'error').mockImplementation(() => false);\n  });\n\n  it('Should render fallback component when an uncaught error is thrown in route', () => {\n    const { container } = render(\n      <MemoryRouter>\n        <ErrorBoundaryRoutes>\n          <Route path=\"*\" element={<ErrorComp />} />\n        </ErrorBoundaryRoutes>\n      </MemoryRouter>,\n    );\n    expect(container.innerHTML).toEqual('<div><h2 class=\"error\">An unexpected error has occurred.</h2></div>');\n  });\n\n  it('Should not render fallback component when route with uncaught error is not matched', () => {\n    const { container } = render(\n      <MemoryRouter initialEntries={['/path']}>\n        <ErrorBoundaryRoutes>\n          <Route path=\"/path\" element={<NoErrorComp />} />\n          <Route path=\"*\" element={<ErrorComp />} />\n        </ErrorBoundaryRoutes>\n      </MemoryRouter>,\n    );\n    expect(container.innerHTML).toEqual('<div>No error</div>');\n  });\n\n  it('Should not render fallback component when no uncaught error is thrown', () => {\n    const { container } = render(\n      <MemoryRouter>\n        <ErrorBoundaryRoutes>\n          <Route path=\"*\" element={<NoErrorComp />} />\n        </ErrorBoundaryRoutes>\n      </MemoryRouter>,\n    );\n    expect(container.innerHTML).toEqual('<div>No error</div>');\n  });\n});\n"],"version":3}