63036874be6bb67c0b3120272fe41e0e
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = loadingBarMiddleware;
var _loading_bar_ducks = require("./loading_bar_ducks");
function _slicedToArray(arr, i) {
  return _arrayWithHoles(arr) || _iterableToArrayLimit(arr, i) || _unsupportedIterableToArray(arr, i) || _nonIterableRest();
}
function _nonIterableRest() {
  throw new TypeError("Invalid attempt to destructure non-iterable instance.\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.");
}
function _unsupportedIterableToArray(o, minLen) {
  if (!o) return;
  if (typeof o === "string") return _arrayLikeToArray(o, minLen);
  var n = Object.prototype.toString.call(o).slice(8, -1);
  if (n === "Object" && o.constructor) n = o.constructor.name;
  if (n === "Map" || n === "Set") return Array.from(o);
  if (n === "Arguments" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen);
}
function _arrayLikeToArray(arr, len) {
  if (len == null || len > arr.length) len = arr.length;
  for (var i = 0, arr2 = new Array(len); i < len; i++) {
    arr2[i] = arr[i];
  }
  return arr2;
}
function _iterableToArrayLimit(arr, i) {
  if (typeof Symbol === "undefined" || !(Symbol.iterator in Object(arr))) return;
  var _arr = [];
  var _n = true;
  var _d = false;
  var _e = undefined;
  try {
    for (var _i = arr[Symbol.iterator](), _s; !(_n = (_s = _i.next()).done); _n = true) {
      _arr.push(_s.value);
      if (i && _arr.length === i) break;
    }
  } catch (err) {
    _d = true;
    _e = err;
  } finally {
    try {
      if (!_n && _i["return"] != null) _i["return"]();
    } finally {
      if (_d) throw _e;
    }
  }
  return _arr;
}
function _arrayWithHoles(arr) {
  if (Array.isArray(arr)) return arr;
}
var defaultTypeSuffixes = ['PENDING', 'FULFILLED', 'REJECTED'];
function loadingBarMiddleware() {
  var config = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : {};
  var promiseTypeSuffixes = config.promiseTypeSuffixes || defaultTypeSuffixes;
  var scope = config.scope || _loading_bar_ducks.DEFAULT_SCOPE;
  return function (_ref) {
    var dispatch = _ref.dispatch;
    return function (next) {
      return function (action) {
        if (action.type) {
          var _promiseTypeSuffixes = _slicedToArray(promiseTypeSuffixes, 3),
            PENDING = _promiseTypeSuffixes[0],
            FULFILLED = _promiseTypeSuffixes[1],
            REJECTED = _promiseTypeSuffixes[2];
          var isPending = new RegExp("".concat(PENDING, "$"), 'g');
          var isFulfilled = new RegExp("".concat(FULFILLED, "$"), 'g');
          var isRejected = new RegExp("".concat(REJECTED, "$"), 'g');
          var actionScope = action.meta && action.meta.scope || action.scope || scope;
          if (action.type.match(isPending)) {
            dispatch((0, _loading_bar_ducks.showLoading)(actionScope));
          } else if (action.type.match(isFulfilled) || action.type.match(isRejected)) {
            dispatch((0, _loading_bar_ducks.hideLoading)(actionScope));
          }
        }
        return next(action);
      };
    };
  };
}
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImxvYWRpbmdCYXJNaWRkbGV3YXJlIiwiX2xvYWRpbmdfYmFyX2R1Y2tzIiwicmVxdWlyZSIsIl9zbGljZWRUb0FycmF5IiwiYXJyIiwiaSIsIl9hcnJheVdpdGhIb2xlcyIsIl9pdGVyYWJsZVRvQXJyYXlMaW1pdCIsIl91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheSIsIl9ub25JdGVyYWJsZVJlc3QiLCJUeXBlRXJyb3IiLCJvIiwibWluTGVuIiwiX2FycmF5TGlrZVRvQXJyYXkiLCJuIiwicHJvdG90eXBlIiwidG9TdHJpbmciLCJjYWxsIiwic2xpY2UiLCJjb25zdHJ1Y3RvciIsIm5hbWUiLCJBcnJheSIsImZyb20iLCJ0ZXN0IiwibGVuIiwibGVuZ3RoIiwiYXJyMiIsIlN5bWJvbCIsIml0ZXJhdG9yIiwiX2FyciIsIl9uIiwiX2QiLCJfZSIsInVuZGVmaW5lZCIsIl9pIiwiX3MiLCJuZXh0IiwiZG9uZSIsInB1c2giLCJlcnIiLCJpc0FycmF5IiwiZGVmYXVsdFR5cGVTdWZmaXhlcyIsImNvbmZpZyIsImFyZ3VtZW50cyIsInByb21pc2VUeXBlU3VmZml4ZXMiLCJzY29wZSIsIkRFRkFVTFRfU0NPUEUiLCJfcmVmIiwiZGlzcGF0Y2giLCJhY3Rpb24iLCJ0eXBlIiwiX3Byb21pc2VUeXBlU3VmZml4ZXMiLCJQRU5ESU5HIiwiRlVMRklMTEVEIiwiUkVKRUNURUQiLCJpc1BlbmRpbmciLCJSZWdFeHAiLCJjb25jYXQiLCJpc0Z1bGZpbGxlZCIsImlzUmVqZWN0ZWQiLCJhY3Rpb25TY29wZSIsIm1ldGEiLCJtYXRjaCIsInNob3dMb2FkaW5nIiwiaGlkZUxvYWRpbmciXSwic291cmNlcyI6WyJsb2FkaW5nX2Jhcl9taWRkbGV3YXJlLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIlwidXNlIHN0cmljdFwiO1xuXG5PYmplY3QuZGVmaW5lUHJvcGVydHkoZXhwb3J0cywgXCJfX2VzTW9kdWxlXCIsIHtcbiAgdmFsdWU6IHRydWVcbn0pO1xuZXhwb3J0c1tcImRlZmF1bHRcIl0gPSBsb2FkaW5nQmFyTWlkZGxld2FyZTtcblxudmFyIF9sb2FkaW5nX2Jhcl9kdWNrcyA9IHJlcXVpcmUoXCIuL2xvYWRpbmdfYmFyX2R1Y2tzXCIpO1xuXG5mdW5jdGlvbiBfc2xpY2VkVG9BcnJheShhcnIsIGkpIHsgcmV0dXJuIF9hcnJheVdpdGhIb2xlcyhhcnIpIHx8IF9pdGVyYWJsZVRvQXJyYXlMaW1pdChhcnIsIGkpIHx8IF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShhcnIsIGkpIHx8IF9ub25JdGVyYWJsZVJlc3QoKTsgfVxuXG5mdW5jdGlvbiBfbm9uSXRlcmFibGVSZXN0KCkgeyB0aHJvdyBuZXcgVHlwZUVycm9yKFwiSW52YWxpZCBhdHRlbXB0IHRvIGRlc3RydWN0dXJlIG5vbi1pdGVyYWJsZSBpbnN0YW5jZS5cXG5JbiBvcmRlciB0byBiZSBpdGVyYWJsZSwgbm9uLWFycmF5IG9iamVjdHMgbXVzdCBoYXZlIGEgW1N5bWJvbC5pdGVyYXRvcl0oKSBtZXRob2QuXCIpOyB9XG5cbmZ1bmN0aW9uIF91bnN1cHBvcnRlZEl0ZXJhYmxlVG9BcnJheShvLCBtaW5MZW4pIHsgaWYgKCFvKSByZXR1cm47IGlmICh0eXBlb2YgbyA9PT0gXCJzdHJpbmdcIikgcmV0dXJuIF9hcnJheUxpa2VUb0FycmF5KG8sIG1pbkxlbik7IHZhciBuID0gT2JqZWN0LnByb3RvdHlwZS50b1N0cmluZy5jYWxsKG8pLnNsaWNlKDgsIC0xKTsgaWYgKG4gPT09IFwiT2JqZWN0XCIgJiYgby5jb25zdHJ1Y3RvcikgbiA9IG8uY29uc3RydWN0b3IubmFtZTsgaWYgKG4gPT09IFwiTWFwXCIgfHwgbiA9PT0gXCJTZXRcIikgcmV0dXJuIEFycmF5LmZyb20obyk7IGlmIChuID09PSBcIkFyZ3VtZW50c1wiIHx8IC9eKD86VWl8SSludCg/Ojh8MTZ8MzIpKD86Q2xhbXBlZCk/QXJyYXkkLy50ZXN0KG4pKSByZXR1cm4gX2FycmF5TGlrZVRvQXJyYXkobywgbWluTGVuKTsgfVxuXG5mdW5jdGlvbiBfYXJyYXlMaWtlVG9BcnJheShhcnIsIGxlbikgeyBpZiAobGVuID09IG51bGwgfHwgbGVuID4gYXJyLmxlbmd0aCkgbGVuID0gYXJyLmxlbmd0aDsgZm9yICh2YXIgaSA9IDAsIGFycjIgPSBuZXcgQXJyYXkobGVuKTsgaSA8IGxlbjsgaSsrKSB7IGFycjJbaV0gPSBhcnJbaV07IH0gcmV0dXJuIGFycjI7IH1cblxuZnVuY3Rpb24gX2l0ZXJhYmxlVG9BcnJheUxpbWl0KGFyciwgaSkgeyBpZiAodHlwZW9mIFN5bWJvbCA9PT0gXCJ1bmRlZmluZWRcIiB8fCAhKFN5bWJvbC5pdGVyYXRvciBpbiBPYmplY3QoYXJyKSkpIHJldHVybjsgdmFyIF9hcnIgPSBbXTsgdmFyIF9uID0gdHJ1ZTsgdmFyIF9kID0gZmFsc2U7IHZhciBfZSA9IHVuZGVmaW5lZDsgdHJ5IHsgZm9yICh2YXIgX2kgPSBhcnJbU3ltYm9sLml0ZXJhdG9yXSgpLCBfczsgIShfbiA9IChfcyA9IF9pLm5leHQoKSkuZG9uZSk7IF9uID0gdHJ1ZSkgeyBfYXJyLnB1c2goX3MudmFsdWUpOyBpZiAoaSAmJiBfYXJyLmxlbmd0aCA9PT0gaSkgYnJlYWs7IH0gfSBjYXRjaCAoZXJyKSB7IF9kID0gdHJ1ZTsgX2UgPSBlcnI7IH0gZmluYWxseSB7IHRyeSB7IGlmICghX24gJiYgX2lbXCJyZXR1cm5cIl0gIT0gbnVsbCkgX2lbXCJyZXR1cm5cIl0oKTsgfSBmaW5hbGx5IHsgaWYgKF9kKSB0aHJvdyBfZTsgfSB9IHJldHVybiBfYXJyOyB9XG5cbmZ1bmN0aW9uIF9hcnJheVdpdGhIb2xlcyhhcnIpIHsgaWYgKEFycmF5LmlzQXJyYXkoYXJyKSkgcmV0dXJuIGFycjsgfVxuXG52YXIgZGVmYXVsdFR5cGVTdWZmaXhlcyA9IFsnUEVORElORycsICdGVUxGSUxMRUQnLCAnUkVKRUNURUQnXTtcblxuZnVuY3Rpb24gbG9hZGluZ0Jhck1pZGRsZXdhcmUoKSB7XG4gIHZhciBjb25maWcgPSBhcmd1bWVudHMubGVuZ3RoID4gMCAmJiBhcmd1bWVudHNbMF0gIT09IHVuZGVmaW5lZCA/IGFyZ3VtZW50c1swXSA6IHt9O1xuICB2YXIgcHJvbWlzZVR5cGVTdWZmaXhlcyA9IGNvbmZpZy5wcm9taXNlVHlwZVN1ZmZpeGVzIHx8IGRlZmF1bHRUeXBlU3VmZml4ZXM7XG4gIHZhciBzY29wZSA9IGNvbmZpZy5zY29wZSB8fCBfbG9hZGluZ19iYXJfZHVja3MuREVGQVVMVF9TQ09QRTtcbiAgcmV0dXJuIGZ1bmN0aW9uIChfcmVmKSB7XG4gICAgdmFyIGRpc3BhdGNoID0gX3JlZi5kaXNwYXRjaDtcbiAgICByZXR1cm4gZnVuY3Rpb24gKG5leHQpIHtcbiAgICAgIHJldHVybiBmdW5jdGlvbiAoYWN0aW9uKSB7XG4gICAgICAgIGlmIChhY3Rpb24udHlwZSkge1xuICAgICAgICAgIHZhciBfcHJvbWlzZVR5cGVTdWZmaXhlcyA9IF9zbGljZWRUb0FycmF5KHByb21pc2VUeXBlU3VmZml4ZXMsIDMpLFxuICAgICAgICAgICAgICBQRU5ESU5HID0gX3Byb21pc2VUeXBlU3VmZml4ZXNbMF0sXG4gICAgICAgICAgICAgIEZVTEZJTExFRCA9IF9wcm9taXNlVHlwZVN1ZmZpeGVzWzFdLFxuICAgICAgICAgICAgICBSRUpFQ1RFRCA9IF9wcm9taXNlVHlwZVN1ZmZpeGVzWzJdO1xuXG4gICAgICAgICAgdmFyIGlzUGVuZGluZyA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoUEVORElORywgXCIkXCIpLCAnZycpO1xuICAgICAgICAgIHZhciBpc0Z1bGZpbGxlZCA9IG5ldyBSZWdFeHAoXCJcIi5jb25jYXQoRlVMRklMTEVELCBcIiRcIiksICdnJyk7XG4gICAgICAgICAgdmFyIGlzUmVqZWN0ZWQgPSBuZXcgUmVnRXhwKFwiXCIuY29uY2F0KFJFSkVDVEVELCBcIiRcIiksICdnJyk7XG4gICAgICAgICAgdmFyIGFjdGlvblNjb3BlID0gYWN0aW9uLm1ldGEgJiYgYWN0aW9uLm1ldGEuc2NvcGUgfHwgYWN0aW9uLnNjb3BlIHx8IHNjb3BlO1xuXG4gICAgICAgICAgaWYgKGFjdGlvbi50eXBlLm1hdGNoKGlzUGVuZGluZykpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKCgwLCBfbG9hZGluZ19iYXJfZHVja3Muc2hvd0xvYWRpbmcpKGFjdGlvblNjb3BlKSk7XG4gICAgICAgICAgfSBlbHNlIGlmIChhY3Rpb24udHlwZS5tYXRjaChpc0Z1bGZpbGxlZCkgfHwgYWN0aW9uLnR5cGUubWF0Y2goaXNSZWplY3RlZCkpIHtcbiAgICAgICAgICAgIGRpc3BhdGNoKCgwLCBfbG9hZGluZ19iYXJfZHVja3MuaGlkZUxvYWRpbmcpKGFjdGlvblNjb3BlKSk7XG4gICAgICAgICAgfVxuICAgICAgICB9XG5cbiAgICAgICAgcmV0dXJuIG5leHQoYWN0aW9uKTtcbiAgICAgIH07XG4gICAgfTtcbiAgfTtcbn0iXSwibWFwcGluZ3MiOiJBQUFBLFlBQVk7O0FBRVpBLE1BQU0sQ0FBQ0MsY0FBYyxDQUFDQyxPQUFPLEVBQUUsWUFBWSxFQUFFO0VBQzNDQyxLQUFLLEVBQUU7QUFDVCxDQUFDLENBQUM7QUFDRkQsT0FBTyxDQUFDLFNBQVMsQ0FBQyxHQUFHRSxvQkFBb0I7QUFFekMsSUFBSUMsa0JBQWtCLEdBQUdDLE9BQU8sQ0FBQyxxQkFBcUIsQ0FBQztBQUV2RCxTQUFTQyxjQUFjQSxDQUFDQyxHQUFHLEVBQUVDLENBQUMsRUFBRTtFQUFFLE9BQU9DLGVBQWUsQ0FBQ0YsR0FBRyxDQUFDLElBQUlHLHFCQUFxQixDQUFDSCxHQUFHLEVBQUVDLENBQUMsQ0FBQyxJQUFJRywyQkFBMkIsQ0FBQ0osR0FBRyxFQUFFQyxDQUFDLENBQUMsSUFBSUksZ0JBQWdCLENBQUMsQ0FBQztBQUFFO0FBRTdKLFNBQVNBLGdCQUFnQkEsQ0FBQSxFQUFHO0VBQUUsTUFBTSxJQUFJQyxTQUFTLENBQUMsMklBQTJJLENBQUM7QUFBRTtBQUVoTSxTQUFTRiwyQkFBMkJBLENBQUNHLENBQUMsRUFBRUMsTUFBTSxFQUFFO0VBQUUsSUFB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