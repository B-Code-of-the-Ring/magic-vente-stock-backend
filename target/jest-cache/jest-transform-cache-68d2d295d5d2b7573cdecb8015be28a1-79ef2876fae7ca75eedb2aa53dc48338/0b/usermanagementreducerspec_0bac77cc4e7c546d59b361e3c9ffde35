d72df828727abdad929315bca639fb50
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const toolkit_1 = require("@reduxjs/toolkit");
const axios_1 = tslib_1.__importDefault(require("axios"));
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const user_model_1 = require("app/shared/model/user.model");
const constants_1 = require("app/config/constants");
const user_management_reducer_1 = tslib_1.__importStar(require("./user-management.reducer"));
describe('User management reducer tests', () => {
    var _a;
    const username = (_a = process.env.E2E_USERNAME) !== null && _a !== void 0 ? _a : 'admin';
    function isEmpty(element) {
        if (element instanceof Array) {
            return element.length === 0;
        }
        else {
            return Object.keys(element).length === 0;
        }
    }
    function testInitialState(state) {
        expect(state).toMatchObject({
            loading: false,
            errorMessage: null,
            updating: false,
            updateSuccess: false,
            totalItems: 0,
        });
        expect(isEmpty(state.users));
        expect(isEmpty(state.authorities));
        expect(isEmpty(state.user));
    }
    function testMultipleTypes(types, payload, testFunction, error) {
        types.forEach(e => {
            testFunction((0, user_management_reducer_1.default)(undefined, { type: e, payload, error }));
        });
    }
    describe('Common', () => {
        it('should return the initial state', () => {
            testInitialState((0, user_management_reducer_1.default)(undefined, { type: 'unknown' }));
        });
    });
    describe('Requests', () => {
        it('should not modify the current state', () => {
            testInitialState((0, user_management_reducer_1.default)(undefined, { type: user_management_reducer_1.getRoles.pending.type }));
        });
        it('should set state to loading', () => {
            testMultipleTypes([user_management_reducer_1.getUsers.pending.type, user_management_reducer_1.getUsersAsAdmin.pending.type, user_management_reducer_1.getUser.pending.type], {}, state => {
                expect(state).toMatchObject({
                    errorMessage: null,
                    updateSuccess: false,
                    loading: true,
                });
            });
        });
        it('should set state to updating', () => {
            testMultipleTypes([user_management_reducer_1.createUser.pending.type, user_management_reducer_1.updateUser.pending.type, user_management_reducer_1.deleteUser.pending.type], {}, state => {
                expect(state).toMatchObject({
                    errorMessage: null,
                    updateSuccess: false,
                    updating: true,
                });
            });
        });
    });
    describe('Failures', () => {
        it('should set state to failed and put an error message in errorMessage', () => {
            testMultipleTypes([
                user_management_reducer_1.getUsersAsAdmin.rejected.type,
                user_management_reducer_1.getUsers.rejected.type,
                user_management_reducer_1.getUser.rejected.type,
                user_management_reducer_1.getRoles.rejected.type,
                user_management_reducer_1.createUser.rejected.type,
                user_management_reducer_1.updateUser.rejected.type,
                user_management_reducer_1.deleteUser.rejected.type,
            ], { message: 'something happened' }, state => {
                expect(state).toMatchObject({
                    loading: false,
                    updating: false,
                    updateSuccess: false,
                    errorMessage: 'error happened',
                });
            }, { message: 'error happened' });
        });
    });
    describe('Success', () => {
        it('should update state according to a successful fetch users request', () => {
            const headers = { ['x-total-count']: 42 };
            const payload = { data: 'some handsome users', headers };
            const toTest = (0, user_management_reducer_1.default)(undefined, { type: user_management_reducer_1.getUsers.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                users: payload.data,
                totalItems: headers['x-total-count'],
            });
        });
        it('should update state according to a successful fetch user request', () => {
            const payload = { data: 'some handsome user' };
            const toTest = (0, user_management_reducer_1.default)(undefined, { type: user_management_reducer_1.getUser.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                user: payload.data,
            });
        });
        it('should update state according to a successful fetch role request', () => {
            const payload = { data: [constants_1.AUTHORITIES.ADMIN] };
            const toTest = (0, user_management_reducer_1.default)(undefined, { type: user_management_reducer_1.getRoles.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                authorities: payload.data,
            });
        });
        it('should set state to successful update', () => {
            testMultipleTypes([user_management_reducer_1.createUser.fulfilled.type, user_management_reducer_1.updateUser.fulfilled.type], { data: 'some handsome user' }, types => {
                expect(types).toMatchObject({
                    updating: false,
                    updateSuccess: true,
                    user: 'some handsome user',
                });
            });
        });
        it('should set state to successful update with an empty user', () => {
            const toTest = (0, user_management_reducer_1.default)(undefined, { type: user_management_reducer_1.deleteUser.fulfilled.type });
            expect(toTest).toMatchObject({
                updating: false,
                updateSuccess: true,
            });
            expect(isEmpty(toTest.user));
        });
    });
    describe('Reset', () => {
        it('should reset the state', () => {
            const initialState = {
                loading: false,
                errorMessage: null,
                users: [],
                authorities: [],
                user: user_model_1.defaultValue,
                updating: false,
                updateSuccess: false,
                totalItems: 0,
            };
            const initialStateNew = Object.assign(Object.assign({}, initialState), { loading: true });
            expect((0, user_management_reducer_1.default)(initialStateNew, user_management_reducer_1.reset)).toEqual(initialState);
        });
    });
    describe('Actions', () => {
        let store;
        const resolvedObject = { value: 'whatever' };
        const getState = jest.fn();
        const dispatch = jest.fn();
        const extra = {};
        beforeEach(() => {
            store = (0, toolkit_1.configureStore)({
                reducer: (state = [], action) => [...state, action],
            });
            axios_1.default.get = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.put = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.post = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.delete = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
        });
        it('dispatches FETCH_USERS_AS_ADMIN_PENDING and FETCH_USERS_AS_ADMIN_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = {};
            const result = yield (0, user_management_reducer_1.getUsersAsAdmin)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.getUsersAsAdmin.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_USERS_AS_ADMIN_PENDING and FETCH_USERS_AS_ADMIN_FULFILLED actions with pagination options', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = { page: 1, size: 20, sort: 'id,desc' };
            const result = yield (0, user_management_reducer_1.getUsersAsAdmin)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.getUsersAsAdmin.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_USERS_PENDING and FETCH_USERS_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = {};
            const result = yield (0, user_management_reducer_1.getUsers)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.getUsers.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_USERS_PENDING and FETCH_USERS_FULFILLED actions with pagination options', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = { page: 1, size: 20, sort: 'id,desc' };
            const result = yield (0, user_management_reducer_1.getUsers)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.getUsers.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_ROLES_PENDING and FETCH_ROLES_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, user_management_reducer_1.getRoles)()(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.getRoles.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_USER_PENDING and FETCH_USER_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, user_management_reducer_1.getUser)(username)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.getUser.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches CREATE_USER_PENDING and CREATE_USER_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = {};
            const result = yield (0, user_management_reducer_1.createUser)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.createUser.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches UPDATE_USER_PENDING and UPDATE_USER_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = { login: username };
            const result = yield (0, user_management_reducer_1.updateUser)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.updateUser.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches DELETE_USER_PENDING and DELETE_USER_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, user_management_reducer_1.deleteUser)(username)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(user_management_reducer_1.deleteUser.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches RESET actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield store.dispatch((0, user_management_reducer_1.reset)());
            expect(store.getState()).toEqual([expect.any(Object), expect.objectContaining((0, user_management_reducer_1.reset)())]);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,