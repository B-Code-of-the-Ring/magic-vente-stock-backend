d4202ca79b2d05aea9ae206ff554f2e8
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const react_router_dom_1 = require("react-router-dom");
const react_2 = require("@testing-library/react");
const redux_mock_store_1 = tslib_1.__importDefault(require("redux-mock-store"));
const react_redux_1 = require("react-redux");
const constants_1 = require("app/config/constants");
const private_route_1 = tslib_1.__importStar(require("./private-route"));
const TestComp = () => react_1.default.createElement("div", null, "Test");
describe('private-route component', () => {
    const mockStore = (0, redux_mock_store_1.default)();
    const wrapper = (Elem, authentication) => {
        const store = mockStore({ authentication });
        return (0, react_2.render)(react_1.default.createElement(react_redux_1.Provider, { store: store },
            react_1.default.createElement(react_router_dom_1.MemoryRouter, null, Elem)));
    };
    // All tests will go here
    it('Should throw error when falsy children are provided', () => {
        const originalError = console.error;
        console.error = jest.fn();
        expect(() => wrapper(react_1.default.createElement(private_route_1.default, null, null), {
            isAuthenticated: true,
            sessionHasBeenFetched: true,
            account: {
                authorities: [],
            },
        })).toThrow(Error);
        console.error = originalError;
    });
    it('Should render an error message when the user has no authorities', () => {
        const { container } = wrapper(react_1.default.createElement(private_route_1.default, null,
            react_1.default.createElement(TestComp, null)), {
            isAuthenticated: true,
            sessionHasBeenFetched: true,
            account: {
                authorities: [],
            },
        });
        expect(container.innerHTML).toMatch(/<div class="insufficient-authority"><div class="alert alert-danger">.*<\/div><\/div>/);
    });
    it('Should render a route for the component provided when authenticated', () => {
        const { container } = wrapper(react_1.default.createElement(private_route_1.default, null,
            react_1.default.createElement(TestComp, null)), {
            isAuthenticated: true,
            sessionHasBeenFetched: true,
            account: {
                authorities: ['ADMIN'],
            },
        });
        expect(container.innerHTML).toEqual('<div>Test</div>');
    });
    it('Should redirect when not authenticated', () => {
        const { container } = wrapper(react_1.default.createElement(react_router_dom_1.Routes, null,
            react_1.default.createElement(react_router_dom_1.Route, { path: "/", element: react_1.default.createElement(private_route_1.default, null,
                    react_1.default.createElement(TestComp, null)) }),
            react_1.default.createElement(react_router_dom_1.Route, { path: "/login", element: react_1.default.createElement("div", null, "Login") })), {
            isAuthenticated: false,
            sessionHasBeenFetched: true,
            account: {
                authorities: ['ADMIN'],
            },
        });
        expect(container.innerHTML).not.toEqual('<div>Test</div>');
        expect(container.innerHTML).toEqual('<div>Login</div>');
    });
});
describe('hasAnyAuthority', () => {
    // All tests will go here
    it('Should return false when authorities is invalid', () => {
        expect((0, private_route_1.hasAnyAuthority)(undefined, undefined)).toEqual(false);
        expect((0, private_route_1.hasAnyAuthority)(null, [])).toEqual(false);
        expect((0, private_route_1.hasAnyAuthority)([], [])).toEqual(false);
        expect((0, private_route_1.hasAnyAuthority)([], [constants_1.AUTHORITIES.USER])).toEqual(false);
    });
    it('Should return true when authorities is valid and hasAnyAuthorities is empty', () => {
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER], [])).toEqual(true);
    });
    it('Should return true when authorities is valid and hasAnyAuthorities contains an authority', () => {
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER], [constants_1.AUTHORITIES.USER])).toEqual(true);
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER, constants_1.AUTHORITIES.ADMIN], [constants_1.AUTHORITIES.USER])).toEqual(true);
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER, constants_1.AUTHORITIES.ADMIN], [constants_1.AUTHORITIES.USER, constants_1.AUTHORITIES.ADMIN])).toEqual(true);
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER, constants_1.AUTHORITIES.ADMIN], [constants_1.AUTHORITIES.USER, 'ROLEADMIN'])).toEqual(true);
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER, constants_1.AUTHORITIES.ADMIN], [constants_1.AUTHORITIES.ADMIN])).toEqual(true);
    });
    it('Should return false when authorities is valid and hasAnyAuthorities does not contain an authority', () => {
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER], [constants_1.AUTHORITIES.ADMIN])).toEqual(false);
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER, constants_1.AUTHORITIES.ADMIN], ['ROLE_USERSS'])).toEqual(false);
        expect((0, private_route_1.hasAnyAuthority)([constants_1.AUTHORITIES.USER, constants_1.AUTHORITIES.ADMIN], ['ROLEUSER', 'ROLEADMIN'])).toEqual(false);
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,