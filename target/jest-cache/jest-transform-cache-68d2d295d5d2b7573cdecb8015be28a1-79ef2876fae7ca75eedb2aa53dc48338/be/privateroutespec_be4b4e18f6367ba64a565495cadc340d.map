{"file":"/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/shared/auth/private-route.spec.tsx","mappings":";;;AAAA,0DAA0B;AAC1B,uDAA+D;AAC/D,kDAAgD;AAChD,gFAA8C;AAC9C,6CAAuC;AAEvC,oDAAmD;AACnD,yEAAgE;AAEhE,MAAM,QAAQ,GAAG,GAAG,EAAE,CAAC,kDAAe,CAAC;AAEvC,QAAQ,CAAC,yBAAyB,EAAE,GAAG,EAAE;IACvC,MAAM,SAAS,GAAG,IAAA,0BAAc,GAAE,CAAC;IACnC,MAAM,OAAO,GAAG,CAAC,IAAiB,EAAE,cAAc,EAAE,EAAE;QACpD,MAAM,KAAK,GAAG,SAAS,CAAC,EAAE,cAAc,EAAE,CAAC,CAAC;QAC5C,OAAO,IAAA,cAAM,EACX,8BAAC,sBAAQ,IAAC,KAAK,EAAE,KAAK;YACpB,8BAAC,+BAAY,QAAE,IAAI,CAAgB,CAC1B,CACZ,CAAC;IACJ,CAAC,CAAC;IAEF,yBAAyB;IACzB,EAAE,CAAC,qDAAqD,EAAE,GAAG,EAAE;QAC7D,MAAM,aAAa,GAAG,OAAO,CAAC,KAAK,CAAC;QACpC,OAAO,CAAC,KAAK,GAAG,IAAI,CAAC,EAAE,EAAE,CAAC;QAC1B,MAAM,CAAC,GAAG,EAAE,CACV,OAAO,CAAC,8BAAC,uBAAY,QAAE,IAAI,CAAgB,EAAE;YAC3C,eAAe,EAAE,IAAI;YACrB,qBAAqB,EAAE,IAAI;YAC3B,OAAO,EAAE;gBACP,WAAW,EAAE,EAAE;aAChB;SACF,CAAC,CACH,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjB,OAAO,CAAC,KAAK,GAAG,aAAa,CAAC;IAChC,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,iEAAiE,EAAE,GAAG,EAAE;QACzE,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAC3B,8BAAC,uBAAY;YACX,8BAAC,QAAQ,OAAG,CACC,EACf;YACE,eAAe,EAAE,IAAI;YACrB,qBAAqB,EAAE,IAAI;YAC3B,OAAO,EAAE;gBACP,WAAW,EAAE,EAAE;aAChB;SACF,CACF,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,sFAAsF,CAAC,CAAC;IAC9H,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,qEAAqE,EAAE,GAAG,EAAE;QAC7E,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAC3B,8BAAC,uBAAY;YACX,8BAAC,QAAQ,OAAG,CACC,EACf;YACE,eAAe,EAAE,IAAI;YACrB,qBAAqB,EAAE,IAAI;YAC3B,OAAO,EAAE;gBACP,WAAW,EAAE,CAAC,OAAO,CAAC;aACvB;SACF,CACF,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;IACzD,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,wCAAwC,EAAE,GAAG,EAAE;QAChD,MAAM,EAAE,SAAS,EAAE,GAAG,OAAO,CAC3B,8BAAC,yBAAM;YACL,8BAAC,wBAAK,IACJ,IAAI,EAAC,GAAG,EACR,OAAO,EACL,8BAAC,uBAAY;oBACX,8BAAC,QAAQ,OAAG,CACC,GAEjB;YACF,8BAAC,wBAAK,IAAC,IAAI,EAAC,QAAQ,EAAC,OAAO,EAAE,mDAAgB,GAAI,CAC3C,EACT;YACE,eAAe,EAAE,KAAK;YACtB,qBAAqB,EAAE,IAAI;YAC3B,OAAO,EAAE;gBACP,WAAW,EAAE,CAAC,OAAO,CAAC;aACvB;SACF,CACF,CAAC;QACF,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,GAAG,CAAC,OAAO,CAAC,iBAAiB,CAAC,CAAC;QAC3D,MAAM,CAAC,SAAS,CAAC,SAAS,CAAC,CAAC,OAAO,CAAC,kBAAkB,CAAC,CAAC;IAC1D,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC;AAEH,QAAQ,CAAC,iBAAiB,EAAE,GAAG,EAAE;IAC/B,yBAAyB;IACzB,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;QACzD,MAAM,CAAC,IAAA,+BAAe,EAAC,SAAS,EAAE,SAAS,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC7D,MAAM,CAAC,IAAA,+BAAe,EAAC,IAAI,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QACjD,MAAM,CAAC,IAAA,+BAAe,EAAC,EAAE,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/C,MAAM,CAAC,IAAA,+BAAe,EAAC,EAAE,EAAE,CAAC,uBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IACjE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,6EAA6E,EAAE,GAAG,EAAE;QACrF,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,CAAC,EAAE,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IAChE,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,0FAA0F,EAAE,GAAG,EAAE;QAClG,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,CAAC,EAAE,CAAC,uBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9E,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,EAAE,uBAAW,CAAC,KAAK,CAAC,EAAE,CAAC,uBAAW,CAAC,IAAI,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACjG,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,EAAE,uBAAW,CAAC,KAAK,CAAC,EAAE,CAAC,uBAAW,CAAC,IAAI,EAAE,uBAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QACpH,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,EAAE,uBAAW,CAAC,KAAK,CAAC,EAAE,CAAC,uBAAW,CAAC,IAAI,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;QAC9G,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,EAAE,uBAAW,CAAC,KAAK,CAAC,EAAE,CAAC,uBAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,IAAI,CAAC,CAAC;IACpG,CAAC,CAAC,CAAC;IAEH,EAAE,CAAC,mGAAmG,EAAE,GAAG,EAAE;QAC3G,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,CAAC,EAAE,CAAC,uBAAW,CAAC,KAAK,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAChF,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,EAAE,uBAAW,CAAC,KAAK,CAAC,EAAE,CAAC,aAAa,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;QAC/F,MAAM,CAAC,IAAA,+BAAe,EAAC,CAAC,uBAAW,CAAC,IAAI,EAAE,uBAAW,CAAC,KAAK,CAAC,EAAE,CAAC,UAAU,EAAE,WAAW,CAAC,CAAC,CAAC,CAAC,OAAO,CAAC,KAAK,CAAC,CAAC;IAC3G,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/shared/auth/private-route.spec.tsx"],"sourcesContent":["import React from 'react';\nimport { MemoryRouter, Route, Routes } from 'react-router-dom';\nimport { render } from '@testing-library/react';\nimport configureStore from 'redux-mock-store';\nimport { Provider } from 'react-redux';\n\nimport { AUTHORITIES } from 'app/config/constants';\nimport PrivateRoute, { hasAnyAuthority } from './private-route';\n\nconst TestComp = () => <div>Test</div>;\n\ndescribe('private-route component', () => {\n  const mockStore = configureStore();\n  const wrapper = (Elem: JSX.Element, authentication) => {\n    const store = mockStore({ authentication });\n    return render(\n      <Provider store={store}>\n        <MemoryRouter>{Elem}</MemoryRouter>\n      </Provider>,\n    );\n  };\n\n  // All tests will go here\n  it('Should throw error when falsy children are provided', () => {\n    const originalError = console.error;\n    console.error = jest.fn();\n    expect(() =>\n      wrapper(<PrivateRoute>{null}</PrivateRoute>, {\n        isAuthenticated: true,\n        sessionHasBeenFetched: true,\n        account: {\n          authorities: [],\n        },\n      }),\n    ).toThrow(Error);\n    console.error = originalError;\n  });\n\n  it('Should render an error message when the user has no authorities', () => {\n    const { container } = wrapper(\n      <PrivateRoute>\n        <TestComp />\n      </PrivateRoute>,\n      {\n        isAuthenticated: true,\n        sessionHasBeenFetched: true,\n        account: {\n          authorities: [],\n        },\n      },\n    );\n    expect(container.innerHTML).toMatch(/<div class=\"insufficient-authority\"><div class=\"alert alert-danger\">.*<\\/div><\\/div>/);\n  });\n\n  it('Should render a route for the component provided when authenticated', () => {\n    const { container } = wrapper(\n      <PrivateRoute>\n        <TestComp />\n      </PrivateRoute>,\n      {\n        isAuthenticated: true,\n        sessionHasBeenFetched: true,\n        account: {\n          authorities: ['ADMIN'],\n        },\n      },\n    );\n    expect(container.innerHTML).toEqual('<div>Test</div>');\n  });\n\n  it('Should redirect when not authenticated', () => {\n    const { container } = wrapper(\n      <Routes>\n        <Route\n          path=\"/\"\n          element={\n            <PrivateRoute>\n              <TestComp />\n            </PrivateRoute>\n          }\n        />\n        <Route path=\"/login\" element={<div>Login</div>} />\n      </Routes>,\n      {\n        isAuthenticated: false,\n        sessionHasBeenFetched: true,\n        account: {\n          authorities: ['ADMIN'],\n        },\n      },\n    );\n    expect(container.innerHTML).not.toEqual('<div>Test</div>');\n    expect(container.innerHTML).toEqual('<div>Login</div>');\n  });\n});\n\ndescribe('hasAnyAuthority', () => {\n  // All tests will go here\n  it('Should return false when authorities is invalid', () => {\n    expect(hasAnyAuthority(undefined, undefined)).toEqual(false);\n    expect(hasAnyAuthority(null, [])).toEqual(false);\n    expect(hasAnyAuthority([], [])).toEqual(false);\n    expect(hasAnyAuthority([], [AUTHORITIES.USER])).toEqual(false);\n  });\n\n  it('Should return true when authorities is valid and hasAnyAuthorities is empty', () => {\n    expect(hasAnyAuthority([AUTHORITIES.USER], [])).toEqual(true);\n  });\n\n  it('Should return true when authorities is valid and hasAnyAuthorities contains an authority', () => {\n    expect(hasAnyAuthority([AUTHORITIES.USER], [AUTHORITIES.USER])).toEqual(true);\n    expect(hasAnyAuthority([AUTHORITIES.USER, AUTHORITIES.ADMIN], [AUTHORITIES.USER])).toEqual(true);\n    expect(hasAnyAuthority([AUTHORITIES.USER, AUTHORITIES.ADMIN], [AUTHORITIES.USER, AUTHORITIES.ADMIN])).toEqual(true);\n    expect(hasAnyAuthority([AUTHORITIES.USER, AUTHORITIES.ADMIN], [AUTHORITIES.USER, 'ROLEADMIN'])).toEqual(true);\n    expect(hasAnyAuthority([AUTHORITIES.USER, AUTHORITIES.ADMIN], [AUTHORITIES.ADMIN])).toEqual(true);\n  });\n\n  it('Should return false when authorities is valid and hasAnyAuthorities does not contain an authority', () => {\n    expect(hasAnyAuthority([AUTHORITIES.USER], [AUTHORITIES.ADMIN])).toEqual(false);\n    expect(hasAnyAuthority([AUTHORITIES.USER, AUTHORITIES.ADMIN], ['ROLE_USERSS'])).toEqual(false);\n    expect(hasAnyAuthority([AUTHORITIES.USER, AUTHORITIES.ADMIN], ['ROLEUSER', 'ROLEADMIN'])).toEqual(false);\n  });\n});\n"],"version":3}