6ea11f9ff1b78ff1a3a62e13d406f190
/**
 * Copyright (c) 2014-present, Facebook, Inc.
 *
 * This source code is licensed under the MIT license found in the
 * LICENSE file in the root directory of this source tree.
 */

'use strict';

/**
 * Similar to invariant but only logs a warning if the condition is not met.
 * This can be used to log issues in development environments in critical
 * paths. Removing the logging code for production environments will keep the
 * same logic and follow the same code paths.
 */
var __DEV__ = process.env.NODE_ENV !== 'production';
var warning = function () {};
if (__DEV__) {
  var printWarning = function printWarning(format, args) {
    var len = arguments.length;
    args = new Array(len > 1 ? len - 1 : 0);
    for (var key = 1; key < len; key++) {
      args[key - 1] = arguments[key];
    }
    var argIndex = 0;
    var message = 'Warning: ' + format.replace(/%s/g, function () {
      return args[argIndex++];
    });
    if (typeof console !== 'undefined') {
      console.error(message);
    }
    try {
      // --- Welcome to debugging React ---
      // This error was thrown as a convenience so that you can use this stack
      // to find the callsite that caused this warning to fire.
      throw new Error(message);
    } catch (x) {}
  };
  warning = function (condition, format, args) {
    var len = arguments.length;
    args = new Array(len > 2 ? len - 2 : 0);
    for (var key = 2; key < len; key++) {
      args[key - 2] = arguments[key];
    }
    if (format === undefined) {
      throw new Error('`warning(condition, format, ...args)` requires a warning ' + 'message argument');
    }
    if (!condition) {
      printWarning.apply(null, [format].concat(args));
    }
  };
}
module.exports = warning;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJfX0RFVl9fIiwicHJvY2VzcyIsImVudiIsIk5PREVfRU5WIiwid2FybmluZyIsInByaW50V2FybmluZyIsImZvcm1hdCIsImFyZ3MiLCJsZW4iLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJBcnJheSIsImtleSIsImFyZ0luZGV4IiwibWVzc2FnZSIsInJlcGxhY2UiLCJjb25zb2xlIiwiZXJyb3IiLCJFcnJvciIsIngiLCJjb25kaXRpb24iLCJ1bmRlZmluZWQiLCJhcHBseSIsImNvbmNhdCIsIm1vZHVsZSIsImV4cG9ydHMiXSwic291cmNlcyI6WyJ3YXJuaW5nLmpzIl0sInNvdXJjZXNDb250ZW50IjpbIi8qKlxuICogQ29weXJpZ2h0IChjKSAyMDE0LXByZXNlbnQsIEZhY2Vib29rLCBJbmMuXG4gKlxuICogVGhpcyBzb3VyY2UgY29kZSBpcyBsaWNlbnNlZCB1bmRlciB0aGUgTUlUIGxpY2Vuc2UgZm91bmQgaW4gdGhlXG4gKiBMSUNFTlNFIGZpbGUgaW4gdGhlIHJvb3QgZGlyZWN0b3J5IG9mIHRoaXMgc291cmNlIHRyZWUuXG4gKi9cblxuJ3VzZSBzdHJpY3QnO1xuXG4vKipcbiAqIFNpbWlsYXIgdG8gaW52YXJpYW50IGJ1dCBvbmx5IGxvZ3MgYSB3YXJuaW5nIGlmIHRoZSBjb25kaXRpb24gaXMgbm90IG1ldC5cbiAqIFRoaXMgY2FuIGJlIHVzZWQgdG8gbG9nIGlzc3VlcyBpbiBkZXZlbG9wbWVudCBlbnZpcm9ubWVudHMgaW4gY3JpdGljYWxcbiAqIHBhdGhzLiBSZW1vdmluZyB0aGUgbG9nZ2luZyBjb2RlIGZvciBwcm9kdWN0aW9uIGVudmlyb25tZW50cyB3aWxsIGtlZXAgdGhlXG4gKiBzYW1lIGxvZ2ljIGFuZCBmb2xsb3cgdGhlIHNhbWUgY29kZSBwYXRocy5cbiAqL1xuXG52YXIgX19ERVZfXyA9IHByb2Nlc3MuZW52Lk5PREVfRU5WICE9PSAncHJvZHVjdGlvbic7XG5cbnZhciB3YXJuaW5nID0gZnVuY3Rpb24oKSB7fTtcblxuaWYgKF9fREVWX18pIHtcbiAgdmFyIHByaW50V2FybmluZyA9IGZ1bmN0aW9uIHByaW50V2FybmluZyhmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDEgPyBsZW4gLSAxIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMTsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAxXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICB2YXIgYXJnSW5kZXggPSAwO1xuICAgIHZhciBtZXNzYWdlID0gJ1dhcm5pbmc6ICcgK1xuICAgICAgZm9ybWF0LnJlcGxhY2UoLyVzL2csIGZ1bmN0aW9uKCkge1xuICAgICAgICByZXR1cm4gYXJnc1thcmdJbmRleCsrXTtcbiAgICAgIH0pO1xuICAgIGlmICh0eXBlb2YgY29uc29sZSAhPT0gJ3VuZGVmaW5lZCcpIHtcbiAgICAgIGNvbnNvbGUuZXJyb3IobWVzc2FnZSk7XG4gICAgfVxuICAgIHRyeSB7XG4gICAgICAvLyAtLS0gV2VsY29tZSB0byBkZWJ1Z2dpbmcgUmVhY3QgLS0tXG4gICAgICAvLyBUaGlzIGVycm9yIHdhcyB0aHJvd24gYXMgYSBjb252ZW5pZW5jZSBzbyB0aGF0IHlvdSBjYW4gdXNlIHRoaXMgc3RhY2tcbiAgICAgIC8vIHRvIGZpbmQgdGhlIGNhbGxzaXRlIHRoYXQgY2F1c2VkIHRoaXMgd2FybmluZyB0byBmaXJlLlxuICAgICAgdGhyb3cgbmV3IEVycm9yKG1lc3NhZ2UpO1xuICAgIH0gY2F0Y2ggKHgpIHt9XG4gIH1cblxuICB3YXJuaW5nID0gZnVuY3Rpb24oY29uZGl0aW9uLCBmb3JtYXQsIGFyZ3MpIHtcbiAgICB2YXIgbGVuID0gYXJndW1lbnRzLmxlbmd0aDtcbiAgICBhcmdzID0gbmV3IEFycmF5KGxlbiA+IDIgPyBsZW4gLSAyIDogMCk7XG4gICAgZm9yICh2YXIga2V5ID0gMjsga2V5IDwgbGVuOyBrZXkrKykge1xuICAgICAgYXJnc1trZXkgLSAyXSA9IGFyZ3VtZW50c1trZXldO1xuICAgIH1cbiAgICBpZiAoZm9ybWF0ID09PSB1bmRlZmluZWQpIHtcbiAgICAgIHRocm93IG5ldyBFcnJvcihcbiAgICAgICAgICAnYHdhcm5pbmcoY29uZGl0aW9uLCBmb3JtYXQsIC4uLmFyZ3MpYCByZXF1aXJlcyBhIHdhcm5pbmcgJyArXG4gICAgICAgICAgJ21lc3NhZ2UgYXJndW1lbnQnXG4gICAgICApO1xuICAgIH1cbiAgICBpZiAoIWNvbmRpdGlvbikge1xuICAgICAgcHJpbnRXYXJuaW5nLmFwcGx5KG51bGwsIFtmb3JtYXRdLmNvbmNhdChhcmdzKSk7XG4gICAgfVxuICB9O1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IHdhcm5pbmc7XG4iXSwibWFwcGluZ3MiOiJBQUFBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTs7QUFFQSxZQUFZOztBQUVaO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUVBLElBQUlBLE9BQU8sR0FBR0MsT0FBTyxDQUFDQyxHQUFHLENBQUNDLFFBQVEsS0FBSyxZQUFZO0FBRW5ELElBQUlDLE9BQU8sR0FBRyxTQUFBQSxDQUFBLEVBQVcsQ0FBQyxDQUFDO0FBRTNCLElBQUlKLE9BQU8sRUFBRTtFQUNYLElBQUlLLFlBQVksR0FBRyxTQUFTQSxZQUFZQSxDQUFDQyxNQUFNLEVBQUVDLElBQUksRUFBRTtJQUNyRCxJQUFJQyxHQUFHLEdBQUdDLFNBQVMsQ0FBQ0MsTUFBTTtJQUMxQkgsSUFBSSxHQUFHLElBQUlJLEtBQUssQ0FBQ0gsR0FBRyxHQUFHLENBQUMsR0FBR0EsR0FBRyxHQUFHLENBQUMsR0FBRyxDQUFDLENBQUM7SUFDdkMsS0FBSyxJQUFJSSxHQUFHLEdBQUcsQ0FBQyxFQUFFQSxHQUFHLEdBQUdKLEdBQUcsRUFBRUksR0FBRyxFQUFFLEVBQUU7TUFDbENMLElBQUksQ0FBQ0ssR0FBRyxHQUFHLENBQUMsQ0FBQyxHQUFHSCxTQUFTLENBQUNHLEdBQUcsQ0FBQztJQUNoQztJQUNBLElBQUlDLFFBQVEsR0FBRyxDQUFDO0lBQ2hCLElBQUlDLE9BQU8sR0FBRyxXQUFXLEdBQ3ZCUixNQUFNLENBQUNTLE9BQU8sQ0FBQyxLQUFLLEVBQUUsWUFBVztNQUMvQixPQUFPUixJQUFJLENBQUNNLFFBQVEsRUFBRSxDQUFDO0lBQ3pCLENBQUMsQ0FBQztJQUNKLElBQUksT0FBT0csT0FBTyxLQUFLLFdBQVcsRUFBRTtNQUNsQ0EsT0FBTyxDQUFDQyxLQUFLLENBQUNILE9BQU8sQ0FBQztJQUN4QjtJQUNBLElBQUk7TUFDRjtNQUNBO01BQ0E7TUFDQSxNQUFNLElBQUlJLEtBQUssQ0FBQ0osT0FBTyxDQUFDO0lBQzFCLENBQUMsQ0FBQyxPQUFPSyxDQUFDLEVBQUUsQ0FBQztFQUNmLENBQUM7RUFFRGYsT0FBTyxHQUFHLFNBQUFBLENBQVNnQixTQUFTLEVBQUVkLE1BQU0sRUFBRUMsSUFBSSxFQUFFO0lBQzFDLElBQUlDLEdBQUcsR0FBR0MsU0FBUyxDQUFDQyxNQUFNO0lBQzFCSCxJQUFJLEdBQUcsSUFBSUksS0FBSyxDQUFDSCxHQUFHLEdBQUcsQ0FBQyxHQUFHQSxHQUFHLEdBQUcsQ0FBQyxHQUFHLENBQUMsQ0FBQztJQUN2QyxLQUFLLElBQUlJLEdBQUcsR0FBRyxDQUFDLEVBQUVBLEdBQUcsR0FBR0osR0FBRyxFQUFFSSxHQUFHLEVBQUUsRUFBRTtNQUNsQ0wsSUFBSSxDQUFDSyxHQUFHLEdBQUcsQ0FBQyxDQUFDLEdBQUdILFNBQVMsQ0FBQ0csR0FBRyxDQUFDO0lBQ2hDO0lBQ0EsSUFBSU4sTUFBTSxLQUFLZSxTQUFTLEVBQUU7TUFDeEIsTUFBTSxJQUFJSCxLQUFLLENBQ1gsMkRBQTJELEdBQzNELGtCQUNKLENBQUM7SUFDSDtJQUNBLElBQUksQ0FBQ0UsU0FBUyxFQUFFO01BQ2RmLFlBQVksQ0FBQ2lCLEtBQUssQ0FBQyxJQUFJLEVBQUUsQ0FBQ2hCLE1BQU0sQ0FBQyxDQUFDaUIsTUFBTSxDQUFDaEIsSUFBSSxDQUFDLENBQUM7SUFDakQ7RUFDRixDQUFDO0FBQ0g7QUFFQWlCLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHckIsT0FBTyIsImlnbm9yZUxpc3QiOltdfQ==