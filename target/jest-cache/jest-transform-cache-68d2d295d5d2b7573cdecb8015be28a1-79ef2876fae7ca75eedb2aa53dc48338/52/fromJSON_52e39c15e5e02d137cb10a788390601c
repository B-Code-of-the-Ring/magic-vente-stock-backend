2747769969fd0e2571e35fcbf96e7a88
'use strict';

let Declaration = require('./declaration');
let PreviousMap = require('./previous-map');
let Comment = require('./comment');
let AtRule = require('./at-rule');
let Input = require('./input');
let Root = require('./root');
let Rule = require('./rule');
function fromJSON(json, inputs) {
  if (Array.isArray(json)) return json.map(n => fromJSON(n));
  let {
    inputs: ownInputs,
    ...defaults
  } = json;
  if (ownInputs) {
    inputs = [];
    for (let input of ownInputs) {
      let inputHydrated = {
        ...input,
        __proto__: Input.prototype
      };
      if (inputHydrated.map) {
        inputHydrated.map = {
          ...inputHydrated.map,
          __proto__: PreviousMap.prototype
        };
      }
      inputs.push(inputHydrated);
    }
  }
  if (defaults.nodes) {
    defaults.nodes = json.nodes.map(n => fromJSON(n, inputs));
  }
  if (defaults.source) {
    let {
      inputId,
      ...source
    } = defaults.source;
    defaults.source = source;
    if (inputId != null) {
      defaults.source.input = inputs[inputId];
    }
  }
  if (defaults.type === 'root') {
    return new Root(defaults);
  } else if (defaults.type === 'decl') {
    return new Declaration(defaults);
  } else if (defaults.type === 'rule') {
    return new Rule(defaults);
  } else if (defaults.type === 'comment') {
    return new Comment(defaults);
  } else if (defaults.type === 'atrule') {
    return new AtRule(defaults);
  } else {
    throw new Error('Unknown node type: ' + json.type);
  }
}
module.exports = fromJSON;
fromJSON.default = fromJSON;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJEZWNsYXJhdGlvbiIsInJlcXVpcmUiLCJQcmV2aW91c01hcCIsIkNvbW1lbnQiLCJBdFJ1bGUiLCJJbnB1dCIsIlJvb3QiLCJSdWxlIiwiZnJvbUpTT04iLCJqc29uIiwiaW5wdXRzIiwiQXJyYXkiLCJpc0FycmF5IiwibWFwIiwibiIsIm93bklucHV0cyIsImRlZmF1bHRzIiwiaW5wdXQiLCJpbnB1dEh5ZHJhdGVkIiwiX19wcm90b19fIiwicHJvdG90eXBlIiwicHVzaCIsIm5vZGVzIiwic291cmNlIiwiaW5wdXRJZCIsInR5cGUiLCJFcnJvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0Il0sInNvdXJjZXMiOlsiZnJvbUpTT04uanMiXSwic291cmNlc0NvbnRlbnQiOlsiJ3VzZSBzdHJpY3QnXG5cbmxldCBEZWNsYXJhdGlvbiA9IHJlcXVpcmUoJy4vZGVjbGFyYXRpb24nKVxubGV0IFByZXZpb3VzTWFwID0gcmVxdWlyZSgnLi9wcmV2aW91cy1tYXAnKVxubGV0IENvbW1lbnQgPSByZXF1aXJlKCcuL2NvbW1lbnQnKVxubGV0IEF0UnVsZSA9IHJlcXVpcmUoJy4vYXQtcnVsZScpXG5sZXQgSW5wdXQgPSByZXF1aXJlKCcuL2lucHV0JylcbmxldCBSb290ID0gcmVxdWlyZSgnLi9yb290JylcbmxldCBSdWxlID0gcmVxdWlyZSgnLi9ydWxlJylcblxuZnVuY3Rpb24gZnJvbUpTT04oanNvbiwgaW5wdXRzKSB7XG4gIGlmIChBcnJheS5pc0FycmF5KGpzb24pKSByZXR1cm4ganNvbi5tYXAobiA9PiBmcm9tSlNPTihuKSlcblxuICBsZXQgeyBpbnB1dHM6IG93bklucHV0cywgLi4uZGVmYXVsdHMgfSA9IGpzb25cbiAgaWYgKG93bklucHV0cykge1xuICAgIGlucHV0cyA9IFtdXG4gICAgZm9yIChsZXQgaW5wdXQgb2Ygb3duSW5wdXRzKSB7XG4gICAgICBsZXQgaW5wdXRIeWRyYXRlZCA9IHsgLi4uaW5wdXQsIF9fcHJvdG9fXzogSW5wdXQucHJvdG90eXBlIH1cbiAgICAgIGlmIChpbnB1dEh5ZHJhdGVkLm1hcCkge1xuICAgICAgICBpbnB1dEh5ZHJhdGVkLm1hcCA9IHtcbiAgICAgICAgICAuLi5pbnB1dEh5ZHJhdGVkLm1hcCxcbiAgICAgICAgICBfX3Byb3RvX186IFByZXZpb3VzTWFwLnByb3RvdHlwZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgICBpbnB1dHMucHVzaChpbnB1dEh5ZHJhdGVkKVxuICAgIH1cbiAgfVxuICBpZiAoZGVmYXVsdHMubm9kZXMpIHtcbiAgICBkZWZhdWx0cy5ub2RlcyA9IGpzb24ubm9kZXMubWFwKG4gPT4gZnJvbUpTT04obiwgaW5wdXRzKSlcbiAgfVxuICBpZiAoZGVmYXVsdHMuc291cmNlKSB7XG4gICAgbGV0IHsgaW5wdXRJZCwgLi4uc291cmNlIH0gPSBkZWZhdWx0cy5zb3VyY2VcbiAgICBkZWZhdWx0cy5zb3VyY2UgPSBzb3VyY2VcbiAgICBpZiAoaW5wdXRJZCAhPSBudWxsKSB7XG4gICAgICBkZWZhdWx0cy5zb3VyY2UuaW5wdXQgPSBpbnB1dHNbaW5wdXRJZF1cbiAgICB9XG4gIH1cbiAgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdyb290Jykge1xuICAgIHJldHVybiBuZXcgUm9vdChkZWZhdWx0cylcbiAgfSBlbHNlIGlmIChkZWZhdWx0cy50eXBlID09PSAnZGVjbCcpIHtcbiAgICByZXR1cm4gbmV3IERlY2xhcmF0aW9uKGRlZmF1bHRzKVxuICB9IGVsc2UgaWYgKGRlZmF1bHRzLnR5cGUgPT09ICdydWxlJykge1xuICAgIHJldHVybiBuZXcgUnVsZShkZWZhdWx0cylcbiAgfSBlbHNlIGlmIChkZWZhdWx0cy50eXBlID09PSAnY29tbWVudCcpIHtcbiAgICByZXR1cm4gbmV3IENvbW1lbnQoZGVmYXVsdHMpXG4gIH0gZWxzZSBpZiAoZGVmYXVsdHMudHlwZSA9PT0gJ2F0cnVsZScpIHtcbiAgICByZXR1cm4gbmV3IEF0UnVsZShkZWZhdWx0cylcbiAgfSBlbHNlIHtcbiAgICB0aHJvdyBuZXcgRXJyb3IoJ1Vua25vd24gbm9kZSB0eXBlOiAnICsganNvbi50eXBlKVxuICB9XG59XG5cbm1vZHVsZS5leHBvcnRzID0gZnJvbUpTT05cbmZyb21KU09OLmRlZmF1bHQgPSBmcm9tSlNPTlxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFdBQVcsR0FBR0MsT0FBTyxDQUFDLGVBQWUsQ0FBQztBQUMxQyxJQUFJQyxXQUFXLEdBQUdELE9BQU8sQ0FBQyxnQkFBZ0IsQ0FBQztBQUMzQyxJQUFJRSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxXQUFXLENBQUM7QUFDbEMsSUFBSUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsV0FBVyxDQUFDO0FBQ2pDLElBQUlJLEtBQUssR0FBR0osT0FBTyxDQUFDLFNBQVMsQ0FBQztBQUM5QixJQUFJSyxJQUFJLEdBQUdMLE9BQU8sQ0FBQyxRQUFRLENBQUM7QUFDNUIsSUFBSU0sSUFBSSxHQUFHTixPQUFPLENBQUMsUUFBUSxDQUFDO0FBRTVCLFNBQVNPLFFBQVFBLENBQUNDLElBQUksRUFBRUMsTUFBTSxFQUFFO0VBQzlCLElBQUlDLEtBQUssQ0FBQ0MsT0FBTyxDQUFDSCxJQUFJLENBQUMsRUFBRSxPQUFPQSxJQUFJLENBQUNJLEdBQUcsQ0FBQ0MsQ0FBQyxJQUFJTixRQUFRLENBQUNNLENBQUMsQ0FBQyxDQUFDO0VBRTFELElBQUk7SUFBRUosTUFBTSxFQUFFSyxTQUFTO0lBQUUsR0FBR0M7RUFBUyxDQUFDLEdBQUdQLElBQUk7RUFDN0MsSUFBSU0sU0FBUyxFQUFFO0lBQ2JMLE1BQU0sR0FBRyxFQUFFO0lBQ1gsS0FBSyxJQUFJTyxLQUFLLElBQUlGLFNBQVMsRUFBRTtNQUMzQixJQUFJRyxhQUFhLEdBQUc7UUFBRSxHQUFHRCxLQUFLO1FBQUVFLFNBQVMsRUFBRWQsS0FBSyxDQUFDZTtNQUFVLENBQUM7TUFDNUQsSUFBSUYsYUFBYSxDQUFDTCxHQUFHLEVBQUU7UUFDckJLLGFBQWEsQ0FBQ0wsR0FBRyxHQUFHO1VBQ2xCLEdBQUdLLGFBQWEsQ0FBQ0wsR0FBRztVQUNwQk0sU0FBUyxFQUFFakIsV0FBVyxDQUFDa0I7UUFDekIsQ0FBQztNQUNIO01BQ0FWLE1BQU0sQ0FBQ1csSUFBSSxDQUFDSCxhQUFhLENBQUM7SUFDNUI7RUFDRjtFQUNBLElBQUlGLFFBQVEsQ0FBQ00sS0FBSyxFQUFFO0lBQ2xCTixRQUFRLENBQUNNLEtBQUssR0FBR2IsSUFBSSxDQUFDYSxLQUFLLENBQUNULEdBQUcsQ0FBQ0MsQ0FBQyxJQUFJTixRQUFRLENBQUNNLENBQUMsRUFBRUosTUFBTSxDQUFDLENBQUM7RUFDM0Q7RUFDQSxJQUFJTSxRQUFRLENBQUNPLE1BQU0sRUFBRTtJQUNuQixJQUFJO01BQUVDLE9BQU87TUFBRSxHQUFHRDtJQUFPLENBQUMsR0FBR1AsUUFBUSxDQUFDTyxNQUFNO0lBQzVDUCxRQUFRLENBQUNPLE1BQU0sR0FBR0EsTUFBTTtJQUN4QixJQUFJQyxPQUFPLElBQUksSUFBSSxFQUFFO01BQ25CUixRQUFRLENBQUNPLE1BQU0sQ0FBQ04sS0FBSyxHQUFHUCxNQUFNLENBQUNjLE9BQU8sQ0FBQztJQUN6QztFQUNGO0VBQ0EsSUFBSVIsUUFBUSxDQUFDUyxJQUFJLEtBQUssTUFBTSxFQUFFO0lBQzVCLE9BQU8sSUFBSW5CLElBQUksQ0FBQ1UsUUFBUSxDQUFDO0VBQzNCLENBQUMsTUFBTSxJQUFJQSxRQUFRLENBQUNTLElBQUksS0FBSyxNQUFNLEVBQUU7SUFDbkMsT0FBTyxJQUFJekIsV0FBVyxDQUFDZ0IsUUFBUSxDQUFDO0VBQ2xDLENBQUMsTUFBTSxJQUFJQSxRQUFRLENBQUNTLElBQUksS0FBSyxNQUFNLEVBQUU7SUFDbkMsT0FBTyxJQUFJbEIsSUFBSSxDQUFDUyxRQUFRLENBQUM7RUFDM0IsQ0FBQyxNQUFNLElBQUlBLFFBQVEsQ0FBQ1MsSUFBSSxLQUFLLFNBQVMsRUFBRTtJQUN0QyxPQUFPLElBQUl0QixPQUFPLENBQUNhLFFBQVEsQ0FBQztFQUM5QixDQUFDLE1BQU0sSUFBSUEsUUFBUSxDQUFDUyxJQUFJLEtBQUssUUFBUSxFQUFFO0lBQ3JDLE9BQU8sSUFBSXJCLE1BQU0sQ0FBQ1ksUUFBUSxDQUFDO0VBQzdCLENBQUMsTUFBTTtJQUNMLE1BQU0sSUFBSVUsS0FBSyxDQUFDLHFCQUFxQixHQUFHakIsSUFBSSxDQUFDZ0IsSUFBSSxDQUFDO0VBQ3BEO0FBQ0Y7QUFFQUUsTUFBTSxDQUFDQyxPQUFPLEdBQUdwQixRQUFRO0FBQ3pCQSxRQUFRLENBQUNxQixPQUFPLEdBQUdyQixRQUFRIiwiaWdub3JlTGlzdCI6W119