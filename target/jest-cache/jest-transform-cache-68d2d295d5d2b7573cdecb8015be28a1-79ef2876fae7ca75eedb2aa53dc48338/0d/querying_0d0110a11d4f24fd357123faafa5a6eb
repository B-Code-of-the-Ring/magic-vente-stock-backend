c80b57d77d9ba847f4bfa1cc12f42c04
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.findAll = exports.existsOne = exports.findOne = exports.findOneChild = exports.find = exports.filter = void 0;
var domhandler_1 = require("domhandler");
/**
 * Search a node and its children for nodes passing a test function. If `node` is not an array, it will be wrapped in one.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param node Node to search. Will be included in the result set if it matches.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */
function filter(test, node, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  return find(test, Array.isArray(node) ? node : [node], recurse, limit);
}
exports.filter = filter;
/**
 * Search an array of nodes and their children for nodes passing a test function.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes passing `test`.
 */
function find(test, nodes, recurse, limit) {
  var result = [];
  /** Stack of the arrays we are looking at. */
  var nodeStack = [nodes];
  /** Stack of the indices within the arrays. */
  var indexStack = [0];
  for (;;) {
    // First, check if the current array has any more elements to look at.
    if (indexStack[0] >= nodeStack[0].length) {
      // If we have no more arrays to look at, we are done.
      if (indexStack.length === 1) {
        return result;
      }
      // Otherwise, remove the current array from the stack.
      nodeStack.shift();
      indexStack.shift();
      // Loop back to the start to continue with the next array.
      continue;
    }
    var elem = nodeStack[0][indexStack[0]++];
    if (test(elem)) {
      result.push(elem);
      if (--limit <= 0) return result;
    }
    if (recurse && (0, domhandler_1.hasChildren)(elem) && elem.children.length > 0) {
      /*
       * Add the children to the stack. We are depth-first, so this is
       * the next array we look at.
       */
      indexStack.unshift(0);
      nodeStack.unshift(elem.children);
    }
  }
}
exports.find = find;
/**
 * Finds the first element inside of an array that matches a test function. This is an alias for `Array.prototype.find`.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns The first node in the array that passes `test`.
 * @deprecated Use `Array.prototype.find` directly.
 */
function findOneChild(test, nodes) {
  return nodes.find(test);
}
exports.findOneChild = findOneChild;
/**
 * Finds one element in a tree that passes a test.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Node or array of nodes to search.
 * @param recurse Also consider child nodes.
 * @returns The first node that passes `test`.
 */
function findOne(test, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }
  var elem = null;
  for (var i = 0; i < nodes.length && !elem; i++) {
    var node = nodes[i];
    if (!(0, domhandler_1.isTag)(node)) {
      continue;
    } else if (test(node)) {
      elem = node;
    } else if (recurse && node.children.length > 0) {
      elem = findOne(test, node.children, true);
    }
  }
  return elem;
}
exports.findOne = findOne;
/**
 * Checks if a tree of nodes contains at least one node passing a test.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns Whether a tree of nodes contains at least one node passing the test.
 */
function existsOne(test, nodes) {
  return nodes.some(function (checked) {
    return (0, domhandler_1.isTag)(checked) && (test(checked) || existsOne(test, checked.children));
  });
}
exports.existsOne = existsOne;
/**
 * Search an array of nodes and their children for elements passing a test function.
 *
 * Same as `find`, but limited to elements and with less options, leading to reduced complexity.
 *
 * @category Querying
 * @param test Function to test nodes on.
 * @param nodes Array of nodes to search.
 * @returns All nodes passing `test`.
 */
function findAll(test, nodes) {
  var result = [];
  var nodeStack = [nodes];
  var indexStack = [0];
  for (;;) {
    if (indexStack[0] >= nodeStack[0].length) {
      if (nodeStack.length === 1) {
        return result;
      }
      // Otherwise, remove the current array from the stack.
      nodeStack.shift();
      indexStack.shift();
      // Loop back to the start to continue with the next array.
      continue;
    }
    var elem = nodeStack[0][indexStack[0]++];
    if (!(0, domhandler_1.isTag)(elem)) continue;
    if (test(elem)) result.push(elem);
    if (elem.children.length > 0) {
      indexStack.unshift(0);
      nodeStack.unshift(elem.children);
    }
  }
}
exports.findAll = findAll;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb21oYW5kbGVyXzEiLCJyZXF1aXJlIiwiZmlsdGVyIiwidGVzdCIsIm5vZGUiLCJyZWN1cnNlIiwibGltaXQiLCJJbmZpbml0eSIsImZpbmQiLCJBcnJheSIsImlzQXJyYXkiLCJleHBvcnRzIiwibm9kZXMiLCJyZXN1bHQiLCJub2RlU3RhY2siLCJpbmRleFN0YWNrIiwibGVuZ3RoIiwic2hpZnQiLCJlbGVtIiwicHVzaCIsImhhc0NoaWxkcmVuIiwiY2hpbGRyZW4iLCJ1bnNoaWZ0IiwiZmluZE9uZUNoaWxkIiwiZmluZE9uZSIsImkiLCJpc1RhZyIsImV4aXN0c09uZSIsInNvbWUiLCJjaGVja2VkIiwiZmluZEFsbCJdLCJzb3VyY2VzIjpbImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYjU1L2RvbXV0aWxzLzk2Yzk4OWUxNTljOTgyMTg5NThmMzc1ZWEwNDIxMGYyZDFiNDNjMGMvc3JjL3F1ZXJ5aW5nLnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFFQTs7Ozs7Ozs7OztBQVVBLFNBQWdCQyxNQUFNQSxDQUNsQkMsSUFBZ0MsRUFDaENDLElBQXlCLEVBQ3pCQyxPQUFjLEVBQ2RDLEtBQWdCO0VBRGhCLElBQUFELE9BQUE7SUFBQUEsT0FBQSxPQUFjO0VBQUE7RUFDZCxJQUFBQyxLQUFBO0lBQUFBLEtBQUEsR0FBQUMsUUFBZ0I7RUFBQTtFQUVoQixPQUFPQyxJQUFJLENBQUNMLElBQUksRUFBRU0sS0FBSyxDQUFDQyxPQUFPLENBQUNOLElBQUksQ0FBQyxHQUFHQSxJQUFJLEdBQUcsQ0FBQ0EsSUFBSSxDQUFDLEVBQUVDLE9BQU8sRUFBRUMsS0FBSyxDQUFDO0FBQzFFO0FBUEFLLE9BQUEsQ0FBQVQsTUFBQSxHQUFBQSxNQUFBO0FBU0E7Ozs7Ozs7Ozs7QUFVQSxTQUFnQk0sSUFBSUEsQ0FDaEJMLElBQWdDLEVBQ2hDUyxLQUFnQixFQUNoQlAs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