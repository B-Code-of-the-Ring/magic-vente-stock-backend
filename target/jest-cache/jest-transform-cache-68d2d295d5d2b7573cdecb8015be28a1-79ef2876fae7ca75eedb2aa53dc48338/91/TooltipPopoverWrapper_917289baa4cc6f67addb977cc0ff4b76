b459f34178f9ee40ad6c94c2dcc72b45
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.propTypes = exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _PopperContent = _interopRequireDefault(require("./PopperContent"));
var _utils = require("./utils");
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
const propTypes = {
  children: _propTypes.default.oneOfType([_propTypes.default.node, _propTypes.default.func]),
  placement: _propTypes.default.oneOf(_utils.PopperPlacements),
  target: _utils.targetPropType.isRequired,
  container: _utils.targetPropType,
  isOpen: _propTypes.default.bool,
  disabled: _propTypes.default.bool,
  hideArrow: _propTypes.default.bool,
  boundariesElement: _propTypes.default.oneOfType([_propTypes.default.string, _utils.DOMElement]),
  className: _propTypes.default.string,
  innerClassName: _propTypes.default.string,
  arrowClassName: _propTypes.default.string,
  popperClassName: _propTypes.default.string,
  cssModule: _propTypes.default.object,
  toggle: _propTypes.default.func,
  autohide: _propTypes.default.bool,
  placementPrefix: _propTypes.default.string,
  delay: _propTypes.default.oneOfType([_propTypes.default.shape({
    show: _propTypes.default.number,
    hide: _propTypes.default.number
  }), _propTypes.default.number]),
  modifiers: _propTypes.default.array,
  strategy: _propTypes.default.string,
  offset: _propTypes.default.arrayOf(_propTypes.default.number),
  innerRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string, _propTypes.default.object]),
  trigger: _propTypes.default.string,
  fade: _propTypes.default.bool,
  flip: _propTypes.default.bool
};
exports.propTypes = propTypes;
const DEFAULT_DELAYS = {
  show: 0,
  hide: 50
};
const defaultProps = {
  isOpen: false,
  hideArrow: false,
  autohide: false,
  delay: DEFAULT_DELAYS,
  toggle: function () {},
  trigger: 'click',
  fade: true
};
function isInDOMSubtree(element, subtreeRoot) {
  return subtreeRoot && (element === subtreeRoot || subtreeRoot.contains(element));
}
function isInDOMSubtrees(element, subtreeRoots = []) {
  return subtreeRoots && subtreeRoots.length && subtreeRoots.filter(subTreeRoot => isInDOMSubtree(element, subTreeRoot))[0];
}
class TooltipPopoverWrapper extends _react.default.Component {
  constructor(props) {
    super(props);
    this._targets = [];
    this.currentTargetElement = null;
    this.addTargetEvents = this.addTargetEvents.bind(this);
    this.handleDocumentClick = this.handleDocumentClick.bind(this);
    this.removeTargetEvents = this.removeTargetEvents.bind(this);
    this.toggle = this.toggle.bind(this);
    this.showWithDelay = this.showWithDelay.bind(this);
    this.hideWithDelay = this.hideWithDelay.bind(this);
    this.onMouseOverTooltipContent = this.onMouseOverTooltipContent.bind(this);
    this.onMouseLeaveTooltipContent = this.onMouseLeaveTooltipContent.bind(this);
    this.show = this.show.bind(this);
    this.hide = this.hide.bind(this);
    this.onEscKeyDown = this.onEscKeyDown.bind(this);
    this.getRef = this.getRef.bind(this);
    this.state = {
      isOpen: props.isOpen
    };
    this._isMounted = false;
  }
  componentDidMount() {
    this._isMounted = true;
    this.updateTarget();
  }
  componentWillUnmount() {
    this._isMounted = false;
    this.removeTargetEvents();
    this._targets = null;
    this.clearShowTimeout();
    this.clearHideTimeout();
  }
  static getDerivedStateFromProps(props, state) {
    if (props.isOpen && !state.isOpen) {
      return {
        isOpen: props.isOpen
      };
    }
    return null;
  }
  handleDocumentClick(e) {
    const triggers = this.props.trigger.split(' ');
    if (triggers.indexOf('legacy') > -1 && (this.props.isOpen || isInDOMSubtrees(e.target, this._targets))) {
      if (this._hideTimeout) {
        this.clearHideTimeout();
      }
      if (this.props.isOpen && !isInDOMSubtree(e.target, this._popover)) {
        this.hideWithDelay(e);
      } else if (!this.props.isOpen) {
        this.showWithDelay(e);
      }
    } else if (triggers.indexOf('click') > -1 && isInDOMSubtrees(e.target, this._targets)) {
      if (this._hideTimeout) {
        this.clearHideTimeout();
      }
      if (!this.props.isOpen) {
        this.showWithDelay(e);
      } else {
        this.hideWithDelay(e);
      }
    }
  }
  onMouseOverTooltipContent() {
    if (this.props.trigger.indexOf('hover') > -1 && !this.props.autohide) {
      if (this._hideTimeout) {
        this.clearHideTimeout();
      }
      if (this.state.isOpen && !this.props.isOpen) {
        this.toggle();
      }
    }
  }
  onMouseLeaveTooltipContent(e) {
    if (this.props.trigger.indexOf('hover') > -1 && !this.props.autohide) {
      if (this._showTimeout) {
        this.clearShowTimeout();
      }
      e.persist();
      this._hideTimeout = setTimeout(this.hide.bind(this, e), this.getDelay('hide'));
    }
  }
  onEscKeyDown(e) {
    if (e.key === 'Escape') {
      this.hide(e);
    }
  }
  getRef(ref) {
    const {
      innerRef
    } = this.props;
    if (innerRef) {
      if (typeof innerRef === 'function') {
        innerRef(ref);
      } else if (typeof innerRef === 'object') {
        innerRef.current = ref;
      }
    }
    this._popover = ref;
  }
  getDelay(key) {
    const {
      delay
    } = this.props;
    if (typeof delay === 'object') {
      return isNaN(delay[key]) ? DEFAULT_DELAYS[key] : delay[key];
    }
    return delay;
  }
  getCurrentTarget(target) {
    if (!target) return null;
    const index = this._targets.indexOf(target);
    if (index >= 0) return this._targets[index];
    return this.getCurrentTarget(target.parentElement);
  }
  show(e) {
    if (!this.props.isOpen) {
      this.clearShowTimeout();
      this.currentTargetElement = e ? e.currentTarget || this.getCurrentTarget(e.target) : null;
      if (e && e.composedPath && typeof e.composedPath === 'function') {
        const path = e.composedPath();
        this.currentTargetElement = path && path[0] || this.currentTargetElement;
      }
      this.toggle(e);
    }
  }
  showWithDelay(e) {
    if (this._hideTimeout) {
      this.clearHideTimeout();
    }
    this._showTimeout = setTimeout(this.show.bind(this, e), this.getDelay('show'));
  }
  hide(e) {
    if (this.props.isOpen) {
      this.clearHideTimeout();
      this.currentTargetElement = null;
      this.toggle(e);
    }
  }
  hideWithDelay(e) {
    if (this._showTimeout) {
      this.clearShowTimeout();
    }
    this._hideTimeout = setTimeout(this.hide.bind(this, e), this.getDelay('hide'));
  }
  clearShowTimeout() {
    clearTimeout(this._showTimeout);
    this._showTimeout = undefined;
  }
  clearHideTimeout() {
    clearTimeout(this._hideTimeout);
    this._hideTimeout = undefined;
  }
  addEventOnTargets(type, handler, isBubble) {
    this._targets.forEach(target => {
      target.addEventListener(type, handler, isBubble);
    });
  }
  removeEventOnTargets(type, handler, isBubble) {
    this._targets.forEach(target => {
      target.removeEventListener(type, handler, isBubble);
    });
  }
  addTargetEvents() {
    if (this.props.trigger) {
      let triggers = this.props.trigger.split(' ');
      if (triggers.indexOf('manual') === -1) {
        if (triggers.indexOf('click') > -1 || triggers.indexOf('legacy') > -1) {
          document.addEventListener('click', this.handleDocumentClick, true);
        }
        if (this._targets && this._targets.length) {
          if (triggers.indexOf('hover') > -1) {
            this.addEventOnTargets('mouseover', this.showWithDelay, true);
            this.addEventOnTargets('mouseout', this.hideWithDelay, true);
          }
          if (triggers.indexOf('focus') > -1) {
            this.addEventOnTargets('focusin', this.show, true);
            this.addEventOnTargets('focusout', this.hide, true);
          }
          this.addEventOnTargets('keydown', this.onEscKeyDown, true);
        }
      }
    }
  }
  removeTargetEvents() {
    if (this._targets) {
      this.removeEventOnTargets('mouseover', this.showWithDelay, true);
      this.removeEventOnTargets('mouseout', this.hideWithDelay, true);
      this.removeEventOnTargets('keydown', this.onEscKeyDown, true);
      this.removeEventOnTargets('focusin', this.show, true);
      this.removeEventOnTargets('focusout', this.hide, true);
    }
    document.removeEventListener('click', this.handleDocumentClick, true);
  }
  updateTarget() {
    const newTarget = (0, _utils.getTarget)(this.props.target, true);
    if (newTarget !== this._targets) {
      this.removeTargetEvents();
      this._targets = newTarget ? Array.from(newTarget) : [];
      this.currentTargetElement = this.currentTargetElement || this._targets[0];
      this.addTargetEvents();
    }
  }
  toggle(e) {
    if (this.props.disabled || !this._isMounted) {
      return e && e.preventDefault();
    }
    return this.props.toggle(e);
  }
  render() {
    if (this.props.isOpen) {
      this.updateTarget();
    }
    const target = this.currentTargetElement || this._targets[0];
    if (!target) {
      return null;
    }
    const {
      className,
      cssModule,
      innerClassName,
      isOpen,
      hideArrow,
      boundariesElement,
      placement,
      placementPrefix,
      arrowClassName,
      popperClassName,
      container,
      modifiers,
      strategy,
      offset,
      fade,
      flip,
      children
    } = this.props;
    const attributes = (0, _utils.omit)(this.props, Object.keys(propTypes));
    const popperClasses = (0, _utils.mapToCssModules)(popperClassName, cssModule);
    const classes = (0, _utils.mapToCssModules)(innerClassName, cssModule);
    return /*#__PURE__*/_react.default.createElement(_PopperContent.default, {
      className: className,
      target: target,
      isOpen: isOpen,
      hideArrow: hideArrow,
      boundariesElement: boundariesElement,
      placement: placement,
      placementPrefix: placementPrefix,
      arrowClassName: arrowClassName,
      popperClassName: popperClasses,
      container: container,
      modifiers: modifiers,
      strategy: strategy,
      offset: offset,
      cssModule: cssModule,
      fade: fade,
      flip: flip
    }, ({
      update
    }) => /*#__PURE__*/_react.default.createElement("div", _extends({}, attributes, {
      ref: this.getRef,
      className: classes,
      role: "tooltip",
      onMouseOver: this.onMouseOverTooltipContent,
      onMouseLeave: this.onMouseLeaveTooltipContent,
      onKeyDown: this.onEscKeyDown
    }), typeof children === 'function' ? children({
      update
    }) : children));
  }
}
TooltipPopoverWrapper.propTypes = propTypes;
TooltipPopoverWrapper.defaultProps = defaultProps;
var _default = TooltipPopoverWrapper;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsInByb3BUeXBlcyIsImRlZmF1bHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfUG9wcGVyQ29udGVudCIsIl91dGlscyIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJjaGlsZHJlbiIsIm9uZU9mVHlwZSIsIm5vZGUiLCJmdW5jIiwicGxhY2VtZW50Iiwib25lT2YiLCJQb3BwZXJQbGFjZW1lbnRzIiwidGFyZ2V0UHJvcFR5cGUiLCJpc1JlcXVpcmVkIiwiY29udGFpbmVyIiwiaXNPcGVuIiwiYm9vbCIsImRpc2FibGVkIiwiaGlkZUFycm93IiwiYm91bmRhcmllc0VsZW1lbnQiLCJzdHJpbmciLCJET01FbGVtZW50IiwiY2xhc3NOYW1lIiwiaW5uZXJDbGFzc05hbWUiLCJhcnJvd0NsYXNzTmFtZSIsInBvcHBlckNsYXNzTmFtZSIsImNzc01vZHVsZSIsIm9iamVjdCIsInRvZ2dsZSIsImF1dG9oaWRlIiwicGxhY2VtZW50UHJlZml4IiwiZGVsYXkiLCJzaGFwZSIsInNob3ciLCJudW1iZXIiLCJoaWRlIiwibW9kaWZpZXJzIiwiYXJyYXkiLCJzdHJhdGVneSIsIm9mZnNldCIsImFycmF5T2YiLCJpbm5lclJlZiIsInRyaWdnZXIiLCJmYWRlIiwiZmxpcCIsIkRFRkFVTFRfREVMQVlTIiwiZGVmYXVsdFByb3BzIiwiaXNJbkRPTVN1YnRyZWUiLCJlbGVtZW50Iiwic3VidHJlZVJvb3QiLCJjb250YWlucyIsImlzSW5ET01TdWJ0cmVlcyIsInN1YnRyZWVSb290cyIsImZpbHRlciIsInN1YlRyZWVSb290IiwiVG9vbHRpcFBvcG92ZXJXcmFwcGVyIiwiQ29tcG9uZW50IiwiY29uc3RydWN0b3IiLCJwcm9wcyIsIl90YXJnZXRzIiwiY3VycmVudFRhcmdldEVsZW1lbnQiLCJhZGRUYXJnZXRFdmVudHMiLCJoYW5kbGVEb2N1bWVudENsaWNrIiwicmVtb3ZlVGFyZ2V0RXZlbnRzIiwic2hvd1dpdGhEZWxheSIsImhpZGVXaXRoRGVsYXkiLCJvbk1vdXNlT3ZlclRvb2x0aXBDb250ZW50Iiwib25Nb3VzZUxlYXZlVG9vbHRpcENvbnRlbnQiLCJvbkVzY0tleURvd24iLCJnZXRSZWYiLCJzdGF0ZSIsIl9pc01vdW50ZWQiLCJjb21wb25lbnREaWRNb3VudCIsInVwZGF0ZVRhcmdldCIsImNvbXBvbmVudFdpbGxVbm1vdW50IiwiY2xlYXJTaG93VGltZW91dCIsImNsZWFySGlkZVRpbWVvdXQiLCJnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMiLCJlIiwidHJpZ2dlcnMiLCJzcGxpdCIsImluZGV4T2YiLCJfaGlkZVRpbWVvdXQiLCJfcG9wb3ZlciIsIl9zaG93VGltZW91dCIsInBlcnNpc3QiLCJzZXRUaW1lb3V0IiwiZ2V0RGVsYXkiLCJyZWYiLCJjdXJyZW50IiwiaXNOYU4iLCJnZXRDdXJyZW50VGFyZ2V0IiwiaW5kZXgiLCJwYXJlbnRFbGVtZW50IiwiY3VycmVudFRhcmdldCIsImNvbXBvc2VkUGF0aCIsInBhdGgiLCJjbGVhclRpbWVvdXQiLCJ1bmRlZmluZWQiLCJhZGRFdmVudE9uVGFyZ2V0cyIsInR5cGUiLCJoYW5kbGVyIiwiaXNCdWJibGUiLCJmb3JFYWNoIiwiYWRkRXZlbnRMaXN0ZW5lciIsInJlbW92ZUV2ZW50T25UYXJnZXRzIiwicmVtb3ZlRXZlbnRMaXN0ZW5lciIsImRvY3VtZW50IiwibmV3VGFyZ2V0IiwiZ2V0VGFyZ2V0IiwiQXJyYXkiLCJmcm9tIiwicHJldmVudERlZmF1bHQiLCJyZW5kZXIiLCJhdHRyaWJ1dGVzIiwib21pdCIsImtleXMiLCJwb3BwZXJDbGFzc2VzIiwibWFwVG9Dc3NNb2R1bGVzIiwiY2xhc3NlcyIsImNyZWF0ZUVsZW1lbnQiLCJ1cGRhdGUiLCJyb2xlIiwib25Nb3VzZU92ZXIiLCJvbk1vdXNlTGVhdmUiLCJvbktleURvd24iLCJfZGVmYXVsdCJdLCJzb3VyY2VzIjpbIlRvb2x0aXBQb3BvdmVyV3JhcHBlci5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMucHJvcFR5cGVzID0gZXhwb3J0cy5kZWZhdWx0ID0gdm9pZCAwO1xudmFyIF9yZWFjdCA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInJlYWN0XCIpKTtcbnZhciBfcHJvcFR5cGVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwicHJvcC10eXBlc1wiKSk7XG52YXIgX1BvcHBlckNvbnRlbnQgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL1BvcHBlckNvbnRlbnRcIikpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xuZnVuY3Rpb24gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChvYmopIHsgcmV0dXJuIG9iaiAmJiBvYmouX19lc01vZHVsZSA/IG9iaiA6IHsgZGVmYXVsdDogb2JqIH07IH1cbmZ1bmN0aW9uIF9leHRlbmRzKCkgeyBfZXh0ZW5kcyA9IE9iamVjdC5hc3NpZ24gPyBPYmplY3QuYXNzaWduLmJpbmQoKSA6IGZ1bmN0aW9uICh0YXJnZXQpIHsgZm9yICh2YXIgaSA9IDE7IGkgPCBhcmd1bWVudHMubGVuZ3RoOyBpKyspIHsgdmFyIHNvdXJjZSA9IGFyZ3VtZW50c1tpXTsgZm9yICh2YXIga2V5IGluIHNvdXJjZSkgeyBpZiAoT2JqZWN0LnByb3RvdHlwZS5oYXNPd25Qcm9wZXJ0eS5jYWxsKHNvdXJjZSwga2V5KSkgeyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gfSByZXR1cm4gdGFyZ2V0OyB9OyByZXR1cm4gX2V4dGVuZHMuYXBwbHkodGhpcywgYXJndW1lbnRzKTsgfVxuY29uc3QgcHJvcFR5cGVzID0ge1xuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsIF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jXSksXG4gIHBsYWNlbWVudDogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mKF91dGlscy5Qb3BwZXJQbGFjZW1lbnRzKSxcbiAgdGFyZ2V0OiBfdXRpbHMudGFyZ2V0UHJvcFR5cGUuaXNSZXF1aXJlZCxcbiAgY29udGFpbmVyOiBfdXRpbHMudGFyZ2V0UHJvcFR5cGUsXG4gIGlzT3BlbjogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGRpc2FibGVkOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgaGlkZUFycm93OiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgYm91bmRhcmllc0VsZW1lbnQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF91dGlscy5ET01FbGVtZW50XSksXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgaW5uZXJDbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGFycm93Q2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBwb3BwZXJDbGFzc05hbWU6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGNzc01vZHVsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgdG9nZ2xlOiBfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYyxcbiAgYXV0b2hpZGU6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBwbGFjZW1lbnRQcmVmaXg6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIGRlbGF5OiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuc2hhcGUoe1xuICAgIHNob3c6IF9wcm9wVHlwZXMuZGVmYXVsdC5udW1iZXIsXG4gICAgaGlkZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlclxuICB9KSwgX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlcl0pLFxuICBtb2RpZmllcnM6IF9wcm9wVHlwZXMuZGVmYXVsdC5hcnJheSxcbiAgc3RyYXRlZ3k6IF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsXG4gIG9mZnNldDogX3Byb3BUeXBlcy5kZWZhdWx0LmFycmF5T2YoX3Byb3BUeXBlcy5kZWZhdWx0Lm51bWJlciksXG4gIGlubmVyUmVmOiBfcHJvcFR5cGVzLmRlZmF1bHQub25lT2ZUeXBlKFtfcHJvcFR5cGVzLmRlZmF1bHQuZnVuYywgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdF0pLFxuICB0cmlnZ2VyOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBmYWRlOiBfcHJvcFR5cGVzLmRlZmF1bHQuYm9vbCxcbiAgZmxpcDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2xcbn07XG5leHBvcnRzLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbmNvbnN0IERFRkFVTFRfREVMQVlTID0ge1xuICBzaG93OiAwLFxuICBoaWRlOiA1MFxufTtcbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgaXNPcGVuOiBmYWxzZSxcbiAgaGlkZUFycm93OiBmYWxzZSxcbiAgYXV0b2hpZGU6IGZhbHNlLFxuICBkZWxheTogREVGQVVMVF9ERUxBWVMsXG4gIHRvZ2dsZTogZnVuY3Rpb24gKCkge30sXG4gIHRyaWdnZXI6ICdjbGljaycsXG4gIGZhZGU6IHRydWVcbn07XG5mdW5jdGlvbiBpc0luRE9NU3VidHJlZShlbGVtZW50LCBzdWJ0cmVlUm9vdCkge1xuICByZXR1cm4gc3VidHJlZVJvb3QgJiYgKGVsZW1lbnQgPT09IHN1YnRyZWVSb290IHx8IHN1YnRyZWVSb290LmNvbnRhaW5zKGVsZW1lbnQpKTtcbn1cbmZ1bmN0aW9uIGlzSW5ET01TdWJ0cmVlcyhlbGVtZW50LCBzdWJ0cmVlUm9vdHMgPSBbXSkge1xuICByZXR1cm4gc3VidHJlZVJvb3RzICYmIHN1YnRyZWVSb290cy5sZW5ndGggJiYgc3VidHJlZVJvb3RzLmZpbHRlcihzdWJUcmVlUm9vdCA9PiBpc0luRE9NU3VidHJlZShlbGVtZW50LCBzdWJUcmVlUm9vdCkpWzBdO1xufVxuY2xhc3MgVG9vbHRpcFBvcG92ZXJXcmFwcGVyIGV4dGVuZHMgX3JlYWN0LmRlZmF1bHQuQ29tcG9uZW50IHtcbiAgY29uc3RydWN0b3IocHJvcHMpIHtcbiAgICBzdXBlcihwcm9wcyk7XG4gICAgdGhpcy5fdGFyZ2V0cyA9IFtdO1xuICAgIHRoaXMuY3VycmVudFRhcmdldEVsZW1lbnQgPSBudWxsO1xuICAgIHRoaXMuYWRkVGFyZ2V0RXZlbnRzID0gdGhpcy5hZGRUYXJnZXRFdmVudHMuYmluZCh0aGlzKTtcbiAgICB0aGlzLmhhbmRsZURvY3VtZW50Q2xpY2sgPSB0aGlzLmhhbmRsZURvY3VtZW50Q2xpY2suYmluZCh0aGlzKTtcbiAgICB0aGlzLnJlbW92ZVRhcmdldEV2ZW50cyA9IHRoaXMucmVtb3ZlVGFyZ2V0RXZlbnRzLmJpbmQodGhpcyk7XG4gICAgdGhpcy50b2dnbGUgPSB0aGlzLnRvZ2dsZS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuc2hvd1dpdGhEZWxheSA9IHRoaXMuc2hvd1dpdGhEZWxheS5iaW5kKHRoaXMpO1xuICAgIHRoaXMuaGlkZVdpdGhEZWxheSA9IHRoaXMuaGlkZVdpdGhEZWxheS5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZU92ZXJUb29sdGlwQ29udGVudCA9IHRoaXMub25Nb3VzZU92ZXJUb29sdGlwQ29udGVudC5iaW5kKHRoaXMpO1xuICAgIHRoaXMub25Nb3VzZUxlYXZlVG9vbHRpcENvbnRlbnQgPSB0aGlzLm9uTW91c2VMZWF2ZVRvb2x0aXBDb250ZW50LmJpbmQodGhpcyk7XG4gICAgdGhpcy5zaG93ID0gdGhpcy5zaG93LmJpbmQodGhpcyk7XG4gICAgdGhpcy5oaWRlID0gdGhpcy5oaWRlLmJpbmQodGhpcyk7XG4gICAgdGhpcy5vbkVzY0tleURvd24gPSB0aGlzLm9uRXNjS2V5RG93bi5iaW5kKHRoaXMpO1xuICAgIHRoaXMuZ2V0UmVmID0gdGhpcy5nZXRSZWYuYmluZCh0aGlzKTtcbiAgICB0aGlzLnN0YXRlID0ge1xuICAgICAgaXNPcGVuOiBwcm9wcy5pc09wZW5cbiAgICB9O1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IGZhbHNlO1xuICB9XG4gIGNvbXBvbmVudERpZE1vdW50KCkge1xuICAgIHRoaXMuX2lzTW91bnRlZCA9IHRydWU7XG4gICAgdGhpcy51cGRhdGVUYXJnZXQoKTtcbiAgfVxuICBjb21wb25lbnRXaWxsVW5tb3VudCgpIHtcbiAgICB0aGlzLl9pc01vdW50ZWQgPSBmYWxzZTtcbiAgICB0aGlzLnJlbW92ZVRhcmdldEV2ZW50cygpO1xuICAgIHRoaXMuX3RhcmdldHMgPSBudWxsO1xuICAgIHRoaXMuY2xlYXJTaG93VGltZW91dCgpO1xuICAgIHRoaXMuY2xlYXJIaWRlVGltZW91dCgpO1xuICB9XG4gIHN0YXRpYyBnZXREZXJpdmVkU3RhdGVGcm9tUHJvcHMocHJvcHMsIHN0YXRlKSB7XG4gICAgaWYgKHByb3BzLmlzT3BlbiAmJiAhc3RhdGUuaXNPcGVuKSB7XG4gICAgICByZXR1cm4ge1xuICAgICAgICBpc09wZW46IHByb3BzLmlzT3BlblxuICAgICAgfTtcbiAgICB9XG4gICAgcmV0dXJuIG51bGw7XG4gIH1cbiAgaGFuZGxlRG9jdW1lbnRDbGljayhlKSB7XG4gICAgY29uc3QgdHJpZ2dlcnMgPSB0aGlzLnByb3BzLnRyaWdnZXIuc3BsaXQoJyAnKTtcbiAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignbGVnYWN5JykgPiAtMSAmJiAodGhpcy5wcm9wcy5pc09wZW4gfHwgaXNJbkRPTVN1YnRyZWVzKGUudGFyZ2V0LCB0aGlzLl90YXJnZXRzKSkpIHtcbiAgICAgIGlmICh0aGlzLl9oaWRlVGltZW91dCkge1xuICAgICAgICB0aGlzLmNsZWFySGlkZVRpbWVvdXQoKTtcbiAgICAgIH1cbiAgICAgIGlmICh0aGlzLnByb3BzLmlzT3BlbiAmJiAhaXNJbkRPTVN1YnRyZWUoZS50YXJnZXQsIHRoaXMuX3BvcG92ZXIpKSB7XG4gICAgICAgIHRoaXMuaGlkZVdpdGhEZWxheShlKTtcbiAgICAgIH0gZWxzZSBpZiAoIXRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuc2hvd1dpdGhEZWxheShlKTtcbiAgICAgIH1cbiAgICB9IGVsc2UgaWYgKHRyaWdnZXJzLmluZGV4T2YoJ2NsaWNrJykgPiAtMSAmJiBpc0luRE9NU3VidHJlZXMoZS50YXJnZXQsIHRoaXMuX3RhcmdldHMpKSB7XG4gICAgICBpZiAodGhpcy5faGlkZVRpbWVvdXQpIHtcbiAgICAgICAgdGhpcy5jbGVhckhpZGVUaW1lb3V0KCk7XG4gICAgICB9XG4gICAgICBpZiAoIXRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICAgIHRoaXMuc2hvd1dpdGhEZWxheShlKTtcbiAgICAgIH0gZWxzZSB7XG4gICAgICAgIHRoaXMuaGlkZVdpdGhEZWxheShlKTtcbiAgICAgIH1cbiAgICB9XG4gIH1cbiAgb25Nb3VzZU92ZXJUb29sdGlwQ29udGVudCgpIHtcbiAgICBpZiAodGhpcy5wcm9wcy50cmlnZ2VyLmluZGV4T2YoJ2hvdmVyJykgPiAtMSAmJiAhdGhpcy5wcm9wcy5hdXRvaGlkZSkge1xuICAgICAgaWYgKHRoaXMuX2hpZGVUaW1lb3V0KSB7XG4gICAgICAgIHRoaXMuY2xlYXJIaWRlVGltZW91dCgpO1xuICAgICAgfVxuICAgICAgaWYgKHRoaXMuc3RhdGUuaXNPcGVuICYmICF0aGlzLnByb3BzLmlzT3Blbikge1xuICAgICAgICB0aGlzLnRvZ2dsZSgpO1xuICAgICAgfVxuICAgIH1cbiAgfVxuICBvbk1vdXNlTGVhdmVUb29sdGlwQ29udGVudChlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMudHJpZ2dlci5pbmRleE9mKCdob3ZlcicpID4gLTEgJiYgIXRoaXMucHJvcHMuYXV0b2hpZGUpIHtcbiAgICAgIGlmICh0aGlzLl9zaG93VGltZW91dCkge1xuICAgICAgICB0aGlzLmNsZWFyU2hvd1RpbWVvdXQoKTtcbiAgICAgIH1cbiAgICAgIGUucGVyc2lzdCgpO1xuICAgICAgdGhpcy5faGlkZVRpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuaGlkZS5iaW5kKHRoaXMsIGUpLCB0aGlzLmdldERlbGF5KCdoaWRlJykpO1xuICAgIH1cbiAgfVxuICBvbkVzY0tleURvd24oZSkge1xuICAgIGlmIChlLmtleSA9PT0gJ0VzY2FwZScpIHtcbiAgICAgIHRoaXMuaGlkZShlKTtcbiAgICB9XG4gIH1cbiAgZ2V0UmVmKHJlZikge1xuICAgIGNvbnN0IHtcbiAgICAgIGlubmVyUmVmXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgaWYgKGlubmVyUmVmKSB7XG4gICAgICBpZiAodHlwZW9mIGlubmVyUmVmID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGlubmVyUmVmKHJlZik7XG4gICAgICB9IGVsc2UgaWYgKHR5cGVvZiBpbm5lclJlZiA9PT0gJ29iamVjdCcpIHtcbiAgICAgICAgaW5uZXJSZWYuY3VycmVudCA9IHJlZjtcbiAgICAgIH1cbiAgICB9XG4gICAgdGhpcy5fcG9wb3ZlciA9IHJlZjtcbiAgfVxuICBnZXREZWxheShrZXkpIHtcbiAgICBjb25zdCB7XG4gICAgICBkZWxheVxuICAgIH0gPSB0aGlzLnByb3BzO1xuICAgIGlmICh0eXBlb2YgZGVsYXkgPT09ICdvYmplY3QnKSB7XG4gICAgICByZXR1cm4gaXNOYU4oZGVsYXlba2V5XSkgPyBERUZBVUxUX0RFTEFZU1trZXldIDogZGVsYXlba2V5XTtcbiAgICB9XG4gICAgcmV0dXJuIGRlbGF5O1xuICB9XG4gIGdldEN1cnJlbnRUYXJnZXQodGFyZ2V0KSB7XG4gICAgaWYgKCF0YXJnZXQpIHJldHVybiBudWxsO1xuICAgIGNvbnN0IGluZGV4ID0gdGhpcy5fdGFyZ2V0cy5pbmRleE9mKHRhcmdldCk7XG4gICAgaWYgKGluZGV4ID49IDApIHJldHVybiB0aGlzLl90YXJnZXRzW2luZGV4XTtcbiAgICByZXR1cm4gdGhpcy5nZXRDdXJyZW50VGFyZ2V0KHRhcmdldC5wYXJlbnRFbGVtZW50KTtcbiAgfVxuICBzaG93KGUpIHtcbiAgICBpZiAoIXRoaXMucHJvcHMuaXNPcGVuKSB7XG4gICAgICB0aGlzLmNsZWFyU2hvd1RpbWVvdXQoKTtcbiAgICAgIHRoaXMuY3VycmVudFRhcmdldEVsZW1lbnQgPSBlID8gZS5jdXJyZW50VGFyZ2V0IHx8IHRoaXMuZ2V0Q3VycmVudFRhcmdldChlLnRhcmdldCkgOiBudWxsO1xuICAgICAgaWYgKGUgJiYgZS5jb21wb3NlZFBhdGggJiYgdHlwZW9mIGUuY29tcG9zZWRQYXRoID09PSAnZnVuY3Rpb24nKSB7XG4gICAgICAgIGNvbnN0IHBhdGggPSBlLmNvbXBvc2VkUGF0aCgpO1xuICAgICAgICB0aGlzLmN1cnJlbnRUYXJnZXRFbGVtZW50ID0gcGF0aCAmJiBwYXRoWzBdIHx8IHRoaXMuY3VycmVudFRhcmdldEVsZW1lbnQ7XG4gICAgICB9XG4gICAgICB0aGlzLnRvZ2dsZShlKTtcbiAgICB9XG4gIH1cbiAgc2hvd1dpdGhEZWxheShlKSB7XG4gICAgaWYgKHRoaXMuX2hpZGVUaW1lb3V0KSB7XG4gICAgICB0aGlzLmNsZWFySGlkZVRpbWVvdXQoKTtcbiAgICB9XG4gICAgdGhpcy5fc2hvd1RpbWVvdXQgPSBzZXRUaW1lb3V0KHRoaXMuc2hvdy5iaW5kKHRoaXMsIGUpLCB0aGlzLmdldERlbGF5KCdzaG93JykpO1xuICB9XG4gIGhpZGUoZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmlzT3Blbikge1xuICAgICAgdGhpcy5jbGVhckhpZGVUaW1lb3V0KCk7XG4gICAgICB0aGlzLmN1cnJlbnRUYXJnZXRFbGVtZW50ID0gbnVsbDtcbiAgICAgIHRoaXMudG9nZ2xlKGUpO1xuICAgIH1cbiAgfVxuICBoaWRlV2l0aERlbGF5KGUpIHtcbiAgICBpZiAodGhpcy5fc2hvd1RpbWVvdXQpIHtcbiAgICAgIHRoaXMuY2xlYXJTaG93VGltZW91dCgpO1xuICAgIH1cbiAgICB0aGlzLl9oaWRlVGltZW91dCA9IHNldFRpbWVvdXQodGhpcy5oaWRlLmJpbmQodGhpcywgZSksIHRoaXMuZ2V0RGVsYXkoJ2hpZGUnKSk7XG4gIH1cbiAgY2xlYXJTaG93VGltZW91dCgpIHtcbiAgICBjbGVhclRpbWVvdXQodGhpcy5fc2hvd1RpbWVvdXQpO1xuICAgIHRoaXMuX3Nob3dUaW1lb3V0ID0gdW5kZWZpbmVkO1xuICB9XG4gIGNsZWFySGlkZVRpbWVvdXQoKSB7XG4gICAgY2xlYXJUaW1lb3V0KHRoaXMuX2hpZGVUaW1lb3V0KTtcbiAgICB0aGlzLl9oaWRlVGltZW91dCA9IHVuZGVmaW5lZDtcbiAgfVxuICBhZGRFdmVudE9uVGFyZ2V0cyh0eXBlLCBoYW5kbGVyLCBpc0J1YmJsZSkge1xuICAgIHRoaXMuX3RhcmdldHMuZm9yRWFjaCh0YXJnZXQgPT4ge1xuICAgICAgdGFyZ2V0LmFkZEV2ZW50TGlzdGVuZXIodHlwZSwgaGFuZGxlciwgaXNCdWJibGUpO1xuICAgIH0pO1xuICB9XG4gIHJlbW92ZUV2ZW50T25UYXJnZXRzKHR5cGUsIGhhbmRsZXIsIGlzQnViYmxlKSB7XG4gICAgdGhpcy5fdGFyZ2V0cy5mb3JFYWNoKHRhcmdldCA9PiB7XG4gICAgICB0YXJnZXQucmVtb3ZlRXZlbnRMaXN0ZW5lcih0eXBlLCBoYW5kbGVyLCBpc0J1YmJsZSk7XG4gICAgfSk7XG4gIH1cbiAgYWRkVGFyZ2V0RXZlbnRzKCkge1xuICAgIGlmICh0aGlzLnByb3BzLnRyaWdnZXIpIHtcbiAgICAgIGxldCB0cmlnZ2VycyA9IHRoaXMucHJvcHMudHJpZ2dlci5zcGxpdCgnICcpO1xuICAgICAgaWYgKHRyaWdnZXJzLmluZGV4T2YoJ21hbnVhbCcpID09PSAtMSkge1xuICAgICAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignY2xpY2snKSA+IC0xIHx8IHRyaWdnZXJzLmluZGV4T2YoJ2xlZ2FjeScpID4gLTEpIHtcbiAgICAgICAgICBkb2N1bWVudC5hZGRFdmVudExpc3RlbmVyKCdjbGljaycsIHRoaXMuaGFuZGxlRG9jdW1lbnRDbGljaywgdHJ1ZSk7XG4gICAgICAgIH1cbiAgICAgICAgaWYgKHRoaXMuX3RhcmdldHMgJiYgdGhpcy5fdGFyZ2V0cy5sZW5ndGgpIHtcbiAgICAgICAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignaG92ZXInKSA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEV2ZW50T25UYXJnZXRzKCdtb3VzZW92ZXInLCB0aGlzLnNob3dXaXRoRGVsYXksIHRydWUpO1xuICAgICAgICAgICAgdGhpcy5hZGRFdmVudE9uVGFyZ2V0cygnbW91c2VvdXQnLCB0aGlzLmhpZGVXaXRoRGVsYXksIHRydWUpO1xuICAgICAgICAgIH1cbiAgICAgICAgICBpZiAodHJpZ2dlcnMuaW5kZXhPZignZm9jdXMnKSA+IC0xKSB7XG4gICAgICAgICAgICB0aGlzLmFkZEV2ZW50T25UYXJnZXRzKCdmb2N1c2luJywgdGhpcy5zaG93LCB0cnVlKTtcbiAgICAgICAgICAgIHRoaXMuYWRkRXZlbnRPblRhcmdldHMoJ2ZvY3Vzb3V0JywgdGhpcy5oaWRlLCB0cnVlKTtcbiAgICAgICAgICB9XG4gICAgICAgICAgdGhpcy5hZGRFdmVudE9uVGFyZ2V0cygna2V5ZG93bicsIHRoaXMub25Fc2NLZXlEb3duLCB0cnVlKTtcbiAgICAgICAgfVxuICAgICAgfVxuICAgIH1cbiAgfVxuICByZW1vdmVUYXJnZXRFdmVudHMoKSB7XG4gICAgaWYgKHRoaXMuX3RhcmdldHMpIHtcbiAgICAgIHRoaXMucmVtb3ZlRXZlbnRPblRhcmdldHMoJ21vdXNlb3ZlcicsIHRoaXMuc2hvd1dpdGhEZWxheSwgdHJ1ZSk7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50T25UYXJnZXRzKCdtb3VzZW91dCcsIHRoaXMuaGlkZVdpdGhEZWxheSwgdHJ1ZSk7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50T25UYXJnZXRzKCdrZXlkb3duJywgdGhpcy5vbkVzY0tleURvd24sIHRydWUpO1xuICAgICAgdGhpcy5yZW1vdmVFdmVudE9uVGFyZ2V0cygnZm9jdXNpbicsIHRoaXMuc2hvdywgdHJ1ZSk7XG4gICAgICB0aGlzLnJlbW92ZUV2ZW50T25UYXJnZXRzKCdmb2N1c291dCcsIHRoaXMuaGlkZSwgdHJ1ZSk7XG4gICAgfVxuICAgIGRvY3VtZW50LnJlbW92ZUV2ZW50TGlzdGVuZXIoJ2NsaWNrJywgdGhpcy5oYW5kbGVEb2N1bWVudENsaWNrLCB0cnVlKTtcbiAgfVxuICB1cGRhdGVUYXJnZXQoKSB7XG4gICAgY29uc3QgbmV3VGFyZ2V0ID0gKDAsIF91dGlscy5nZXRUYXJnZXQpKHRoaXMucHJvcHMudGFyZ2V0LCB0cnVlKTtcbiAgICBpZiAobmV3VGFyZ2V0ICE9PSB0aGlzLl90YXJnZXRzKSB7XG4gICAgICB0aGlzLnJlbW92ZVRhcmdldEV2ZW50cygpO1xuICAgICAgdGhpcy5fdGFyZ2V0cyA9IG5ld1RhcmdldCA/IEFycmF5LmZyb20obmV3VGFyZ2V0KSA6IFtdO1xuICAgICAgdGhpcy5jdXJyZW50VGFyZ2V0RWxlbWVudCA9IHRoaXMuY3VycmVudFRhcmdldEVsZW1lbnQgfHwgdGhpcy5fdGFyZ2V0c1swXTtcbiAgICAgIHRoaXMuYWRkVGFyZ2V0RXZlbnRzKCk7XG4gICAgfVxuICB9XG4gIHRvZ2dsZShlKSB7XG4gICAgaWYgKHRoaXMucHJvcHMuZGlzYWJsZWQgfHwgIXRoaXMuX2lzTW91bnRlZCkge1xuICAgICAgcmV0dXJuIGUgJiYgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgIH1cbiAgICByZXR1cm4gdGhpcy5wcm9wcy50b2dnbGUoZSk7XG4gIH1cbiAgcmVuZGVyKCkge1xuICAgIGlmICh0aGlzLnByb3BzLmlzT3Blbikge1xuICAgICAgdGhpcy51cGRhdGVUYXJnZXQoKTtcbiAgICB9XG4gICAgY29uc3QgdGFyZ2V0ID0gdGhpcy5jdXJyZW50VGFyZ2V0RWxlbWVudCB8fCB0aGlzLl90YXJnZXRzWzBdO1xuICAgIGlmICghdGFyZ2V0KSB7XG4gICAgICByZXR1cm4gbnVsbDtcbiAgICB9XG4gICAgY29uc3Qge1xuICAgICAgY2xhc3NOYW1lLFxuICAgICAgY3NzTW9kdWxlLFxuICAgICAgaW5uZXJDbGFzc05hbWUsXG4gICAgICBpc09wZW4sXG4gICAgICBoaWRlQXJyb3csXG4gICAgICBib3VuZGFyaWVzRWxlbWVudCxcbiAgICAgIHBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudFByZWZpeCxcbiAgICAgIGFycm93Q2xhc3NOYW1lLFxuICAgICAgcG9wcGVyQ2xhc3NOYW1lLFxuICAgICAgY29udGFpbmVyLFxuICAgICAgbW9kaWZpZXJzLFxuICAgICAgc3RyYXRlZ3ksXG4gICAgICBvZmZzZXQsXG4gICAgICBmYWRlLFxuICAgICAgZmxpcCxcbiAgICAgIGNoaWxkcmVuXG4gICAgfSA9IHRoaXMucHJvcHM7XG4gICAgY29uc3QgYXR0cmlidXRlcyA9ICgwLCBfdXRpbHMub21pdCkodGhpcy5wcm9wcywgT2JqZWN0LmtleXMocHJvcFR5cGVzKSk7XG4gICAgY29uc3QgcG9wcGVyQ2xhc3NlcyA9ICgwLCBfdXRpbHMubWFwVG9Dc3NNb2R1bGVzKShwb3BwZXJDbGFzc05hbWUsIGNzc01vZHVsZSk7XG4gICAgY29uc3QgY2xhc3NlcyA9ICgwLCBfdXRpbHMubWFwVG9Dc3NNb2R1bGVzKShpbm5lckNsYXNzTmFtZSwgY3NzTW9kdWxlKTtcbiAgICByZXR1cm4gLyojX19QVVJFX18qL19yZWFjdC5kZWZhdWx0LmNyZWF0ZUVsZW1lbnQoX1BvcHBlckNvbnRlbnQuZGVmYXVsdCwge1xuICAgICAgY2xhc3NOYW1lOiBjbGFzc05hbWUsXG4gICAgICB0YXJnZXQ6IHRhcmdldCxcbiAgICAgIGlzT3BlbjogaXNPcGVuLFxuICAgICAgaGlkZUFycm93OiBoaWRlQXJyb3csXG4gICAgICBib3VuZGFyaWVzRWxlbWVudDogYm91bmRhcmllc0VsZW1lbnQsXG4gICAgICBwbGFjZW1lbnQ6IHBsYWNlbWVudCxcbiAgICAgIHBsYWNlbWVudFByZWZpeDogcGxhY2VtZW50UHJlZml4LFxuICAgICAgYXJyb3dDbGFzc05hbWU6IGFycm93Q2xhc3NOYW1lLFxuICAgICAgcG9wcGVyQ2xhc3NOYW1lOiBwb3BwZXJDbGFzc2VzLFxuICAgICAgY29udGFpbmVyOiBjb250YWluZXIsXG4gICAgICBtb2RpZmllcnM6IG1vZGlmaWVycyxcbiAgICAgIHN0cmF0ZWd5OiBzdHJhdGVneSxcbiAgICAgIG9mZnNldDogb2Zmc2V0LFxuICAgICAgY3NzTW9kdWxlOiBjc3NNb2R1bGUsXG4gICAgICBmYWRlOiBmYWRlLFxuICAgICAgZmxpcDogZmxpcFxuICAgIH0sICh7XG4gICAgICB1cGRhdGVcbiAgICB9KSA9PiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChcImRpdlwiLCBfZXh0ZW5kcyh7fSwgYXR0cmlidXRlcywge1xuICAgICAgcmVmOiB0aGlzLmdldFJlZixcbiAgICAgIGNsYXNzTmFtZTogY2xhc3NlcyxcbiAgICAgIHJvbGU6IFwidG9vbHRpcFwiLFxuICAgICAgb25Nb3VzZU92ZXI6IHRoaXMub25Nb3VzZU92ZXJUb29sdGlwQ29udGVudCxcbiAgICAgIG9uTW91c2VMZWF2ZTogdGhpcy5vbk1vdXNlTGVhdmVUb29sdGlwQ29udGVudCxcbiAgICAgIG9uS2V5RG93bjogdGhpcy5vbkVzY0tleURvd25cbiAgICB9KSwgdHlwZW9mIGNoaWxkcmVuID09PSAnZnVuY3Rpb24nID8gY2hpbGRyZW4oe1xuICAgICAgdXBkYXRlXG4gICAgfSkgOiBjaGlsZHJlbikpO1xuICB9XG59XG5Ub29sdGlwUG9wb3ZlcldyYXBwZXIucHJvcFR5cGVzID0gcHJvcFR5cGVzO1xuVG9vbHRpcFBvcG92ZXJXcmFwcGVyLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbnZhciBfZGVmYXVsdCA9IFRvb2x0aXBQb3BvdmVyV3JhcHBlcjtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLFNBQVMsR0FBR0YsT0FBTyxDQUFDRyxPQUFPLEdBQUcsS0FBSyxDQUFDO0FBQzVDLElBQUlDLE1BQU0sR0FBR0Msc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxPQUFPLENBQUMsQ0FBQztBQUNyRCxJQUFJQyxVQUFVLEdBQUdGLHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDOUQsSUFBSUUsY0FBYyxHQUFHSCxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLGlCQUFpQixDQUFDLENBQUM7QUFDdkUsSUFBSUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQy9CLFNBQVNELHNCQUFzQkEsQ0FBQ0ssR0FBRyxFQUFFO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVUsR0FBR0QsR0FBRyxHQUFHO0lBQUVQLE9BQU8sRUFBRU87RUFBSSxDQUFDO0FBQUU7QUFDOUYsU0FBU0UsUUFBUUEsQ0FBQSxFQUFHO0VBQUVBLFFBQVEsR0FBR2QsTUFBTSxDQUFDZSxNQUFNLEdBQUdmLE1BQU0sQ0FBQ2UsTUFBTSxDQUFDQyxJQUFJLENBQUMsQ0FBQyxHQUFHLFVBQVVDLE1BQU0sRUFBRTtJQUFFLEtBQUssSUFBSUMsQ0FBQyxHQUFHLENBQUMsRUFBRUEsQ0FBQyxHQUFHQyxTQUFTLENBQUNDLE1BQU0sRUFBRUYsQ0FBQyxFQUFFLEVBQUU7TUFBRSxJQUFJRyxNQUFNLEdBQUdGLFNBQVMsQ0FBQ0QsQ0FBQyxDQUFDO01BQUUsS0FBSyxJQUFJSSxHQUFHLElBQUlELE1BQU0sRUFBRTtRQUFFLElBQUlyQixNQUFNLENBQUN1QixTQUFTLENBQUNDLGNBQWMsQ0FBQ0MsSUFBSSxDQUFDSixNQUFNLEVBQUVDLEdBQUcsQ0FBQyxFQUFFO1VBQUVMLE1BQU0sQ0FBQ0ssR0FBRyxDQUFDLEdBQUdELE1BQU0sQ0FBQ0MsR0FBRyxDQUFDO1FBQUU7TUFBRTtJQUFFO0lBQUUsT0FBT0wsTUFBTTtFQUFFLENBQUM7RUFBRSxPQUFPSCxRQUFRLENBQUNZLEtBQUssQ0FBQyxJQUFJLEVBQUVQLFNBQVMsQ0FBQztBQUFFO0FBQ2xWLE1BQU1mLFNBQVMsR0FBRztFQUNoQnVCLFFBQVEsRUFBRWxCLFVBQVUsQ0FBQ0osT0FBTyxDQUFDdUIsU0FBUyxDQUFDLENBQUNuQixVQUFVLENBQUNKLE9BQU8sQ0FBQ3dCLElBQUksRUFBRXBCLFVBQVUsQ0FBQ0osT0FBTyxDQUFDeUIsSUFBSSxDQUFDLENBQUM7RUFDMUZDLFNBQVMsRUFBRXRCLFVBQVUsQ0FBQ0osT0FBTyxDQUFDMkIsS0FBSyxDQUFDckIsTUFBTSxDQUFDc0IsZ0JBQWdCLENBQUM7RUFDNURoQixNQUFNLEVBQUVOLE1BQU0sQ0FBQ3VCLGNBQWMsQ0FBQ0MsVUFBVTtFQUN4Q0MsU0FBUyxFQUFFekIsTUFBTSxDQUFDdUIsY0FBYztFQUNoQ0csTUFBTSxFQUFFNUIsVUFBVSxDQUFDSixPQUFPLENBQUNpQyxJQUFJO0VBQy9CQyxRQUFRLEVBQUU5QixVQUFVLENBQUNKLE9BQU8sQ0FBQ2lDLElBQUk7RUFDakNFLFNBQVMsRUFBRS9CLFVBQVUsQ0FBQ0osT0FBTyxDQUFDaUMsSUFBSTtFQUNsQ0csaUJBQWlCLEVBQUVoQyxVQUFVLENBQUNKLE9BQU8sQ0FBQ3VCLFNBQVMsQ0FBQyxDQUFDbkIsVUFBVSxDQUFDSixPQUFPLENBQUNxQyxNQUFNLEVBQUUvQixNQUFNLENBQUNnQyxVQUFVLENBQUMsQ0FBQztFQUMvRkMsU0FBUyxFQUFFbkMsVUFBVSxDQUFDSixPQUFPLENBQUNxQyxNQUFNO0VBQ3BDRyxjQUFjLEVBQUVwQyxVQUFVLENBQUNKLE9BQU8sQ0FBQ3FDLE1BQU07RUFDekNJLGNBQWMsRUFBRXJDLFVBQVUsQ0FBQ0osT0FBTyxDQUFDcUMsTUFBTTtFQUN6Q0ssZUFBZSxFQUFFdEMsVUFBVSxDQUFDSixPQUFPLENBQUNxQyxNQUFNO0VBQzFDTSxTQUFTLEVBQUV2QyxVQUFVLENBQUNKLE9BQU8sQ0FBQzRDLE1BQU07RUFDcENDLE1BQU0sRUFBRXpDLFVBQVUsQ0FBQ0osT0FBTyxDQUFDeUIsSUFBSTtFQUMvQnFCLFFBQVEsRUFBRTFDLFVBQVUsQ0FBQ0osT0FBTyxDQUFDaUMsSUFBSTtFQUNqQ2MsZUFBZSxFQUFFM0MsVUFBVSxDQUFDSixPQUFPLENBQUNxQyxNQUFNO0VBQzFDVyxLQUFLLEVBQUU1QyxVQUFVLENBQUNKLE9BQU8sQ0FBQ3VCLFNBQVMsQ0FBQyxDQUFDbkIsVUFBVSxDQUFDSixPQUFPLENBQUNpRCxLQUFLLENBQUM7SUFDNURDLElBQUksRUFBRTlDLFVBQVUsQ0FBQ0osT0FBTyxDQUFDbUQsTUFBTTtJQUMvQkMsSUFBSSxFQUFFaEQsVUFBVSxDQUFDSixPQUFPLENBQUNtRDtFQUMzQixDQUFDLENBQUMsRUFBRS9DLFVBQVUsQ0FBQ0osT0FBTyxDQUFDbUQsTUFBTSxDQUFDLENBQUM7RUFDL0JFLFNBQVMsRUFBRWpELFVBQVUsQ0FBQ0osT0FBTyxDQUFDc0QsS0FBSztFQUNuQ0MsUUFBUSxFQUFFbkQsVUFBVSxDQUFDSixPQUFPLENBQUNxQyxNQUFNO0VBQ25DbUIsTUFBTSxFQUFFcEQsVUFBVSxDQUFDSixPQUFPLENBQUN5RCxPQUFPLENBQUNyRCxVQUFVLENBQUNKLE9BQU8sQ0FBQ21ELE1BQU0sQ0FBQztFQUM3RE8sUUFBUSxFQUFFdEQsVUFBVSxDQUFDSixPQUFPLENBQUN1QixTQUFTLENBQUMsQ0FBQ25CLFVBQVUsQ0FBQ0osT0FBTyxDQUFDeUIsSUFBSSxFQUFFckIsVUFBVSxDQUFDSixPQUFPLENBQUNxQyxNQUFNLEVBQUVqQyxVQUFVLENBQUNKLE9BQU8sQ0FBQzRDLE1BQU0sQ0FBQyxDQUFDO0VBQ3ZIZSxPQUFPLEVBQUV2RCxVQUFVLENBQUNKLE9BQU8sQ0FBQ3FDLE1BQU07RUFDbEN1QixJQUFJLEVBQUV4RCxVQUFVLENBQUNKLE9BQU8sQ0FBQ2lDLElBQUk7RUFDN0I0QixJQUFJLEVBQUV6RCxVQUFVLENBQUNKLE9BQU8sQ0FBQ2lDO0FBQzNCLENBQUM7QUFDRHBDLE9BQU8sQ0FBQ0UsU0FBUyxHQUFHQSxTQUFTO0FBQzdCLE1BQU0rRCxjQUFjLEdBQUc7RUFDckJaLElBQUksRUFBRSxDQUFDO0VBQ1BFLElBQUksRUFBRTtBQUNSLENBQUM7QUFDRCxNQUFNVyxZQUFZLEdBQUc7RUFDbkIvQixNQUFNLEVBQUUsS0FBSztFQUNiRyxTQUFTLEVBQUUsS0FBSztFQUNoQlcsUUFBUSxFQUFFLEtBQUs7RUFDZkUsS0FBSyxFQUFFYyxjQUFjO0VBQ3JCakIsTUFBTSxFQUFFLFNBQUFBLENBQUEsRUFBWSxDQUFDLENBQUM7RUFDdEJjLE9BQU8sRUFBRSxPQUFPO0VBQ2hCQyxJQUFJLEVBQUU7QUFDUixDQUFDO0FBQ0QsU0FBU0ksY0FBY0EsQ0FBQ0MsT0FBTyxFQUFFQyxXQUFXLEVBQUU7RUFDNUMsT0FBT0EsV0FBVyxLQUFLRCxPQUFPLEtBQUtDLFdBQVcsSUFBSUEsV0FBVyxDQUFDQyxRQUFRLENBQUNGLE9BQU8sQ0FBQyxDQUFDO0FBQ2xGO0FBQ0EsU0FBU0csZUFBZUEsQ0FBQ0gsT0FBTyxFQUFFSSxZQUFZLEdBQUcsRUFBRSxFQUFFO0VBQ25ELE9BQU9BLFlBQVksSUFBSUEsWUFBWSxDQUFDdEQsTUFBTSxJQUFJc0QsWUFBWSxDQUFDQyxNQUFNLENBQUNDLFdBQVcsSUFBSVAsY0FBYyxDQUFDQyxPQUFPLEVBQUVNLFdBQVcsQ0FBQyxDQUFDLENBQUMsQ0FBQyxDQUFDO0FBQzNIO0FBQ0EsTUFBTUMscUJBQXFCLFNBQVN2RSxNQUFNLENBQUNELE9BQU8sQ0FBQ3lFLFNBQVMsQ0FBQztFQUMzREMsV0FBV0EsQ0FBQ0MsS0FBSyxFQUFFO0lBQ2pCLEtBQUssQ0FBQ0EsS0FBSyxDQUFDO0lBQ1osSUFBSSxDQUFDQyxRQUFRLEdBQUcsRUFBRTtJQUNsQixJQUFJLENBQUNDLG9CQUFvQixHQUFHLElBQUk7SUFDaEMsSUFBSSxDQUFDQyxlQUFlLEdBQUcsSUFBSSxDQUFDQSxlQUFlLENBQUNuRSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ3RELElBQUksQ0FBQ29FLG1CQUFtQixHQUFHLElBQUksQ0FBQ0EsbUJBQW1CLENBQUNwRSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzlELElBQUksQ0FBQ3FFLGtCQUFrQixHQUFHLElBQUksQ0FBQ0Esa0JBQWtCLENBQUNyRSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzVELElBQUksQ0FBQ2tDLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sQ0FBQ2xDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDcEMsSUFBSSxDQUFDc0UsYUFBYSxHQUFHLElBQUksQ0FBQ0EsYUFBYSxDQUFDdEUsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNsRCxJQUFJLENBQUN1RSxhQUFhLEdBQUcsSUFBSSxDQUFDQSxhQUFhLENBQUN2RSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2xELElBQUksQ0FBQ3dFLHlCQUF5QixHQUFHLElBQUksQ0FBQ0EseUJBQXlCLENBQUN4RSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzFFLElBQUksQ0FBQ3lFLDBCQUEwQixHQUFHLElBQUksQ0FBQ0EsMEJBQTBCLENBQUN6RSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQzVFLElBQUksQ0FBQ3VDLElBQUksR0FBRyxJQUFJLENBQUNBLElBQUksQ0FBQ3ZDLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDaEMsSUFBSSxDQUFDeUMsSUFBSSxHQUFHLElBQUksQ0FBQ0EsSUFBSSxDQUFDekMsSUFBSSxDQUFDLElBQUksQ0FBQztJQUNoQyxJQUFJLENBQUMwRSxZQUFZLEdBQUcsSUFBSSxDQUFDQSxZQUFZLENBQUMxRSxJQUFJLENBQUMsSUFBSSxDQUFDO0lBQ2hELElBQUksQ0FBQzJFLE1BQU0sR0FBRyxJQUFJLENBQUNBLE1BQU0sQ0FBQzNFLElBQUksQ0FBQyxJQUFJLENBQUM7SUFDcEMsSUFBSSxDQUFDNEUsS0FBSyxHQUFHO01BQ1h2RCxNQUFNLEVBQUUyQyxLQUFLLENBQUMzQztJQUNoQixDQUFDO0lBQ0QsSUFBSSxDQUFDd0QsVUFBVSxHQUFHLEtBQUs7RUFDekI7RUFDQUMsaUJBQWlCQSxDQUFBLEVBQUc7SUFDbEIsSUFBSSxDQUFDRCxVQUFVLEdBQUcsSUFBSTtJQUN0QixJQUFJLENBQUNFLFlBQVksQ0FBQyxDQUFDO0VBQ3JCO0VBQ0FDLG9CQUFvQkEsQ0FBQSxFQUFHO0lBQ3JCLElBQUksQ0FBQ0gsVUFBVSxHQUFHLEtBQUs7SUFDdkIsSUFBSSxDQUFDUixrQkFBa0IsQ0FBQyxDQUFDO0lBQ3pCLElBQUksQ0FBQ0osUUFBUSxHQUFHLElBQUk7SUFDcEIsSUFBSSxDQUFDZ0IsZ0JBQWdCLENBQUMsQ0FBQztJQUN2QixJQUFJLENBQUNDLGdCQUFnQixDQUFDLENBQUM7RUFDekI7RUFDQSxPQUFPQyx3QkFBd0JBLENBQUNuQixLQUFLLEVBQUVZLEtBQUssRUFBRTtJQUM1QyxJQUFJWixLQUFLLENBQUMzQyxNQUFNLElBQUksQ0FBQ3VELEtBQUssQ0FBQ3ZELE1BQU0sRUFBRTtNQUNqQyxPQUFPO1FBQ0xBLE1BQU0sRUFBRTJDLEtBQUssQ0FBQzNDO01BQ2hCLENBQUM7SUFDSDtJQUNBLE9BQU8sSUFBSTtFQUNiO0VBQ0ErQyxtQkFBbUJBLENBQUNnQixDQUFDLEVBQUU7SUFDckIsTUFBTUMsUUFBUSxHQUFHLElBQUksQ0FBQ3JCLEtBQUssQ0FBQ2hCLE9BQU8sQ0FBQ3NDLEtBQUssQ0FBQyxHQUFHLENBQUM7SUFDOUMsSUFBSUQsUUFBUSxDQUFDRSxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEtBQUssSUFBSSxDQUFDdkIsS0FBSyxDQUFDM0MsTUFBTSxJQUFJb0MsZUFBZSxDQUFDMkIsQ0FBQyxDQUFDbkYsTUFBTSxFQUFFLElBQUksQ0FBQ2dFLFFBQVEsQ0FBQyxDQUFDLEVBQUU7TUFDdEcsSUFBSSxJQUFJLENBQUN1QixZQUFZLEVBQUU7UUFDckIsSUFBSSxDQUFDTixnQkFBZ0IsQ0FBQyxDQUFDO01BQ3pCO01BQ0EsSUFBSSxJQUFJLENBQUNsQixLQUFLLENBQUMzQyxNQUFNLElBQUksQ0FBQ2dDLGNBQWMsQ0FBQytCLENBQUMsQ0FBQ25GLE1BQU0sRUFBRSxJQUFJLENBQUN3RixRQUFRLENBQUMsRUFBRTtRQUNqRSxJQUFJLENBQUNsQixhQUFhLENBQUNhLENBQUMsQ0FBQztNQUN2QixDQUFDLE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQ3BCLEtBQUssQ0FBQzNDLE1BQU0sRUFBRTtRQUM3QixJQUFJLENBQUNpRCxhQUFhLENBQUNjLENBQUMsQ0FBQztNQUN2QjtJQUNGLENBQUMsTUFBTSxJQUFJQyxRQUFRLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSTlCLGVBQWUsQ0FBQzJCLENBQUMsQ0FBQ25GLE1BQU0sRUFBRSxJQUFJLENBQUNnRSxRQUFRLENBQUMsRUFBRTtNQUNyRixJQUFJLElBQUksQ0FBQ3VCLFlBQVksRUFBRTtRQUNyQixJQUFJLENBQUNOLGdCQUFnQixDQUFDLENBQUM7TUFDekI7TUFDQSxJQUFJLENBQUMsSUFBSSxDQUFDbEIsS0FBSyxDQUFDM0MsTUFBTSxFQUFFO1FBQ3RCLElBQUksQ0FBQ2lELGFBQWEsQ0FBQ2MsQ0FBQyxDQUFDO01BQ3ZCLENBQUMsTUFBTTtRQUNMLElBQUksQ0FBQ2IsYUFBYSxDQUFDYSxDQUFDLENBQUM7TUFDdkI7SUFDRjtFQUNGO0VBQ0FaLHlCQUF5QkEsQ0FBQSxFQUFHO0lBQzFCLElBQUksSUFBSSxDQUFDUixLQUFLLENBQUNoQixPQUFPLENBQUN1QyxPQUFPLENBQUMsT0FBTyxDQUFDLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxJQUFJLENBQUN2QixLQUFLLENBQUM3QixRQUFRLEVBQUU7TUFDcEUsSUFBSSxJQUFJLENBQUNxRCxZQUFZLEVBQUU7UUFDckIsSUFBSSxDQUFDTixnQkFBZ0IsQ0FBQyxDQUFDO01BQ3pCO01BQ0EsSUFBSSxJQUFJLENBQUNOLEtBQUssQ0FBQ3ZELE1BQU0sSUFBSSxDQUFDLElBQUksQ0FBQzJDLEtBQUssQ0FBQzNDLE1BQU0sRUFBRTtRQUMzQyxJQUFJLENBQUNhLE1BQU0sQ0FBQyxDQUFDO01BQ2Y7SUFDRjtFQUNGO0VBQ0F1QywwQkFBMEJBLENBQUNXLENBQUMsRUFBRTtJQUM1QixJQUFJLElBQUksQ0FBQ3BCLEtBQUssQ0FBQ2hCLE9BQU8sQ0FBQ3VDLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSSxDQUFDLElBQUksQ0FBQ3ZCLEtBQUssQ0FBQzdCLFFBQVEsRUFBRTtNQUNwRSxJQUFJLElBQUksQ0FBQ3VELFlBQVksRUFBRTtRQUNyQixJQUFJLENBQUNULGdCQUFnQixDQUFDLENBQUM7TUFDekI7TUFDQUcsQ0FBQyxDQUFDTyxPQUFPLENBQUMsQ0FBQztNQUNYLElBQUksQ0FBQ0gsWUFBWSxHQUFHSSxVQUFVLENBQUMsSUFBSSxDQUFDbkQsSUFBSSxDQUFDekMsSUFBSSxDQUFDLElBQUksRUFBRW9GLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0lBQ2hGO0VBQ0Y7RUFDQW5CLFlBQVlBLENBQUNVLENBQUMsRUFBRTtJQUNkLElBQUlBLENBQUMsQ0FBQzlFLEdBQUcsS0FBSyxRQUFRLEVBQUU7TUFDdEIsSUFBSSxDQUFDbUMsSUFBSSxDQUFDMkMsQ0FBQyxDQUFDO0lBQ2Q7RUFDRjtFQUNBVCxNQUFNQSxDQUFDbUIsR0FBRyxFQUFFO0lBQ1YsTUFBTTtNQUNKL0M7SUFDRixDQUFDLEdBQUcsSUFBSSxDQUFDaUIsS0FBSztJQUNkLElBQUlqQixRQUFRLEVBQUU7TUFDWixJQUFJLE9BQU9BLFFBQVEsS0FBSyxVQUFVLEVBQUU7UUFDbENBLFFBQVEsQ0FBQytDLEdBQUcsQ0FBQztNQUNmLENBQUMsTUFBTSxJQUFJLE9BQU8vQyxRQUFRLEtBQUssUUFBUSxFQUFFO1FBQ3ZDQSxRQUFRLENBQUNnRCxPQUFPLEdBQUdELEdBQUc7TUFDeEI7SUFDRjtJQUNBLElBQUksQ0FBQ0wsUUFBUSxHQUFHSyxHQUFHO0VBQ3JCO0VBQ0FELFFBQVFBLENBQUN2RixHQUFHLEVBQUU7SUFDWixNQUFNO01BQ0orQjtJQUNGLENBQUMsR0FBRyxJQUFJLENBQUMyQixLQUFLO0lBQ2QsSUFBSSxPQUFPM0IsS0FBSyxLQUFLLFFBQVEsRUFBRTtNQUM3QixPQUFPMkQsS0FBSyxDQUFDM0QsS0FBSyxDQUFDL0IsR0FBRyxDQUFDLENBQUMsR0FBRzZDLGNBQWMsQ0FBQzdDLEdBQUcsQ0FBQyxHQUFHK0IsS0FBSyxDQUFDL0IsR0FBRyxDQUFDO0lBQzdEO0lBQ0EsT0FBTytCLEtBQUs7RUFDZDtFQUNBNEQsZ0JBQWdCQSxDQUFDaEcsTUFBTSxFQUFFO0lBQ3ZCLElBQUksQ0FBQ0EsTUFBTSxFQUFFLE9BQU8sSUFBSTtJQUN4QixNQUFNaUcsS0FBSyxHQUFHLElBQUksQ0FBQ2pDLFFBQVEsQ0FBQ3NCLE9BQU8sQ0FBQ3RGLE1BQU0sQ0FBQztJQUMzQyxJQUFJaUcsS0FBSyxJQUFJLENBQUMsRUFBRSxPQUFPLElBQUksQ0FBQ2pDLFFBQVEsQ0FBQ2lDLEtBQUssQ0FBQztJQUMzQyxPQUFPLElBQUksQ0FBQ0QsZ0JBQWdCLENBQUNoRyxNQUFNLENBQUNrRyxhQUFhLENBQUM7RUFDcEQ7RUFDQTVELElBQUlBLENBQUM2QyxDQUFDLEVBQUU7SUFDTixJQUFJLENBQUMsSUFBSSxDQUFDcEIsS0FBSyxDQUFDM0MsTUFBTSxFQUFFO01BQ3RCLElBQUksQ0FBQzRELGdCQUFnQixDQUFDLENBQUM7TUFDdkIsSUFBSSxDQUFDZixvQkFBb0IsR0FBR2tCLENBQUMsR0FBR0EsQ0FBQyxDQUFDZ0IsYUFBYSxJQUFJLElBQUksQ0FBQ0gsZ0JBQWdCLENBQUNiLENBQUMsQ0FBQ25GLE1BQU0sQ0FBQyxHQUFHLElBQUk7TUFDekYsSUFBSW1GLENBQUMsSUFBSUEsQ0FBQyxDQUFDaUIsWUFBWSxJQUFJLE9BQU9qQixDQUFDLENBQUNpQixZQUFZLEtBQUssVUFBVSxFQUFFO1FBQy9ELE1BQU1DLElBQUksR0FBR2xCLENBQUMsQ0FBQ2lCLFlBQVksQ0FBQyxDQUFDO1FBQzdCLElBQUksQ0FBQ25DLG9CQUFvQixHQUFHb0MsSUFBSSxJQUFJQSxJQUFJLENBQUMsQ0FBQyxDQUFDLElBQUksSUFBSSxDQUFDcEMsb0JBQW9CO01BQzFFO01BQ0EsSUFBSSxDQUFDaEMsTUFBTSxDQUFDa0QsQ0FBQyxDQUFDO0lBQ2hCO0VBQ0Y7RUFDQWQsYUFBYUEsQ0FBQ2MsQ0FBQyxFQUFFO0lBQ2YsSUFBSSxJQUFJLENBQUNJLFlBQVksRUFBRTtNQUNyQixJQUFJLENBQUNOLGdCQUFnQixDQUFDLENBQUM7SUFDekI7SUFDQSxJQUFJLENBQUNRLFlBQVksR0FBR0UsVUFBVSxDQUFDLElBQUksQ0FBQ3JELElBQUksQ0FBQ3ZDLElBQUksQ0FBQyxJQUFJLEVBQUVvRixDQUFDLENBQUMsRUFBRSxJQUFJLENBQUNTLFFBQVEsQ0FBQyxNQUFNLENBQUMsQ0FBQztFQUNoRjtFQUNBcEQsSUFBSUEsQ0FBQzJDLENBQUMsRUFBRTtJQUNOLElBQUksSUFBSSxDQUFDcEIsS0FBSyxDQUFDM0MsTUFBTSxFQUFFO01BQ3JCLElBQUksQ0FBQzZELGdCQUFnQixDQUFDLENBQUM7TUFDdkIsSUFBSSxDQUFDaEIsb0JBQW9CLEdBQUcsSUFBSTtNQUNoQyxJQUFJLENBQUNoQyxNQUFNLENBQUNrRCxDQUFDLENBQUM7SUFDaEI7RUFDRjtFQUNBYixhQUFhQSxDQUFDYSxDQUFDLEVBQUU7SUFDZixJQUFJLElBQUksQ0FBQ00sWUFBWSxFQUFFO01BQ3JCLElBQUksQ0FBQ1QsZ0JBQWdCLENBQUMsQ0FBQztJQUN6QjtJQUNBLElBQUksQ0FBQ08sWUFBWSxHQUFHSSxVQUFVLENBQUMsSUFBSSxDQUFDbkQsSUFBSSxDQUFDekMsSUFBSSxDQUFDLElBQUksRUFBRW9GLENBQUMsQ0FBQyxFQUFFLElBQUksQ0FBQ1MsUUFBUSxDQUFDLE1BQU0sQ0FBQyxDQUFDO0VBQ2hGO0VBQ0FaLGdCQUFnQkEsQ0FBQSxFQUFHO0lBQ2pCc0IsWUFBWSxDQUFDLElBQUksQ0FBQ2IsWUFBWSxDQUFDO0lBQy9CLElBQUksQ0FBQ0EsWUFBWSxHQUFHYyxTQUFTO0VBQy9CO0VBQ0F0QixnQkFBZ0JBLENBQUEsRUFBRztJQUNqQnFCLFlBQVksQ0FBQyxJQUFJLENBQUNmLFlBQVksQ0FBQztJQUMvQixJQUFJLENBQUNBLFlBQVksR0FBR2dCLFNBQVM7RUFDL0I7RUFDQUMsaUJBQWlCQSxDQUFDQyxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFO0lBQ3pDLElBQUksQ0FBQzNDLFFBQVEsQ0FBQzRDLE9BQU8sQ0FBQzVHLE1BQU0sSUFBSTtNQUM5QkEsTUFBTSxDQUFDNkcsZ0JBQWdCLENBQUNKLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRLENBQUM7SUFDbEQsQ0FBQyxDQUFDO0VBQ0o7RUFDQUcsb0JBQW9CQSxDQUFDTCxJQUFJLEVBQUVDLE9BQU8sRUFBRUMsUUFBUSxFQUFFO0lBQzVDLElBQUksQ0FBQzNDLFFBQVEsQ0FBQzRDLE9BQU8sQ0FBQzVHLE1BQU0sSUFBSTtNQUM5QkEsTUFBTSxDQUFDK0csbUJBQW1CLENBQUNOLElBQUksRUFBRUMsT0FBTyxFQUFFQyxRQUFRLENBQUM7SUFDckQsQ0FBQyxDQUFDO0VBQ0o7RUFDQXpDLGVBQWVBLENBQUEsRUFBRztJQUNoQixJQUFJLElBQUksQ0FBQ0gsS0FBSyxDQUFDaEIsT0FBTyxFQUFFO01BQ3RCLElBQUlxQyxRQUFRLEdBQUcsSUFBSSxDQUFDckIsS0FBSyxDQUFDaEIsT0FBTyxDQUFDc0MsS0FBSyxDQUFDLEdBQUcsQ0FBQztNQUM1QyxJQUFJRCxRQUFRLENBQUNFLE9BQU8sQ0FBQyxRQUFRLENBQUMsS0FBSyxDQUFDLENBQUMsRUFBRTtRQUNyQyxJQUFJRixRQUFRLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsSUFBSUYsUUFBUSxDQUFDRSxPQUFPLENBQUMsUUFBUSxDQUFDLEdBQUcsQ0FBQyxDQUFDLEVBQUU7VUFDckUwQixRQUFRLENBQUNILGdCQUFnQixDQUFDLE9BQU8sRUFBRSxJQUFJLENBQUMxQyxtQkFBbUIsRUFBRSxJQUFJLENBQUM7UUFDcEU7UUFDQSxJQUFJLElBQUksQ0FBQ0gsUUFBUSxJQUFJLElBQUksQ0FBQ0EsUUFBUSxDQUFDN0QsTUFBTSxFQUFFO1VBQ3pDLElBQUlpRixRQUFRLENBQUNFLE9BQU8sQ0FBQyxPQUFPLENBQUMsR0FBRyxDQUFDLENBQUMsRUFBRTtZQUNsQyxJQUFJLENBQUNrQixpQkFBaUIsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDbkMsYUFBYSxFQUFFLElBQUksQ0FBQztZQUM3RCxJQUFJLENBQUNtQyxpQkFBaUIsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDbEMsYUFBYSxFQUFFLElBQUksQ0FBQztVQUM5RDtVQUNBLElBQUljLFFBQVEsQ0FBQ0UsT0FBTyxDQUFDLE9BQU8sQ0FBQyxHQUFHLENBQUMsQ0FBQyxFQUFFO1lBQ2xDLElBQUksQ0FBQ2tCLGlCQUFpQixDQUFDLFNBQVMsRUFBRSxJQUFJLENBQUNsRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1lBQ2xELElBQUksQ0FBQ2tFLGlCQUFpQixDQUFDLFVBQVUsRUFBRSxJQUFJLENBQUNoRSxJQUFJLEVBQUUsSUFBSSxDQUFDO1VBQ3JEO1VBQ0EsSUFBSSxDQUFDZ0UsaUJBQWlCLENBQUMsU0FBUyxFQUFFLElBQUksQ0FBQy9CLFlBQVksRUFBRSxJQUFJLENBQUM7UUFDNUQ7TUFDRjtJQUNGO0VBQ0Y7RUFDQUwsa0JBQWtCQSxDQUFBLEVBQUc7SUFDbkIsSUFBSSxJQUFJLENBQUNKLFFBQVEsRUFBRTtNQUNqQixJQUFJLENBQUM4QyxvQkFBb0IsQ0FBQyxXQUFXLEVBQUUsSUFBSSxDQUFDekMsYUFBYSxFQUFFLElBQUksQ0FBQztNQUNoRSxJQUFJLENBQUN5QyxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDeEMsYUFBYSxFQUFFLElBQUksQ0FBQztNQUMvRCxJQUFJLENBQUN3QyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDckMsWUFBWSxFQUFFLElBQUksQ0FBQztNQUM3RCxJQUFJLENBQUNxQyxvQkFBb0IsQ0FBQyxTQUFTLEVBQUUsSUFBSSxDQUFDeEUsSUFBSSxFQUFFLElBQUksQ0FBQztNQUNyRCxJQUFJLENBQUN3RSxvQkFBb0IsQ0FBQyxVQUFVLEVBQUUsSUFBSSxDQUFDdEUsSUFBSSxFQUFFLElBQUksQ0FBQztJQUN4RDtJQUNBd0UsUUFBUSxDQUFDRCxtQkFBbUIsQ0FBQyxPQUFPLEVBQUUsSUFBSSxDQUFDNUMsbUJBQW1CLEVBQUUsSUFBSSxDQUFDO0VBQ3ZFO0VBQ0FXLFlBQVlBLENBQUEsRUFBRztJQUNiLE1BQU1tQyxTQUFTLEdBQUcsQ0FBQyxDQUFDLEVBQUV2SCxNQUFNLENBQUN3SCxTQUFTLEVBQUUsSUFBSSxDQUFDbkQsS0FBSyxDQUFDL0QsTUFBTSxFQUFFLElBQUksQ0FBQztJQUNoRSxJQUFJaUgsU0FBUyxLQUFLLElBQUksQ0FBQ2pELFFBQVEsRUFBRTtNQUMvQixJQUFJLENBQUNJLGtCQUFrQixDQUFDLENBQUM7TUFDekIsSUFBSSxDQUFDSixRQUFRLEdBQUdpRCxTQUFTLEdBQUdFLEtBQUssQ0FBQ0MsSUFBSSxDQUFDSCxTQUFTLENBQUMsR0FBRyxFQUFFO01BQ3RELElBQUksQ0FBQ2hELG9CQUFvQixHQUFHLElBQUksQ0FBQ0Esb0JBQW9CLElBQUksSUFBSSxDQUFDRCxRQUFRLENBQUMsQ0FBQyxDQUFDO01BQ3pFLElBQUksQ0FBQ0UsZUFBZSxDQUFDLENBQUM7SUFDeEI7RUFDRjtFQUNBakMsTUFBTUEsQ0FBQ2tELENBQUMsRUFBRTtJQUNSLElBQUksSUFBSSxDQUFDcEIsS0FBSyxDQUFDekMsUUFBUSxJQUFJLENBQUMsSUFBSSxDQUFDc0QsVUFBVSxFQUFFO01BQzNDLE9BQU9PLENBQUMsSUFBSUEsQ0FBQyxDQUFDa0MsY0FBYyxDQUFDLENBQUM7SUFDaEM7SUFDQSxPQUFPLElBQUksQ0FBQ3RELEtBQUssQ0FBQzlCLE1BQU0sQ0FBQ2tELENBQUMsQ0FBQztFQUM3QjtFQUNBbUMsTUFBTUEsQ0FBQSxFQUFHO0lBQ1AsSUFBSSxJQUFJLENBQUN2RCxLQUFLLENBQUMzQyxNQUFNLEVBQUU7TUFDckIsSUFBSSxDQUFDMEQsWUFBWSxDQUFDLENBQUM7SUFDckI7SUFDQSxNQUFNOUUsTUFBTSxHQUFHLElBQUksQ0FBQ2lFLG9CQUFvQixJQUFJLElBQUksQ0FBQ0QsUUFBUSxDQUFDLENBQUMsQ0FBQztJQUM1RCxJQUFJLENBQUNoRSxNQUFNLEVBQUU7TUFDWCxPQUFPLElBQUk7SUFDYjtJQUNBLE1BQU07TUFDSjJCLFNBQVM7TUFDVEksU0FBUztNQUNUSCxjQUFjO01BQ2RSLE1BQU07TUFDTkcsU0FBUztNQUNUQyxpQkFBaUI7TUFDakJWLFNBQVM7TUFDVHFCLGVBQWU7TUFDZk4sY0FBYztNQUNkQyxlQUFlO01BQ2ZYLFNBQVM7TUFDVHNCLFNBQVM7TUFDVEUsUUFBUTtNQUNSQyxNQUFNO01BQ05JLElBQUk7TUFDSkMsSUFBSTtNQUNKdkM7SUFDRixDQUFDLEdBQUcsSUFBSSxDQUFDcUQsS0FBSztJQUNkLE1BQU13RCxVQUFVLEdBQUcsQ0FBQyxDQUFDLEVBQUU3SCxNQUFNLENBQUM4SCxJQUFJLEVBQUUsSUFBSSxDQUFDekQsS0FBSyxFQUFFaEYsTUFBTSxDQUFDMEksSUFBSSxDQUFDdEksU0FBUyxDQUFDLENBQUM7SUFDdkUsTUFBTXVJLGFBQWEsR0FBRyxDQUFDLENBQUMsRUFBRWhJLE1BQU0sQ0FBQ2lJLGVBQWUsRUFBRTdGLGVBQWUsRUFBRUMsU0FBUyxDQUFDO0lBQzdFLE1BQU02RixPQUFPLEdBQUcsQ0FBQyxDQUFDLEVBQUVsSSxNQUFNLENBQUNpSSxlQUFlLEVBQUUvRixjQUFjLEVBQUVHLFNBQVMsQ0FBQztJQUN0RSxPQUFPLGFBQWExQyxNQUFNLENBQUNELE9BQU8sQ0FBQ3lJLGFBQWEsQ0FBQ3BJLGNBQWMsQ0FBQ0wsT0FBTyxFQUFFO01BQ3ZFdUMsU0FBUyxFQUFFQSxTQUFTO01BQ3BCM0IsTUFBTSxFQUFFQSxNQUFNO01BQ2RvQixNQUFNLEVBQUVBLE1BQU07TUFDZEcsU0FBUyxFQUFFQSxTQUFTO01BQ3BCQyxpQkFBaUIsRUFBRUEsaUJBQWlCO01BQ3BDVixTQUFTLEVBQUVBLFNBQVM7TUFDcEJxQixlQUFlLEVBQUVBLGVBQWU7TUFDaENOLGNBQWMsRUFBRUEsY0FBYztNQUM5QkMsZUFBZSxFQUFFNEYsYUFBYTtNQUM5QnZHLFNBQVMsRUFBRUEsU0FBUztNQUNwQnNCLFNBQVMsRUFBRUEsU0FBUztNQUNwQkUsUUFBUSxFQUFFQSxRQUFRO01BQ2xCQyxNQUFNLEVBQUVBLE1BQU07TUFDZGIsU0FBUyxFQUFFQSxTQUFTO01BQ3BCaUIsSUFBSSxFQUFFQSxJQUFJO01BQ1ZDLElBQUksRUFBRUE7SUFDUixDQUFDLEVBQUUsQ0FBQztNQUNGNkU7SUFDRixDQUFDLEtBQUssYUFBYXpJLE1BQU0sQ0FBQ0QsT0FBTyxDQUFDeUksYUFBYSxDQUFDLEtBQUssRUFBRWhJLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTBILFVBQVUsRUFBRTtNQUM5RTFCLEdBQUcsRUFBRSxJQUFJLENBQUNuQixNQUFNO01BQ2hCL0MsU0FBUyxFQUFFaUcsT0FBTztNQUNsQkcsSUFBSSxFQUFFLFNBQVM7TUFDZkMsV0FBVyxFQUFFLElBQUksQ0FBQ3pELHlCQUF5QjtNQUMzQzBELFlBQVksRUFBRSxJQUFJLENBQUN6RCwwQkFBMEI7TUFDN0MwRCxTQUFTLEVBQUUsSUFBSSxDQUFDekQ7SUFDbEIsQ0FBQyxDQUFDLEVBQUUsT0FBTy9ELFFBQVEsS0FBSyxVQUFVLEdBQUdBLFFBQVEsQ0FBQztNQUM1Q29IO0lBQ0YsQ0FBQyxDQUFDLEdBQUdwSCxRQUFRLENBQUMsQ0FBQztFQUNqQjtBQUNGO0FBQ0FrRCxxQkFBcUIsQ0FBQ3pFLFNBQVMsR0FBR0EsU0FBUztBQUMzQ3lFLHFCQUFxQixDQUFDVCxZQUFZLEdBQUdBLFlBQVk7QUFDakQsSUFBSWdGLFFBQVEsR0FBR3ZFLHFCQUFxQjtBQUNwQzNFLE9BQU8sQ0FBQ0csT0FBTyxHQUFHK0ksUUFBUSIsImlnbm9yZUxpc3QiOltdfQ==