2263a6ae01f7ae1a22c5bb68cb7f574a
/* -*- Mode: js; js-indent-level: 2; -*- */
/*
 * Copyright 2011 Mozilla Foundation and contributors
 * Licensed under the New BSD license. See LICENSE or:
 * http://opensource.org/licenses/BSD-3-Clause
 */

var intToCharMap = 'ABCDEFGHIJKLMNOPQRSTUVWXYZabcdefghijklmnopqrstuvwxyz0123456789+/'.split('');

/**
 * Encode an integer in the range of 0 to 63 to a single base 64 digit.
 */
exports.encode = function (number) {
  if (0 <= number && number < intToCharMap.length) {
    return intToCharMap[number];
  }
  throw new TypeError("Must be between 0 and 63: " + number);
};

/**
 * Decode a single base 64 character code digit to an integer. Returns -1 on
 * failure.
 */
exports.decode = function (charCode) {
  var bigA = 65; // 'A'
  var bigZ = 90; // 'Z'

  var littleA = 97; // 'a'
  var littleZ = 122; // 'z'

  var zero = 48; // '0'
  var nine = 57; // '9'

  var plus = 43; // '+'
  var slash = 47; // '/'

  var littleOffset = 26;
  var numberOffset = 52;

  // 0 - 25: ABCDEFGHIJKLMNOPQRSTUVWXYZ
  if (bigA <= charCode && charCode <= bigZ) {
    return charCode - bigA;
  }

  // 26 - 51: abcdefghijklmnopqrstuvwxyz
  if (littleA <= charCode && charCode <= littleZ) {
    return charCode - littleA + littleOffset;
  }

  // 52 - 61: 0123456789
  if (zero <= charCode && charCode <= nine) {
    return charCode - zero + numberOffset;
  }

  // 62: +
  if (charCode == plus) {
    return 62;
  }

  // 63: /
  if (charCode == slash) {
    return 63;
  }

  // Invalid base64 digit.
  return -1;
};
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJpbnRUb0NoYXJNYXAiLCJzcGxpdCIsImV4cG9ydHMiLCJlbmNvZGUiLCJudW1iZXIiLCJsZW5ndGgiLCJUeXBlRXJyb3IiLCJkZWNvZGUiLCJjaGFyQ29kZSIsImJpZ0EiLCJiaWdaIiwibGl0dGxlQSIsImxpdHRsZVoiLCJ6ZXJvIiwibmluZSIsInBsdXMiLCJzbGFzaCIsImxpdHRsZU9mZnNldCIsIm51bWJlck9mZnNldCJdLCJzb3VyY2VzIjpbImJhc2U2NC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIvKiAtKi0gTW9kZToganM7IGpzLWluZGVudC1sZXZlbDogMjsgLSotICovXG4vKlxuICogQ29weXJpZ2h0IDIwMTEgTW96aWxsYSBGb3VuZGF0aW9uIGFuZCBjb250cmlidXRvcnNcbiAqIExpY2Vuc2VkIHVuZGVyIHRoZSBOZXcgQlNEIGxpY2Vuc2UuIFNlZSBMSUNFTlNFIG9yOlxuICogaHR0cDovL29wZW5zb3VyY2Uub3JnL2xpY2Vuc2VzL0JTRC0zLUNsYXVzZVxuICovXG5cbnZhciBpbnRUb0NoYXJNYXAgPSAnQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVphYmNkZWZnaGlqa2xtbm9wcXJzdHV2d3h5ejAxMjM0NTY3ODkrLycuc3BsaXQoJycpO1xuXG4vKipcbiAqIEVuY29kZSBhbiBpbnRlZ2VyIGluIHRoZSByYW5nZSBvZiAwIHRvIDYzIHRvIGEgc2luZ2xlIGJhc2UgNjQgZGlnaXQuXG4gKi9cbmV4cG9ydHMuZW5jb2RlID0gZnVuY3Rpb24gKG51bWJlcikge1xuICBpZiAoMCA8PSBudW1iZXIgJiYgbnVtYmVyIDwgaW50VG9DaGFyTWFwLmxlbmd0aCkge1xuICAgIHJldHVybiBpbnRUb0NoYXJNYXBbbnVtYmVyXTtcbiAgfVxuICB0aHJvdyBuZXcgVHlwZUVycm9yKFwiTXVzdCBiZSBiZXR3ZWVuIDAgYW5kIDYzOiBcIiArIG51bWJlcik7XG59O1xuXG4vKipcbiAqIERlY29kZSBhIHNpbmdsZSBiYXNlIDY0IGNoYXJhY3RlciBjb2RlIGRpZ2l0IHRvIGFuIGludGVnZXIuIFJldHVybnMgLTEgb25cbiAqIGZhaWx1cmUuXG4gKi9cbmV4cG9ydHMuZGVjb2RlID0gZnVuY3Rpb24gKGNoYXJDb2RlKSB7XG4gIHZhciBiaWdBID0gNjU7ICAgICAvLyAnQSdcbiAgdmFyIGJpZ1ogPSA5MDsgICAgIC8vICdaJ1xuXG4gIHZhciBsaXR0bGVBID0gOTc7ICAvLyAnYSdcbiAgdmFyIGxpdHRsZVogPSAxMjI7IC8vICd6J1xuXG4gIHZhciB6ZXJvID0gNDg7ICAgICAvLyAnMCdcbiAgdmFyIG5pbmUgPSA1NzsgICAgIC8vICc5J1xuXG4gIHZhciBwbHVzID0gNDM7ICAgICAvLyAnKydcbiAgdmFyIHNsYXNoID0gNDc7ICAgIC8vICcvJ1xuXG4gIHZhciBsaXR0bGVPZmZzZXQgPSAyNjtcbiAgdmFyIG51bWJlck9mZnNldCA9IDUyO1xuXG4gIC8vIDAgLSAyNTogQUJDREVGR0hJSktMTU5PUFFSU1RVVldYWVpcbiAgaWYgKGJpZ0EgPD0gY2hhckNvZGUgJiYgY2hhckNvZGUgPD0gYmlnWikge1xuICAgIHJldHVybiAoY2hhckNvZGUgLSBiaWdBKTtcbiAgfVxuXG4gIC8vIDI2IC0gNTE6IGFiY2RlZmdoaWprbG1ub3BxcnN0dXZ3eHl6XG4gIGlmIChsaXR0bGVBIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IGxpdHRsZVopIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gbGl0dGxlQSArIGxpdHRsZU9mZnNldCk7XG4gIH1cblxuICAvLyA1MiAtIDYxOiAwMTIzNDU2Nzg5XG4gIGlmICh6ZXJvIDw9IGNoYXJDb2RlICYmIGNoYXJDb2RlIDw9IG5pbmUpIHtcbiAgICByZXR1cm4gKGNoYXJDb2RlIC0gemVybyArIG51bWJlck9mZnNldCk7XG4gIH1cblxuICAvLyA2MjogK1xuICBpZiAoY2hhckNvZGUgPT0gcGx1cykge1xuICAgIHJldHVybiA2MjtcbiAgfVxuXG4gIC8vIDYzOiAvXG4gIGlmIChjaGFyQ29kZSA9PSBzbGFzaCkge1xuICAgIHJldHVybiA2MztcbiAgfVxuXG4gIC8vIEludmFsaWQgYmFzZTY0IGRpZ2l0LlxuICByZXR1cm4gLTE7XG59O1xuIl0sIm1hcHBpbmdzIjoiQUFBQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7O0FBRUEsSUFBSUEsWUFBWSxHQUFHLGtFQUFrRSxDQUFDQyxLQUFLLENBQUMsRUFBRSxDQUFDOztBQUUvRjtBQUNBO0FBQ0E7QUFDQUMsT0FBTyxDQUFDQyxNQUFNLEdBQUcsVUFBVUMsTUFBTSxFQUFFO0VBQ2pDLElBQUksQ0FBQyxJQUFJQSxNQUFNLElBQUlBLE1BQU0sR0FBR0osWUFBWSxDQUFDSyxNQUFNLEVBQUU7SUFDL0MsT0FBT0wsWUFBWSxDQUFDSSxNQUFNLENBQUM7RUFDN0I7RUFDQSxNQUFNLElBQUlFLFNBQVMsQ0FBQyw0QkFBNEIsR0FBR0YsTUFBTSxDQUFDO0FBQzVELENBQUM7O0FBRUQ7QUFDQTtBQUNBO0FBQ0E7QUFDQUYsT0FBTyxDQUFDSyxNQUFNLEdBQUcsVUFBVUMsUUFBUSxFQUFFO0VBQ25DLElBQUlDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBSztFQUNuQixJQUFJQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUs7O0VBRW5CLElBQUlDLE9BQU8sR0FBRyxFQUFFLENBQUMsQ0FBRTtFQUNuQixJQUFJQyxPQUFPLEdBQUcsR0FBRyxDQUFDLENBQUM7O0VBRW5CLElBQUlDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBSztFQUNuQixJQUFJQyxJQUFJLEdBQUcsRUFBRSxDQUFDLENBQUs7O0VBRW5CLElBQUlDLElBQUksR0FBRyxFQUFFLENBQUMsQ0FBSztFQUNuQixJQUFJQyxLQUFLLEdBQUcsRUFBRSxDQUFDLENBQUk7O0VBRW5CLElBQUlDLFlBQVksR0FBRyxFQUFFO0VBQ3JCLElBQUlDLFlBQVksR0FBRyxFQUFFOztFQUVyQjtFQUNBLElBQUlULElBQUksSUFBSUQsUUFBUSxJQUFJQSxRQUFRLElBQUlFLElBQUksRUFBRTtJQUN4QyxPQUFRRixRQUFRLEdBQUdDLElBQUk7RUFDekI7O0VBRUE7RUFDQSxJQUFJRSxPQUFPLElBQUlILFFBQVEsSUFBSUEsUUFBUSxJQUFJSSxPQUFPLEVBQUU7SUFDOUMsT0FBUUosUUFBUSxHQUFHRyxPQUFPLEdBQUdNLFlBQVk7RUFDM0M7O0VBRUE7RUFDQSxJQUFJSixJQUFJLElBQUlMLFFBQVEsSUFBSUEsUUFBUSxJQUFJTSxJQUFJLEVBQUU7SUFDeEMsT0FBUU4sUUFBUSxHQUFHSyxJQUFJLEdBQUdLLFlBQVk7RUFDeEM7O0VBRUE7RUFDQSxJQUFJVixRQUFRLElBQUlPLElBQUksRUFBRTtJQUNwQixPQUFPLEVBQUU7RUFDWDs7RUFFQTtFQUNBLElBQUlQLFFBQVEsSUFBSVEsS0FBSyxFQUFFO0lBQ3JCLE9BQU8sRUFBRTtFQUNYOztFQUVBO0VBQ0EsT0FBTyxDQUFDLENBQUM7QUFDWCxDQUFDIiwiaWdub3JlTGlzdCI6W119