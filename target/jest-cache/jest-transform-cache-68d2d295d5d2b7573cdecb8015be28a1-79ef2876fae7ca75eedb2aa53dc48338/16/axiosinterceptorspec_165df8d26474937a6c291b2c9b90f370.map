{"file":"/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/config/axios-interceptor.spec.ts","mappings":";;;AAAA,0DAA0B;AAC1B,0DAA0B;AAE1B,oFAAyD;AAEzD,QAAQ,CAAC,mBAAmB,EAAE,GAAG,EAAE;IACjC,QAAQ,CAAC,wBAAwB,EAAE,GAAG,EAAE;QACtC,MAAM,MAAM,GAAG,eAAK,CAAC;QACrB,MAAM,iBAAiB,GAAG,eAAK,CAAC,GAAG,EAAE,CAAC;QACtC,IAAA,2BAAsB,EAAC,iBAAiB,CAAC,CAAC;QAE1C,EAAE,CAAC,iDAAiD,EAAE,GAAG,EAAE;YACzD,MAAM,CAAE,MAAM,CAAC,YAAY,CAAC,OAAe,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,GAAG,EAAE,OAAO,EAAE,CAAC,CAAC,CAAC,aAAa,CAAC;gBAC9G,IAAI,EAAE,KAAK;aACZ,CAAC,CAAC;QACL,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,mDAAmD,EAAE,GAAG,EAAE;YAC3D,MAAM,CAAE,MAAM,CAAC,YAAY,CAAC,QAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,SAAS,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC,CAAC,OAAO,CAAC,EAAE,IAAI,EAAE,KAAK,EAAE,CAAC,CAAC;QAChH,CAAC,CAAC,CAAC;QACH,EAAE,CAAC,gDAAgD,EAAE,GAAG,EAAE;YACxD,MAAM,WAAW,GAAG;gBAClB,QAAQ,EAAE;oBACR,UAAU,EAAE,UAAU;oBACtB,MAAM,EAAE,GAAG;oBACX,IAAI,EAAE,EAAE,OAAO,EAAE,gBAAgB,EAAE;iBACpC;aACF,CAAC;YACF,MAAM,CAAE,MAAM,CAAC,YAAY,CAAC,QAAgB,CAAC,QAAQ,CAAC,CAAC,CAAC,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC,CAAC,OAAO,CAAC,OAAO,CAAC,WAAW,CAAC,CAAC;YAC7G,MAAM,CAAC,iBAAiB,CAAC,UAAU,CAAC,CAAC,IAAI,CAAC,IAAI,CAAC,CAAC;QAClD,CAAC,CAAC,CAAC;IACL,CAAC,CAAC,CAAC;AACL,CAAC,CAAC,CAAC","names":[],"sources":["/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/config/axios-interceptor.spec.ts"],"sourcesContent":["import axios from 'axios';\nimport sinon from 'sinon';\n\nimport setupAxiosInterceptors from './axios-interceptor';\n\ndescribe('Axios Interceptor', () => {\n  describe('setupAxiosInterceptors', () => {\n    const client = axios;\n    const onUnauthenticated = sinon.spy();\n    setupAxiosInterceptors(onUnauthenticated);\n\n    it('onRequestSuccess is called on fulfilled request', () => {\n      expect((client.interceptors.request as any).handlers[0].fulfilled({ data: 'foo', url: '/test' })).toMatchObject({\n        data: 'foo',\n      });\n    });\n    it('onResponseSuccess is called on fulfilled response', () => {\n      expect((client.interceptors.response as any).handlers[0].fulfilled({ data: 'foo' })).toEqual({ data: 'foo' });\n    });\n    it('onResponseError is called on rejected response', () => {\n      const rejectError = {\n        response: {\n          statusText: 'NotFound',\n          status: 401,\n          data: { message: 'Page not found' },\n        },\n      };\n      expect((client.interceptors.response as any).handlers[0].rejected(rejectError)).rejects.toEqual(rejectError);\n      expect(onUnauthenticated.calledOnce).toBe(true);\n    });\n  });\n});\n"],"version":3}