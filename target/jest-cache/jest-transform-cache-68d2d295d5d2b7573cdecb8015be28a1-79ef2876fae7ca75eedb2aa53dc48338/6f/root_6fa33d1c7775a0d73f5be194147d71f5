fb94cd7a41a8c176a0c47f0395a386b0
'use strict';

let Container = require('./container');
let LazyResult, Processor;
class Root extends Container {
  constructor(defaults) {
    super(defaults);
    this.type = 'root';
    if (!this.nodes) this.nodes = [];
  }
  normalize(child, sample, type) {
    let nodes = super.normalize(child);
    if (sample) {
      if (type === 'prepend') {
        if (this.nodes.length > 1) {
          sample.raws.before = this.nodes[1].raws.before;
        } else {
          delete sample.raws.before;
        }
      } else if (this.first !== sample) {
        for (let node of nodes) {
          node.raws.before = sample.raws.before;
        }
      }
    }
    return nodes;
  }
  removeChild(child, ignore) {
    let index = this.index(child);
    if (!ignore && index === 0 && this.nodes.length > 1) {
      this.nodes[1].raws.before = this.nodes[index].raws.before;
    }
    return super.removeChild(child);
  }
  toResult(opts = {}) {
    let lazy = new LazyResult(new Processor(), this, opts);
    return lazy.stringify();
  }
}
Root.registerLazyResult = dependant => {
  LazyResult = dependant;
};
Root.registerProcessor = dependant => {
  Processor = dependant;
};
module.exports = Root;
Root.default = Root;
Container.registerRoot(Root);
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJDb250YWluZXIiLCJyZXF1aXJlIiwiTGF6eVJlc3VsdCIsIlByb2Nlc3NvciIsIlJvb3QiLCJjb25zdHJ1Y3RvciIsImRlZmF1bHRzIiwidHlwZSIsIm5vZGVzIiwibm9ybWFsaXplIiwiY2hpbGQiLCJzYW1wbGUiLCJsZW5ndGgiLCJyYXdzIiwiYmVmb3JlIiwiZmlyc3QiLCJub2RlIiwicmVtb3ZlQ2hpbGQiLCJpZ25vcmUiLCJpbmRleCIsInRvUmVzdWx0Iiwib3B0cyIsImxhenkiLCJzdHJpbmdpZnkiLCJyZWdpc3RlckxhenlSZXN1bHQiLCJkZXBlbmRhbnQiLCJyZWdpc3RlclByb2Nlc3NvciIsIm1vZHVsZSIsImV4cG9ydHMiLCJkZWZhdWx0IiwicmVnaXN0ZXJSb290Il0sInNvdXJjZXMiOlsicm9vdC5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyIndXNlIHN0cmljdCdcblxubGV0IENvbnRhaW5lciA9IHJlcXVpcmUoJy4vY29udGFpbmVyJylcblxubGV0IExhenlSZXN1bHQsIFByb2Nlc3NvclxuXG5jbGFzcyBSb290IGV4dGVuZHMgQ29udGFpbmVyIHtcbiAgY29uc3RydWN0b3IoZGVmYXVsdHMpIHtcbiAgICBzdXBlcihkZWZhdWx0cylcbiAgICB0aGlzLnR5cGUgPSAncm9vdCdcbiAgICBpZiAoIXRoaXMubm9kZXMpIHRoaXMubm9kZXMgPSBbXVxuICB9XG5cbiAgbm9ybWFsaXplKGNoaWxkLCBzYW1wbGUsIHR5cGUpIHtcbiAgICBsZXQgbm9kZXMgPSBzdXBlci5ub3JtYWxpemUoY2hpbGQpXG5cbiAgICBpZiAoc2FtcGxlKSB7XG4gICAgICBpZiAodHlwZSA9PT0gJ3ByZXBlbmQnKSB7XG4gICAgICAgIGlmICh0aGlzLm5vZGVzLmxlbmd0aCA+IDEpIHtcbiAgICAgICAgICBzYW1wbGUucmF3cy5iZWZvcmUgPSB0aGlzLm5vZGVzWzFdLnJhd3MuYmVmb3JlXG4gICAgICAgIH0gZWxzZSB7XG4gICAgICAgICAgZGVsZXRlIHNhbXBsZS5yYXdzLmJlZm9yZVxuICAgICAgICB9XG4gICAgICB9IGVsc2UgaWYgKHRoaXMuZmlyc3QgIT09IHNhbXBsZSkge1xuICAgICAgICBmb3IgKGxldCBub2RlIG9mIG5vZGVzKSB7XG4gICAgICAgICAgbm9kZS5yYXdzLmJlZm9yZSA9IHNhbXBsZS5yYXdzLmJlZm9yZVxuICAgICAgICB9XG4gICAgICB9XG4gICAgfVxuXG4gICAgcmV0dXJuIG5vZGVzXG4gIH1cblxuICByZW1vdmVDaGlsZChjaGlsZCwgaWdub3JlKSB7XG4gICAgbGV0IGluZGV4ID0gdGhpcy5pbmRleChjaGlsZClcblxuICAgIGlmICghaWdub3JlICYmIGluZGV4ID09PSAwICYmIHRoaXMubm9kZXMubGVuZ3RoID4gMSkge1xuICAgICAgdGhpcy5ub2Rlc1sxXS5yYXdzLmJlZm9yZSA9IHRoaXMubm9kZXNbaW5kZXhdLnJhd3MuYmVmb3JlXG4gICAgfVxuXG4gICAgcmV0dXJuIHN1cGVyLnJlbW92ZUNoaWxkKGNoaWxkKVxuICB9XG5cbiAgdG9SZXN1bHQob3B0cyA9IHt9KSB7XG4gICAgbGV0IGxhenkgPSBuZXcgTGF6eVJlc3VsdChuZXcgUHJvY2Vzc29yKCksIHRoaXMsIG9wdHMpXG4gICAgcmV0dXJuIGxhenkuc3RyaW5naWZ5KClcbiAgfVxufVxuXG5Sb290LnJlZ2lzdGVyTGF6eVJlc3VsdCA9IGRlcGVuZGFudCA9PiB7XG4gIExhenlSZXN1bHQgPSBkZXBlbmRhbnRcbn1cblxuUm9vdC5yZWdpc3RlclByb2Nlc3NvciA9IGRlcGVuZGFudCA9PiB7XG4gIFByb2Nlc3NvciA9IGRlcGVuZGFudFxufVxuXG5tb2R1bGUuZXhwb3J0cyA9IFJvb3RcblJvb3QuZGVmYXVsdCA9IFJvb3RcblxuQ29udGFpbmVyLnJlZ2lzdGVyUm9vdChSb290KVxuIl0sIm1hcHBpbmdzIjoiQUFBQSxZQUFZOztBQUVaLElBQUlBLFNBQVMsR0FBR0MsT0FBTyxDQUFDLGFBQWEsQ0FBQztBQUV0QyxJQUFJQyxVQUFVLEVBQUVDLFNBQVM7QUFFekIsTUFBTUMs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