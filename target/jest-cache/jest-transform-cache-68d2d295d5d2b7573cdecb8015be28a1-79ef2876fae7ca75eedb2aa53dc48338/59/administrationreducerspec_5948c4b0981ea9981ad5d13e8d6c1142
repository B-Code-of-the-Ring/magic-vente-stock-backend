0effa1175a40cc34d8a412b0868cf5d0
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const toolkit_1 = require("@reduxjs/toolkit");
const administration_reducer_1 = tslib_1.__importStar(require("./administration.reducer"));
describe('Administration reducer tests', () => {
    function isEmpty(element) {
        if (element instanceof Array) {
            return element.length === 0;
        }
        return Object.keys(element).length === 0;
    }
    function testInitialState(state) {
        expect(state).toMatchObject({
            loading: false,
            errorMessage: null,
            totalItems: 0,
        });
        expect(isEmpty(state.logs.loggers));
        expect(isEmpty(state.threadDump));
    }
    function testMultipleTypes(types, payload, testFunction, error) {
        types.forEach(e => {
            testFunction((0, administration_reducer_1.default)(undefined, { type: e, payload, error }));
        });
    }
    describe('Common', () => {
        it('should return the initial state', () => {
            testInitialState((0, administration_reducer_1.default)(undefined, { type: '' }));
        });
    });
    describe('Requests', () => {
        it('should set state to loading', () => {
            testMultipleTypes([
                administration_reducer_1.getLoggers.pending.type,
                administration_reducer_1.getSystemHealth.pending.type,
                administration_reducer_1.getSystemMetrics.pending.type,
                administration_reducer_1.getSystemThreadDump.pending.type,
                administration_reducer_1.getConfigurations.pending.type,
                administration_reducer_1.getEnv.pending.type,
            ], {}, state => {
                expect(state).toMatchObject({
                    errorMessage: null,
                    loading: true,
                });
            });
        });
    });
    describe('Failures', () => {
        it('should set state to failed and put an error message in errorMessage', () => {
            testMultipleTypes([
                administration_reducer_1.getLoggers.rejected.type,
                administration_reducer_1.getSystemHealth.rejected.type,
                administration_reducer_1.getSystemMetrics.rejected.type,
                administration_reducer_1.getSystemThreadDump.rejected.type,
                administration_reducer_1.getConfigurations.rejected.type,
                administration_reducer_1.getEnv.rejected.type,
            ], 'something happened', state => {
                expect(state).toMatchObject({
                    loading: false,
                    errorMessage: 'error',
                });
            }, {
                message: 'error',
            });
        });
    });
    describe('Success', () => {
        it('should update state according to a successful fetch logs request', () => {
            const payload = {
                data: {
                    loggers: {
                        main: {
                            effectiveLevel: 'WARN',
                        },
                    },
                },
            };
            const toTest = (0, administration_reducer_1.default)(undefined, { type: administration_reducer_1.getLoggers.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                logs: payload.data,
            });
        });
        it('should update state according to a successful fetch health request', () => {
            const payload = { data: { status: 'UP' } };
            const toTest = (0, administration_reducer_1.default)(undefined, { type: administration_reducer_1.getSystemHealth.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                health: payload.data,
            });
        });
        it('should update state according to a successful fetch metrics request', () => {
            const payload = { data: { version: '3.1.3', gauges: {} } };
            const toTest = (0, administration_reducer_1.default)(undefined, { type: administration_reducer_1.getSystemMetrics.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                metrics: payload.data,
            });
        });
        it('should update state according to a successful fetch thread dump request', () => {
            const payload = { data: [{ threadName: 'hz.gateway.cached.thread-6', threadId: 9266 }] };
            const toTest = (0, administration_reducer_1.default)(undefined, { type: administration_reducer_1.getSystemThreadDump.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                threadDump: payload.data,
            });
        });
        it('should update state according to a successful fetch configurations request', () => {
            const payload = { data: { contexts: { jhipster: { beans: {} } } } };
            const toTest = (0, administration_reducer_1.default)(undefined, { type: administration_reducer_1.getConfigurations.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                configuration: {
                    configProps: payload.data,
                    env: {},
                },
            });
        });
        it('should update state according to a successful fetch env request', () => {
            const payload = { data: { activeProfiles: ['api-docs', 'dev'] } };
            const toTest = (0, administration_reducer_1.default)(undefined, { type: administration_reducer_1.getEnv.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                loading: false,
                configuration: {
                    configProps: {},
                    env: payload.data,
                },
            });
        });
    });
    describe('Actions', () => {
        let store;
        const resolvedObject = { value: 'whatever' };
        const getState = jest.fn();
        const dispatch = jest.fn();
        const extra = {};
        beforeEach(() => {
            store = (0, toolkit_1.configureStore)({
                reducer: (state = [], action) => [...state, action],
            });
            axios_1.default.get = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.post = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
        });
        it('dispatches FETCH_HEALTH_PENDING and FETCH_HEALTH_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, administration_reducer_1.getSystemHealth)()(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(administration_reducer_1.getSystemHealth.fulfilled.match(result)).toBe(true);
            expect(result.payload).toBe(resolvedObject);
        }));
        it('dispatches FETCH_METRICS_PENDING and FETCH_METRICS_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, administration_reducer_1.getSystemMetrics)()(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(administration_reducer_1.getSystemMetrics.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_THREAD_DUMP_PENDING and FETCH_THREAD_DUMP_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, administration_reducer_1.getSystemThreadDump)()(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(administration_reducer_1.getSystemThreadDump.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_LOGS_PENDING and FETCH_LOGS_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, administration_reducer_1.getLoggers)()(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(administration_reducer_1.getLoggers.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_LOGS_CHANGE_LEVEL_PENDING and FETCH_LOGS_CHANGE_LEVEL_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, administration_reducer_1.setLoggers)({ name: 'ROOT', configuredLevel: 'DEBUG' })(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(administration_reducer_1.setLoggers.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_CONFIGURATIONS_PENDING and FETCH_CONFIGURATIONS_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, administration_reducer_1.getConfigurations)()(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(administration_reducer_1.getConfigurations.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches FETCH_ENV_PENDING and FETCH_ENV_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, administration_reducer_1.getEnv)()(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(administration_reducer_1.getEnv.fulfilled.match(result)).toBe(true);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,