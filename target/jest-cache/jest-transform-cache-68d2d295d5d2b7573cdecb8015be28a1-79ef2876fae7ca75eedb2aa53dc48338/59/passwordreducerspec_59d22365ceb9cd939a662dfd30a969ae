abb4eafff0f814f771328dfa22c0a90e
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const toolkit_1 = require("@reduxjs/toolkit");
const password_reducer_1 = tslib_1.__importStar(require("./password.reducer"));
describe('Password reducer tests', () => {
    describe('Common tests', () => {
        it('should return the initial state', () => {
            const toTest = (0, password_reducer_1.default)(undefined, { type: '' });
            expect(toTest).toMatchObject({
                loading: false,
                errorMessage: null,
                updateSuccess: false,
                updateFailure: false,
            });
        });
    });
    describe('Password update', () => {
        it('should detect a request', () => {
            const toTest = (0, password_reducer_1.default)(undefined, { type: password_reducer_1.savePassword.pending.type });
            expect(toTest).toMatchObject({
                updateSuccess: false,
                updateFailure: false,
                loading: true,
            });
        });
        it('should detect a success', () => {
            const toTest = (0, password_reducer_1.default)(undefined, { type: password_reducer_1.savePassword.fulfilled.type });
            expect(toTest).toMatchObject({
                updateSuccess: true,
                updateFailure: false,
                loading: false,
            });
        });
        it('should detect a failure', () => {
            const toTest = (0, password_reducer_1.default)(undefined, { type: password_reducer_1.savePassword.rejected.type });
            expect(toTest).toMatchObject({
                updateSuccess: false,
                updateFailure: true,
                loading: false,
            });
        });
        it('should reset the state', () => {
            const initialState = {
                loading: false,
                errorMessage: null,
                successMessage: null,
                updateSuccess: false,
                updateFailure: false,
            };
            expect((0, password_reducer_1.default)(Object.assign(Object.assign({}, initialState), { loading: true }), password_reducer_1.reset)).toEqual(Object.assign({}, initialState));
        });
    });
    describe('Actions', () => {
        let store;
        const resolvedObject = { value: 'whatever' };
        const getState = jest.fn();
        const dispatch = jest.fn();
        const extra = {};
        beforeEach(() => {
            store = (0, toolkit_1.configureStore)({
                reducer: (state = [], action) => [...state, action],
            });
            axios_1.default.post = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
        });
        it('dispatches UPDATE_PASSWORD_PENDING and UPDATE_PASSWORD_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = { currentPassword: '', newPassword: '' };
            const result = yield (0, password_reducer_1.savePassword)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(password_reducer_1.savePassword.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches RESET actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield store.dispatch((0, password_reducer_1.reset)());
            expect(store.getState()).toEqual([expect.any(Object), expect.objectContaining((0, password_reducer_1.reset)())]);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,