6124d937dbe9ab906fdcd2b7e496eaa2
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const redux_1 = require("redux");
const toastify = tslib_1.__importStar(require("react-toastify")); // synthetic default import doesn't work here due to mocking.
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const notification_middleware_1 = tslib_1.__importDefault(require("./notification-middleware"));
describe('Notification Middleware', () => {
    let store;
    const SUCCESS_TYPE = 'SUCCESS/fulfilled';
    const ERROR_TYPE = 'ERROR/rejected';
    // Default action for use in local tests
    const DEFAULT = {
        type: SUCCESS_TYPE,
        payload: 'foo',
    };
    const HEADER_SUCCESS = {
        type: SUCCESS_TYPE,
        payload: {
            status: 201,
            statusText: 'Created',
            headers: { 'app-alert': 'foo.created', 'app-params': 'foo' },
        },
    };
    const DEFAULT_ERROR = {
        type: ERROR_TYPE,
        error: new Error('foo'),
    };
    const VALIDATION_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                data: {
                    type: 'https://www.jhipster.tech/problem/problem-with-message',
                    title: 'Method argument not valid',
                    status: 400,
                    path: '/api/foos',
                    message: 'error.validation',
                    fieldErrors: [{ objectName: 'foos', field: 'minField', message: 'Min' }],
                },
                status: 400,
                statusText: 'Bad Request',
                headers: { expires: '0' },
            },
        },
    };
    const HEADER_ERRORS = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                status: 400,
                statusText: 'Bad Request',
                headers: { 'app-error': 'foo.creation', 'app-params': 'foo' },
            },
        },
    };
    const NOT_FOUND_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                data: {
                    status: 404,
                    message: 'Not found',
                },
                status: 404,
            },
        },
    };
    const NO_SERVER_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                status: 0,
            },
        },
    };
    const GENERIC_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                data: {
                    message: 'Error',
                },
            },
        },
    };
    const LOGIN_REJECTED_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                data: '',
                config: {
                    url: 'api/authenticate',
                },
                status: 401,
            },
        },
    };
    const TITLE_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                data: {
                    title: 'Incorrect password',
                    status: 400,
                    type: 'https://www.jhipster.tech/problem/invalid-password',
                },
                status: 400,
            },
        },
    };
    const STRING_DATA_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                data: 'Incorrect password string',
                status: 400,
            },
        },
    };
    const UNKNOWN_400_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
            response: {
                status: 400,
            },
        },
    };
    const UNKNOWN_ERROR = {
        type: ERROR_TYPE,
        error: {
            isAxiosError: true,
        },
    };
    const makeStore = () => (0, redux_1.applyMiddleware)(notification_middleware_1.default)(redux_1.createStore)(() => null);
    beforeEach(() => {
        store = makeStore();
        sinon_1.default.spy(toastify.toast, 'error');
        sinon_1.default.spy(toastify.toast, 'success');
    });
    afterEach(() => {
        toastify.toast.error.restore();
        toastify.toast.success.restore();
    });
    it('should not trigger a toast message but should return action', () => {
        expect(store.dispatch(DEFAULT).payload).toEqual('foo');
        expect(toastify.toast.error.called).toEqual(false);
        expect(toastify.toast.success.called).toEqual(false);
    });
    it('should trigger a success toast message for header alerts', () => {
        expect(store.dispatch(HEADER_SUCCESS).payload.status).toEqual(201);
        const toastMsg = toastify.toast.success.getCall(0).args[0];
        expect(toastMsg).toContain('foo.created');
    });
    it('should trigger an error toast message and return error', () => {
        expect(store.dispatch(DEFAULT_ERROR).error.message).toEqual('foo');
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toEqual('foo');
    });
    it('should trigger an error toast message and return error for generic message', () => {
        expect(store.dispatch(GENERIC_ERROR).error.response.data.message).toEqual('Error');
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('Error');
    });
    it('should trigger an error toast message and return error for 400 response code', () => {
        expect(store.dispatch(VALIDATION_ERROR).error.response.data.message).toEqual('error.validation');
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('Error on field "MinField"');
    });
    it('should trigger an error toast message and return error for 404 response code', () => {
        expect(store.dispatch(NOT_FOUND_ERROR).error.response.data.message).toEqual('Not found');
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('Not found');
    });
    it('should trigger an error toast message and return error for 0 response code', () => {
        expect(store.dispatch(NO_SERVER_ERROR).error.response.status).toEqual(0);
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('Server not reachable');
    });
    it('should trigger an error toast message and return error for headers containing errors', () => {
        expect(store.dispatch(HEADER_ERRORS).error.response.status).toEqual(400);
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('foo.creation');
    });
    it('should not trigger an error toast message and return error for 401 response code', () => {
        expect(store.dispatch(LOGIN_REJECTED_ERROR).error.response.status).toEqual(401);
        expect(toastify.toast.error.called).toEqual(false);
        expect(toastify.toast.success.called).toEqual(false);
    });
    it('should trigger an error toast message and return error for 400 response code', () => {
        expect(store.dispatch(TITLE_ERROR).error.response.status).toEqual(400);
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('Incorrect password');
    });
    it('should trigger an error toast message and return error for string in data', () => {
        expect(store.dispatch(STRING_DATA_ERROR).error.response.status).toEqual(400);
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('Incorrect password string');
    });
    it('should trigger an error toast message and return error for unknown 400 error', () => {
        expect(store.dispatch(UNKNOWN_400_ERROR).error.response.status).toEqual(400);
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('Unknown error!');
    });
    it('should trigger an error toast message and return error for unknown error', () => {
        expect(store.dispatch(UNKNOWN_ERROR).error.isAxiosError).toEqual(true);
        const toastMsg = toastify.toast.error.getCall(0).args[0];
        expect(toastMsg).toContain('Unknown error!');
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJmaWxlIjoiL1VzZXJzL3BjY28wNTYvRG9jdW1lbnRzL0NvdXJzIElUVS9yaWJvdWNob24vbWFnaWN2ZW50ZXN0b2NrL3NyYy9tYWluL3dlYmFwcC9hcHAvY29uZmlnL25vdGlmaWNhdGlvbi1taWRkbGV3YXJlLnNwZWMudHMiLCJtYXBwaW5ncyI6Ijs7O0FBQUEsaUNBQXFEO0FBQ3JELGlFQUEyQyxDQUFDLDZEQUE2RDtBQUN6RywwREFBMEI7QUFFMUIsZ0dBQStEO0FBRS9ELFFBQVEsQ0FBQyx5QkFBeUIsRUFBRSxHQUFHLEVBQUU7SUFDdkMsSUFBSSxLQUFLLENBQUM7SUFFVixNQUFNLFlBQVksR0FBRyxtQkFBbUIsQ0FBQztJQUN6QyxNQUFNLFVBQVUsR0FBRyxnQkFBZ0IsQ0FBQztJQUVwQyx3Q0FBd0M7SUFDeEMsTUFBTSxPQUFPLEdBQUc7UUFDZCxJQUFJLEVBQUUsWUFBWTtRQUNsQixPQUFPLEVBQUUsS0FBSztLQUNmLENBQUM7SUFDRixNQUFNLGNBQWMsR0FBRztRQUNyQixJQUFJLEVBQUUsWUFBWTtRQUNsQixPQUFPLEVBQUU7WUFDUCxNQUFNLEVBQUUsR0FBRztZQUNYLFVBQVUsRUFBRSxTQUFTO1lBQ3JCLE9BQU8sRUFBRSxFQUFFLFdBQVcsRUFBRSxhQUFhLEVBQUUsWUFBWSxFQUFFLEtBQUssRUFBRTtTQUM3RDtLQUNGLENBQUM7SUFFRixNQUFNLGFBQWEsR0FBRztRQUNwQixJQUFJLEVBQUUsVUFBVTtRQUNoQixLQUFLLEVBQUUsSUFBSSxLQUFLLENBQUMsS0FBSyxDQUFDO0tBQ3hCLENBQUM7SUFDRixNQUFNLGdCQUFnQixHQUFHO1FBQ3ZCLElBQUksRUFBRSxVQUFVO1FBQ2hCLEtBQUssRUFBRTtZQUNMLFlBQVksRUFBRSxJQUFJO1lBQ2xCLFFBQVEsRUFBRTtnQkFDUixJQUFJLEVBQUU7b0JBQ0osSUFBSSxFQUFFLHdEQUF3RDtvQkFDOUQsS0FBSyxFQUFFLDJCQUEyQjtvQkFDbEMsTUFBTSxFQUFFLEdBQUc7b0JBQ1gsSUFBSSxFQUFFLFdBQVc7b0JBQ2pCLE9BQU8sRUFB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QUFRLEdBQUksUUFBUSxDQUFDLEtBQWEsQ0FBQyxLQUFLLENBQUMsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsQ0FBQztRQUNsRSxNQUFNLENBQUMsUUFBUSxDQUFDLENBQUMsU0FBUyxDQUFDLGdCQUFnQixDQUFDLENBQUM7SUFDL0MsQ0FBQyxDQUFDLENBQUM7QUFDTCxDQUFDLENBQUMsQ0FBQyIsIm5hbWVzIjpbXSwic291cmNlcyI6WyIvVXNlcnMvcGNjbzA1Ni9Eb2N1bWVudHMvQ291cnMgSVRVL3JpYm91Y2hvbi9tYWdpY3ZlbnRlc3RvY2svc3JjL21haW4vd2ViYXBwL2FwcC9jb25maWcvbm90aWZpY2F0aW9uLW1pZGRsZXdhcmUuc3BlYy50cyJdLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgeyBjcmVhdGVTdG9yZSwgYXBwbHlNaWRkbGV3YXJlIH0gZnJvbSAncmVkdXgnO1xuaW1wb3J0ICogYXMgdG9hc3RpZnkgZnJvbSAncmVhY3QtdG9hc3RpZnknOyAvLyBzeW50aGV0aWMgZGVmYXVsdCBpbXBvcnQgZG9lc24ndCB3b3JrIGhlcmUgZHVlIHRvIG1vY2tpbmcuXG5pbXBvcnQgc2lub24gZnJvbSAnc2lub24nO1xuXG5pbXBvcnQgbm90aWZpY2F0aW9uTWlkZGxld2FyZSBmcm9tICcuL25vdGlmaWNhdGlvbi1taWRkbGV3YXJlJztcblxuZGVzY3JpYmUoJ05vdGlmaWNhdGlvbiBNaWRkbGV3YXJlJywgKCkgPT4ge1xuICBsZXQgc3RvcmU7XG5cbiAgY29uc3QgU1VDQ0VTU19UWVBFID0gJ1NVQ0NFU1MvZnVsZmlsbGVkJztcbiAgY29uc3QgRVJST1JfVFlQRSA9ICdFUlJPUi9yZWplY3RlZCc7XG5cbiAgLy8gRGVmYXVsdCBhY3Rpb24gZm9yIHVzZSBpbiBsb2NhbCB0ZXN0c1xuICBjb25zdCBERUZBVUxUID0ge1xuICAgIHR5cGU6IFNVQ0NFU1NfVFlQRSxcbiAgICBwYXlsb2FkOiAnZm9vJyxcbiAgfTtcbiAgY29uc3QgSEVBREVSX1NVQ0NFU1MgPSB7XG4gICAgdHlwZTogU1VDQ0VTU19UWVBFLFxuICAgIHBheWxvYWQ6IHtcbiAgICAgIHN0YXR1czogMjAxLFxuICAgICAgc3RhdHVzVGV4dDogJ0NyZWF0ZWQnLFxuICAgICAgaGVhZGVyczogeyAnYXBwLWFsZXJ0JzogJ2Zvby5jcmVhdGVkJywgJ2FwcC1wYXJhbXMnOiAnZm9vJyB9LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgREVGQVVMVF9FUlJPUiA9IHtcbiAgICB0eXBlOiBFUlJPUl9UWVBFLFxuICAgIGVycm9yOiBuZXcgRXJyb3IoJ2ZvbycpLFxuICB9O1xuICBjb25zdCBWQUxJREFUSU9OX0VSUk9SID0ge1xuICAgIHR5cGU6IEVSUk9SX1RZUEUsXG4gICAgZXJyb3I6IHtcbiAgICAgIGlzQXhpb3NFcnJvcjogdHJ1ZSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIGRhdGE6IHtcbiAgICAgICAgICB0eXBlOiAnaHR0cHM6Ly93d3cuamhpcHN0ZXIudGVjaC9wcm9ibGVtL3Byb2JsZW0td2l0aC1tZXNzYWdlJyxcbiAgICAgICAgICB0aXRsZTogJ01ldGhvZCBhcmd1bWVudCBub3QgdmFsaWQnLFxuICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgIHBhdGg6ICcvYXBpL2Zvb3MnLFxuICAgICAgICAgIG1lc3NhZ2U6ICdlcnJvci52YWxpZGF0aW9uJyxcbiAgICAgICAgICBmaWVsZEVycm9yczogW3sgb2JqZWN0TmFtZTogJ2Zvb3MnLCBmaWVsZDogJ21pbkZpZWxkJywgbWVzc2FnZTogJ01pbicgfV0sXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBzdGF0dXNUZXh0OiAnQmFkIFJlcXVlc3QnLFxuICAgICAgICBoZWFkZXJzOiB7IGV4cGlyZXM6ICcwJyB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuICBjb25zdCBIRUFERVJfRVJST1JTID0ge1xuICAgIHR5cGU6IEVSUk9SX1RZUEUsXG4gICAgZXJyb3I6IHtcbiAgICAgIGlzQXhpb3NFcnJvcjogdHJ1ZSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICBzdGF0dXNUZXh0OiAnQmFkIFJlcXVlc3QnLFxuICAgICAgICBoZWFkZXJzOiB7ICdhcHAtZXJyb3InOiAnZm9vLmNyZWF0aW9uJywgJ2FwcC1wYXJhbXMnOiAnZm9vJyB9LFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuICBjb25zdCBOT1RfRk9VTkRfRVJST1IgPSB7XG4gICAgdHlwZTogRVJST1JfVFlQRSxcbiAgICBlcnJvcjoge1xuICAgICAgaXNBeGlvc0Vycm9yOiB0cnVlLFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgZGF0YToge1xuICAgICAgICAgIHN0YXR1czogNDA0LFxuICAgICAgICAgIG1lc3NhZ2U6ICdOb3QgZm91bmQnLFxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXM6IDQwNCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbiAgY29uc3QgTk9fU0VSVkVSX0VSUk9SID0ge1xuICAgIHR5cGU6IEVSUk9SX1RZUEUsXG4gICAgZXJyb3I6IHtcbiAgICAgIGlzQXhpb3NFcnJvcjogdHJ1ZSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIHN0YXR1czogMCxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbiAgY29uc3QgR0VORVJJQ19FUlJPUiA9IHtcbiAgICB0eXBlOiBFUlJPUl9UWVBFLFxuICAgIGVycm9yOiB7XG4gICAgICBpc0F4aW9zRXJyb3I6IHRydWUsXG4gICAgICByZXNwb25zZToge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgbWVzc2FnZTogJ0Vycm9yJyxcbiAgICAgICAgfSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcbiAgY29uc3QgTE9HSU5fUkVKRUNURURfRVJST1IgPSB7XG4gICAgdHlwZTogRVJST1JfVFlQRSxcbiAgICBlcnJvcjoge1xuICAgICAgaXNBeGlvc0Vycm9yOiB0cnVlLFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgZGF0YTogJycsXG4gICAgICAgIGNvbmZpZzoge1xuICAgICAgICAgIHVybDogJ2FwaS9hdXRoZW50aWNhdGUnLFxuICAgICAgICB9LFxuICAgICAgICBzdGF0dXM6IDQwMSxcbiAgICAgIH0sXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBUSVRMRV9FUlJPUiA9IHtcbiAgICB0eXBlOiBFUlJPUl9UWVBFLFxuICAgIGVycm9yOiB7XG4gICAgICBpc0F4aW9zRXJyb3I6IHRydWUsXG4gICAgICByZXNwb25zZToge1xuICAgICAgICBkYXRhOiB7XG4gICAgICAgICAgdGl0bGU6ICdJbmNvcnJlY3QgcGFzc3dvcmQnLFxuICAgICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgICAgIHR5cGU6ICdodHRwczovL3d3dy5qaGlwc3Rlci50ZWNoL3Byb2JsZW0vaW52YWxpZC1wYXNzd29yZCcsXG4gICAgICAgIH0sXG4gICAgICAgIHN0YXR1czogNDAwLFxuICAgICAgfSxcbiAgICB9LFxuICB9O1xuXG4gIGNvbnN0IFNUUklOR19EQVRBX0VSUk9SID0ge1xuICAgIHR5cGU6IEVSUk9SX1RZUEUsXG4gICAgZXJyb3I6IHtcbiAgICAgIGlzQXhpb3NFcnJvcjogdHJ1ZSxcbiAgICAgIHJlc3BvbnNlOiB7XG4gICAgICAgIGRhdGE6ICdJbmNvcnJlY3QgcGFzc3dvcmQgc3RyaW5nJyxcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgVU5LTk9XTl80MDBfRVJST1IgPSB7XG4gICAgdHlwZTogRVJST1JfVFlQRSxcbiAgICBlcnJvcjoge1xuICAgICAgaXNBeGlvc0Vycm9yOiB0cnVlLFxuICAgICAgcmVzcG9uc2U6IHtcbiAgICAgICAgc3RhdHVzOiA0MDAsXG4gICAgICB9LFxuICAgIH0sXG4gIH07XG5cbiAgY29uc3QgVU5LTk9XTl9FUlJPUiA9IHtcbiAgICB0eXBlOiBFUlJPUl9UWVBFLFxuICAgIGVycm9yOiB7XG4gICAgICBpc0F4aW9zRXJyb3I6IHRydWUsXG4gICAgfSxcbiAgfTtcblxuICBjb25zdCBtYWtlU3RvcmUgPSAoKSA9PiBhcHBseU1pZGRsZXdhcmUobm90aWZpY2F0aW9uTWlkZGxld2FyZSkoY3JlYXRlU3RvcmUpKCgpID0+IG51bGwpO1xuXG4gIGJlZm9yZUVhY2goKCkgPT4ge1xuICAgIHN0b3JlID0gbWFrZVN0b3JlKCk7XG4gICAgc2lub24uc3B5KHRvYXN0aWZ5LnRvYXN0LCAnZXJyb3InKTtcbiAgICBzaW5vbi5zcHkodG9hc3RpZnkudG9hc3QsICdzdWNjZXNzJyk7XG4gIH0pO1xuXG4gIGFmdGVyRWFjaCgoKSA9PiB7XG4gICAgKHRvYXN0aWZ5LnRvYXN0IGFzIGFueSkuZXJyb3IucmVzdG9yZSgpO1xuICAgICh0b2FzdGlmeS50b2FzdCBhcyBhbnkpLnN1Y2Nlc3MucmVzdG9yZSgpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIG5vdCB0cmlnZ2VyIGEgdG9hc3QgbWVzc2FnZSBidXQgc2hvdWxkIHJldHVybiBhY3Rpb24nLCAoKSA9PiB7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKERFRkFVTFQpLnBheWxvYWQpLnRvRXF1YWwoJ2ZvbycpO1xuICAgIGV4cGVjdCgodG9hc3RpZnkudG9hc3QgYXMgYW55KS5lcnJvci5jYWxsZWQpLnRvRXF1YWwoZmFsc2UpO1xuICAgIGV4cGVjdCgodG9hc3RpZnkudG9hc3QgYXMgYW55KS5zdWNjZXNzLmNhbGxlZCkudG9FcXVhbChmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdHJpZ2dlciBhIHN1Y2Nlc3MgdG9hc3QgbWVzc2FnZSBmb3IgaGVhZGVyIGFsZXJ0cycsICgpID0+IHtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2goSEVBREVSX1NVQ0NFU1MpLnBheWxvYWQuc3RhdHVzKS50b0VxdWFsKDIwMSk7XG4gICAgY29uc3QgdG9hc3RNc2cgPSAodG9hc3RpZnkudG9hc3QgYXMgYW55KS5zdWNjZXNzLmdldENhbGwoMCkuYXJnc1swXTtcbiAgICBleHBlY3QodG9hc3RNc2cpLnRvQ29udGFpbignZm9vLmNyZWF0ZWQnKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0cmlnZ2VyIGFuIGVycm9yIHRvYXN0IG1lc3NhZ2UgYW5kIHJldHVybiBlcnJvcicsICgpID0+IHtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2goREVGQVVMVF9FUlJPUikuZXJyb3IubWVzc2FnZSkudG9FcXVhbCgnZm9vJyk7XG4gICAgY29uc3QgdG9hc3RNc2cgPSAodG9hc3RpZnkudG9hc3QgYXMgYW55KS5lcnJvci5nZXRDYWxsKDApLmFyZ3NbMF07XG4gICAgZXhwZWN0KHRvYXN0TXNnKS50b0VxdWFsKCdmb28nKTtcbiAgfSk7XG5cbiAgaXQoJ3Nob3VsZCB0cmlnZ2VyIGFuIGVycm9yIHRvYXN0IG1lc3NhZ2UgYW5kIHJldHVybiBlcnJvciBmb3IgZ2VuZXJpYyBtZXNzYWdlJywgKCkgPT4ge1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaChHRU5FUklDX0VSUk9SKS5lcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2UpLnRvRXF1YWwoJ0Vycm9yJyk7XG4gICAgY29uc3QgdG9hc3RNc2cgPSAodG9hc3RpZnkudG9hc3QgYXMgYW55KS5lcnJvci5nZXRDYWxsKDApLmFyZ3NbMF07XG4gICAgZXhwZWN0KHRvYXN0TXNnKS50b0NvbnRhaW4oJ0Vycm9yJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdHJpZ2dlciBhbiBlcnJvciB0b2FzdCBtZXNzYWdlIGFuZCByZXR1cm4gZXJyb3IgZm9yIDQwMCByZXNwb25zZSBjb2RlJywgKCkgPT4ge1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaChWQUxJREFUSU9OX0VSUk9SKS5lcnJvci5yZXNwb25zZS5kYXRhLm1lc3NhZ2UpLnRvRXF1YWwoJ2Vycm9yLnZhbGlkYXRpb24nKTtcbiAgICBjb25zdCB0b2FzdE1zZyA9ICh0b2FzdGlmeS50b2FzdCBhcyBhbnkpLmVycm9yLmdldENhbGwoMCkuYXJnc1swXTtcbiAgICBleHBlY3QodG9hc3RNc2cpLnRvQ29udGFpbignRXJyb3Igb24gZmllbGQgXCJNaW5GaWVsZFwiJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdHJpZ2dlciBhbiBlcnJvciB0b2FzdCBtZXNzYWdlIGFuZCByZXR1cm4gZXJyb3IgZm9yIDQwNCByZXNwb25zZSBjb2RlJywgKCkgPT4ge1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaChOT1RfRk9VTkRfRVJST1IpLmVycm9yLnJlc3BvbnNlLmRhdGEubWVzc2FnZSkudG9FcXVhbCgnTm90IGZvdW5kJyk7XG4gICAgY29uc3QgdG9hc3RNc2cgPSAodG9hc3RpZnkudG9hc3QgYXMgYW55KS5lcnJvci5nZXRDYWxsKDApLmFyZ3NbMF07XG4gICAgZXhwZWN0KHRvYXN0TXNnKS50b0NvbnRhaW4oJ05vdCBmb3VuZCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRyaWdnZXIgYW4gZXJyb3IgdG9hc3QgbWVzc2FnZSBhbmQgcmV0dXJuIGVycm9yIGZvciAwIHJlc3BvbnNlIGNvZGUnLCAoKSA9PiB7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKE5PX1NFUlZFUl9FUlJPUikuZXJyb3IucmVzcG9uc2Uuc3RhdHVzKS50b0VxdWFsKDApO1xuICAgIGNvbnN0IHRvYXN0TXNnID0gKHRvYXN0aWZ5LnRvYXN0IGFzIGFueSkuZXJyb3IuZ2V0Q2FsbCgwKS5hcmdzWzBdO1xuICAgIGV4cGVjdCh0b2FzdE1zZykudG9Db250YWluKCdTZXJ2ZXIgbm90IHJlYWNoYWJsZScpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRyaWdnZXIgYW4gZXJyb3IgdG9hc3QgbWVzc2FnZSBhbmQgcmV0dXJuIGVycm9yIGZvciBoZWFkZXJzIGNvbnRhaW5pbmcgZXJyb3JzJywgKCkgPT4ge1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaChIRUFERVJfRVJST1JTKS5lcnJvci5yZXNwb25zZS5zdGF0dXMpLnRvRXF1YWwoNDAwKTtcbiAgICBjb25zdCB0b2FzdE1zZyA9ICh0b2FzdGlmeS50b2FzdCBhcyBhbnkpLmVycm9yLmdldENhbGwoMCkuYXJnc1swXTtcbiAgICBleHBlY3QodG9hc3RNc2cpLnRvQ29udGFpbignZm9vLmNyZWF0aW9uJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgbm90IHRyaWdnZXIgYW4gZXJyb3IgdG9hc3QgbWVzc2FnZSBhbmQgcmV0dXJuIGVycm9yIGZvciA0MDEgcmVzcG9uc2UgY29kZScsICgpID0+IHtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2goTE9HSU5fUkVKRUNURURfRVJST1IpLmVycm9yLnJlc3BvbnNlLnN0YXR1cykudG9FcXVhbCg0MDEpO1xuICAgIGV4cGVjdCgodG9hc3RpZnkudG9hc3QgYXMgYW55KS5lcnJvci5jYWxsZWQpLnRvRXF1YWwoZmFsc2UpO1xuICAgIGV4cGVjdCgodG9hc3RpZnkudG9hc3QgYXMgYW55KS5zdWNjZXNzLmNhbGxlZCkudG9FcXVhbChmYWxzZSk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdHJpZ2dlciBhbiBlcnJvciB0b2FzdCBtZXNzYWdlIGFuZCByZXR1cm4gZXJyb3IgZm9yIDQwMCByZXNwb25zZSBjb2RlJywgKCkgPT4ge1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaChUSVRMRV9FUlJPUikuZXJyb3IucmVzcG9uc2Uuc3RhdHVzKS50b0VxdWFsKDQwMCk7XG4gICAgY29uc3QgdG9hc3RNc2cgPSAodG9hc3RpZnkudG9hc3QgYXMgYW55KS5lcnJvci5nZXRDYWxsKDApLmFyZ3NbMF07XG4gICAgZXhwZWN0KHRvYXN0TXNnKS50b0NvbnRhaW4oJ0luY29ycmVjdCBwYXNzd29yZCcpO1xuICB9KTtcblxuICBpdCgnc2hvdWxkIHRyaWdnZXIgYW4gZXJyb3IgdG9hc3QgbWVzc2FnZSBhbmQgcmV0dXJuIGVycm9yIGZvciBzdHJpbmcgaW4gZGF0YScsICgpID0+IHtcbiAgICBleHBlY3Qoc3RvcmUuZGlzcGF0Y2goU1RSSU5HX0RBVEFfRVJST1IpLmVycm9yLnJlc3BvbnNlLnN0YXR1cykudG9FcXVhbCg0MDApO1xuICAgIGNvbnN0IHRvYXN0TXNnID0gKHRvYXN0aWZ5LnRvYXN0IGFzIGFueSkuZXJyb3IuZ2V0Q2FsbCgwKS5hcmdzWzBdO1xuICAgIGV4cGVjdCh0b2FzdE1zZykudG9Db250YWluKCdJbmNvcnJlY3QgcGFzc3dvcmQgc3RyaW5nJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdHJpZ2dlciBhbiBlcnJvciB0b2FzdCBtZXNzYWdlIGFuZCByZXR1cm4gZXJyb3IgZm9yIHVua25vd24gNDAwIGVycm9yJywgKCkgPT4ge1xuICAgIGV4cGVjdChzdG9yZS5kaXNwYXRjaChVTktOT1dOXzQwMF9FUlJPUikuZXJyb3IucmVzcG9uc2Uuc3RhdHVzKS50b0VxdWFsKDQwMCk7XG4gICAgY29uc3QgdG9hc3RNc2cgPSAodG9hc3RpZnkudG9hc3QgYXMgYW55KS5lcnJvci5nZXRDYWxsKDApLmFyZ3NbMF07XG4gICAgZXhwZWN0KHRvYXN0TXNnKS50b0NvbnRhaW4oJ1Vua25vd24gZXJyb3IhJyk7XG4gIH0pO1xuXG4gIGl0KCdzaG91bGQgdHJpZ2dlciBhbiBlcnJvciB0b2FzdCBtZXNzYWdlIGFuZCByZXR1cm4gZXJyb3IgZm9yIHVua25vd24gZXJyb3InLCAoKSA9PiB7XG4gICAgZXhwZWN0KHN0b3JlLmRpc3BhdGNoKFVOS05PV05fRVJST1IpLmVycm9yLmlzQXhpb3NFcnJvcikudG9FcXVhbCh0cnVlKTtcbiAgICBjb25zdCB0b2FzdE1zZyA9ICh0b2FzdGlmeS50b2FzdCBhcyBhbnkpLmVycm9yLmdldENhbGwoMCkuYXJnc1swXTtcbiAgICBleHBlY3QodG9hc3RNc2cpLnRvQ29udGFpbignVW5rbm93biBlcnJvciEnKTtcbiAgfSk7XG59KTtcbiJdLCJ2ZXJzaW9uIjozfQ==