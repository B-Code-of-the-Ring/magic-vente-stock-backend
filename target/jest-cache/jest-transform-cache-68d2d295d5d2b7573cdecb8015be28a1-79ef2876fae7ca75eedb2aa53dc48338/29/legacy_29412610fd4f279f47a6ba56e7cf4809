215b4de9c1a7135258ed670477358ae8
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.getElementsByTagType = exports.getElementsByTagName = exports.getElementById = exports.getElements = exports.testElement = void 0;
var domhandler_1 = require("domhandler");
var querying_js_1 = require("./querying.js");
/**
 * A map of functions to check nodes against.
 */
var Checks = {
  tag_name: function (name) {
    if (typeof name === "function") {
      return function (elem) {
        return (0, domhandler_1.isTag)(elem) && name(elem.name);
      };
    } else if (name === "*") {
      return domhandler_1.isTag;
    }
    return function (elem) {
      return (0, domhandler_1.isTag)(elem) && elem.name === name;
    };
  },
  tag_type: function (type) {
    if (typeof type === "function") {
      return function (elem) {
        return type(elem.type);
      };
    }
    return function (elem) {
      return elem.type === type;
    };
  },
  tag_contains: function (data) {
    if (typeof data === "function") {
      return function (elem) {
        return (0, domhandler_1.isText)(elem) && data(elem.data);
      };
    }
    return function (elem) {
      return (0, domhandler_1.isText)(elem) && elem.data === data;
    };
  }
};
/**
 * Returns a function to check whether a node has an attribute with a particular
 * value.
 *
 * @param attrib Attribute to check.
 * @param value Attribute value to look for.
 * @returns A function to check whether the a node has an attribute with a
 *   particular value.
 */
function getAttribCheck(attrib, value) {
  if (typeof value === "function") {
    return function (elem) {
      return (0, domhandler_1.isTag)(elem) && value(elem.attribs[attrib]);
    };
  }
  return function (elem) {
    return (0, domhandler_1.isTag)(elem) && elem.attribs[attrib] === value;
  };
}
/**
 * Returns a function that returns `true` if either of the input functions
 * returns `true` for a node.
 *
 * @param a First function to combine.
 * @param b Second function to combine.
 * @returns A function taking a node and returning `true` if either of the input
 *   functions returns `true` for the node.
 */
function combineFuncs(a, b) {
  return function (elem) {
    return a(elem) || b(elem);
  };
}
/**
 * Returns a function that executes all checks in `options` and returns `true`
 * if any of them match a node.
 *
 * @param options An object describing nodes to look for.
 * @returns A function that executes all checks in `options` and returns `true`
 *   if any of them match a node.
 */
function compileTest(options) {
  var funcs = Object.keys(options).map(function (key) {
    var value = options[key];
    return Object.prototype.hasOwnProperty.call(Checks, key) ? Checks[key](value) : getAttribCheck(key, value);
  });
  return funcs.length === 0 ? null : funcs.reduce(combineFuncs);
}
/**
 * Checks whether a node matches the description in `options`.
 *
 * @category Legacy Query Functions
 * @param options An object describing nodes to look for.
 * @param node The element to test.
 * @returns Whether the element matches the description in `options`.
 */
function testElement(options, node) {
  var test = compileTest(options);
  return test ? test(node) : true;
}
exports.testElement = testElement;
/**
 * Returns all nodes that match `options`.
 *
 * @category Legacy Query Functions
 * @param options An object describing nodes to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes that match `options`.
 */
function getElements(options, nodes, recurse, limit) {
  if (limit === void 0) {
    limit = Infinity;
  }
  var test = compileTest(options);
  return test ? (0, querying_js_1.filter)(test, nodes, recurse, limit) : [];
}
exports.getElements = getElements;
/**
 * Returns the node with the supplied ID.
 *
 * @category Legacy Query Functions
 * @param id The unique ID attribute value to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @returns The node with the supplied ID.
 */
function getElementById(id, nodes, recurse) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (!Array.isArray(nodes)) nodes = [nodes];
  return (0, querying_js_1.findOne)(getAttribCheck("id", id), nodes, recurse);
}
exports.getElementById = getElementById;
/**
 * Returns all nodes with the supplied `tagName`.
 *
 * @category Legacy Query Functions
 * @param tagName Tag name to search for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `tagName`.
 */
function getElementsByTagName(tagName, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  return (0, querying_js_1.filter)(Checks["tag_name"](tagName), nodes, recurse, limit);
}
exports.getElementsByTagName = getElementsByTagName;
/**
 * Returns all nodes with the supplied `type`.
 *
 * @category Legacy Query Functions
 * @param type Element type to look for.
 * @param nodes Nodes to search through.
 * @param recurse Also consider child nodes.
 * @param limit Maximum number of nodes to return.
 * @returns All nodes with the supplied `type`.
 */
function getElementsByTagType(type, nodes, recurse, limit) {
  if (recurse === void 0) {
    recurse = true;
  }
  if (limit === void 0) {
    limit = Infinity;
  }
  return (0, querying_js_1.filter)(Checks["tag_type"](type), nodes, recurse, limit);
}
exports.getElementsByTagType = getElementsByTagType;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJkb21oYW5kbGVyXzEiLCJyZXF1aXJlIiwicXVlcnlpbmdfanNfMSIsIkNoZWNrcyIsInRhZ19uYW1lIiwibmFtZSIsImVsZW0iLCJpc1RhZyIsInRhZ190eXBlIiwidHlwZSIsInRhZ19jb250YWlucyIsImRhdGEiLCJpc1RleHQiLCJnZXRBdHRyaWJDaGVjayIsImF0dHJpYiIsInZhbHVlIiwiYXR0cmlicyIsImNvbWJpbmVGdW5jcyIsImEiLCJiIiwiY29tcGlsZVRlc3QiLCJvcHRpb25zIiwiZnVuY3MiLCJPYmplY3QiLCJrZXlzIiwibWFwIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwibGVuZ3RoIiwicmVkdWNlIiwidGVzdEVsZW1lbnQiLCJub2RlIiwidGVzdCIsImV4cG9ydHMiLCJnZXRFbGVtZW50cyIsIm5vZGVzIiwicmVjdXJzZSIsImxpbWl0IiwiSW5maW5pdHkiLCJmaWx0ZXIiLCJnZXRFbGVtZW50QnlJZCIsImlkIiwiQXJyYXkiLCJpc0FycmF5IiwiZmluZE9uZSIsImdldEVsZW1lbnRzQnlUYWdOYW1lIiwidGFnTmFtZSIsImdldEVsZW1lbnRzQnlUYWdUeXBlIl0sInNvdXJjZXMiOlsiaHR0cHM6Ly9yYXcuZ2l0aHVidXNlcmNvbnRlbnQuY29tL2ZiNTUvZG9tdXRpbHMvOTZjOTg5ZTE1OWM5ODIxODk1OGYzNzVlYTA0MjEwZjJkMWI0M2MwYy9zcmMvbGVnYWN5LnRzIl0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7QUFBQSxJQUFBQSxZQUFBLEdBQUFDLE9BQUE7QUFFQSxJQUFBQyxhQUFBLEdBQUFELE9BQUE7QUFxQkE7OztBQUdBLElBQU1FLE1BQU0sR0FHUjtFQUNBQyxRQUFRLFdBQUFBLENBQUNDLElBQUk7SUFDVCxJQUFJLE9BQU9BLElBQUksS0FBSyxVQUFVLEVBQUU7TUFDNUIsT0FBTyxVQUFDQyxJQUFhO1FBQUssV0FBQU4sWUFBQSxDQUFBTyxLQUFLLEVBQUNE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