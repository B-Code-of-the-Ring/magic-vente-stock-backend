{"file":"/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/config/notification-middleware.spec.ts","mappings":"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","names":[],"sources":["/Users/pcco056/Documents/Cours ITU/ribouchon/magicventestock/src/main/webapp/app/config/notification-middleware.spec.ts"],"sourcesContent":["import { createStore, applyMiddleware } from 'redux';\nimport * as toastify from 'react-toastify'; // synthetic default import doesn't work here due to mocking.\nimport sinon from 'sinon';\n\nimport notificationMiddleware from './notification-middleware';\n\ndescribe('Notification Middleware', () => {\n  let store;\n\n  const SUCCESS_TYPE = 'SUCCESS/fulfilled';\n  const ERROR_TYPE = 'ERROR/rejected';\n\n  // Default action for use in local tests\n  const DEFAULT = {\n    type: SUCCESS_TYPE,\n    payload: 'foo',\n  };\n  const HEADER_SUCCESS = {\n    type: SUCCESS_TYPE,\n    payload: {\n      status: 201,\n      statusText: 'Created',\n      headers: { 'app-alert': 'foo.created', 'app-params': 'foo' },\n    },\n  };\n\n  const DEFAULT_ERROR = {\n    type: ERROR_TYPE,\n    error: new Error('foo'),\n  };\n  const VALIDATION_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        data: {\n          type: 'https://www.jhipster.tech/problem/problem-with-message',\n          title: 'Method argument not valid',\n          status: 400,\n          path: '/api/foos',\n          message: 'error.validation',\n          fieldErrors: [{ objectName: 'foos', field: 'minField', message: 'Min' }],\n        },\n        status: 400,\n        statusText: 'Bad Request',\n        headers: { expires: '0' },\n      },\n    },\n  };\n  const HEADER_ERRORS = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        status: 400,\n        statusText: 'Bad Request',\n        headers: { 'app-error': 'foo.creation', 'app-params': 'foo' },\n      },\n    },\n  };\n  const NOT_FOUND_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        data: {\n          status: 404,\n          message: 'Not found',\n        },\n        status: 404,\n      },\n    },\n  };\n  const NO_SERVER_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        status: 0,\n      },\n    },\n  };\n  const GENERIC_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        data: {\n          message: 'Error',\n        },\n      },\n    },\n  };\n  const LOGIN_REJECTED_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        data: '',\n        config: {\n          url: 'api/authenticate',\n        },\n        status: 401,\n      },\n    },\n  };\n\n  const TITLE_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        data: {\n          title: 'Incorrect password',\n          status: 400,\n          type: 'https://www.jhipster.tech/problem/invalid-password',\n        },\n        status: 400,\n      },\n    },\n  };\n\n  const STRING_DATA_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        data: 'Incorrect password string',\n        status: 400,\n      },\n    },\n  };\n\n  const UNKNOWN_400_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n      response: {\n        status: 400,\n      },\n    },\n  };\n\n  const UNKNOWN_ERROR = {\n    type: ERROR_TYPE,\n    error: {\n      isAxiosError: true,\n    },\n  };\n\n  const makeStore = () => applyMiddleware(notificationMiddleware)(createStore)(() => null);\n\n  beforeEach(() => {\n    store = makeStore();\n    sinon.spy(toastify.toast, 'error');\n    sinon.spy(toastify.toast, 'success');\n  });\n\n  afterEach(() => {\n    (toastify.toast as any).error.restore();\n    (toastify.toast as any).success.restore();\n  });\n\n  it('should not trigger a toast message but should return action', () => {\n    expect(store.dispatch(DEFAULT).payload).toEqual('foo');\n    expect((toastify.toast as any).error.called).toEqual(false);\n    expect((toastify.toast as any).success.called).toEqual(false);\n  });\n\n  it('should trigger a success toast message for header alerts', () => {\n    expect(store.dispatch(HEADER_SUCCESS).payload.status).toEqual(201);\n    const toastMsg = (toastify.toast as any).success.getCall(0).args[0];\n    expect(toastMsg).toContain('foo.created');\n  });\n\n  it('should trigger an error toast message and return error', () => {\n    expect(store.dispatch(DEFAULT_ERROR).error.message).toEqual('foo');\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toEqual('foo');\n  });\n\n  it('should trigger an error toast message and return error for generic message', () => {\n    expect(store.dispatch(GENERIC_ERROR).error.response.data.message).toEqual('Error');\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('Error');\n  });\n\n  it('should trigger an error toast message and return error for 400 response code', () => {\n    expect(store.dispatch(VALIDATION_ERROR).error.response.data.message).toEqual('error.validation');\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('Error on field \"MinField\"');\n  });\n\n  it('should trigger an error toast message and return error for 404 response code', () => {\n    expect(store.dispatch(NOT_FOUND_ERROR).error.response.data.message).toEqual('Not found');\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('Not found');\n  });\n\n  it('should trigger an error toast message and return error for 0 response code', () => {\n    expect(store.dispatch(NO_SERVER_ERROR).error.response.status).toEqual(0);\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('Server not reachable');\n  });\n\n  it('should trigger an error toast message and return error for headers containing errors', () => {\n    expect(store.dispatch(HEADER_ERRORS).error.response.status).toEqual(400);\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('foo.creation');\n  });\n\n  it('should not trigger an error toast message and return error for 401 response code', () => {\n    expect(store.dispatch(LOGIN_REJECTED_ERROR).error.response.status).toEqual(401);\n    expect((toastify.toast as any).error.called).toEqual(false);\n    expect((toastify.toast as any).success.called).toEqual(false);\n  });\n\n  it('should trigger an error toast message and return error for 400 response code', () => {\n    expect(store.dispatch(TITLE_ERROR).error.response.status).toEqual(400);\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('Incorrect password');\n  });\n\n  it('should trigger an error toast message and return error for string in data', () => {\n    expect(store.dispatch(STRING_DATA_ERROR).error.response.status).toEqual(400);\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('Incorrect password string');\n  });\n\n  it('should trigger an error toast message and return error for unknown 400 error', () => {\n    expect(store.dispatch(UNKNOWN_400_ERROR).error.response.status).toEqual(400);\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('Unknown error!');\n  });\n\n  it('should trigger an error toast message and return error for unknown error', () => {\n    expect(store.dispatch(UNKNOWN_ERROR).error.isAxiosError).toEqual(true);\n    const toastMsg = (toastify.toast as any).error.getCall(0).args[0];\n    expect(toastMsg).toContain('Unknown error!');\n  });\n});\n"],"version":3}