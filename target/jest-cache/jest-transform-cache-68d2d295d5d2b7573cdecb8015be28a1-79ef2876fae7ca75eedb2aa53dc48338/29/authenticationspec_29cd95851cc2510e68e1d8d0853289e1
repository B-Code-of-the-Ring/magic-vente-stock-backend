b487fb79802aa8ae75b02bea63b83f59
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const axios_1 = tslib_1.__importDefault(require("axios"));
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const react_jhipster_1 = require("react-jhipster");
const toolkit_1 = require("@reduxjs/toolkit");
const authentication_1 = tslib_1.__importStar(require("app/shared/reducers/authentication"));
describe('Authentication reducer tests', () => {
    function isAccountEmpty(state) {
        return Object.keys(state.account).length === 0;
    }
    describe('Common tests', () => {
        it('should return the initial state', () => {
            const toTest = (0, authentication_1.default)(undefined, { type: '' });
            expect(toTest).toMatchObject({
                loading: false,
                isAuthenticated: false,
                errorMessage: null, // Errors returned from server side
                loginSuccess: false,
                loginError: false, // Errors returned from server side
                showModalLogin: false,
                redirectMessage: null,
            });
            expect(isAccountEmpty(toTest));
        });
    });
    describe('Requests', () => {
        it('should detect a request', () => {
            expect((0, authentication_1.default)(undefined, { type: authentication_1.authenticate.pending.type })).toMatchObject({
                loading: true,
            });
            expect((0, authentication_1.default)(undefined, { type: authentication_1.getAccount.pending.type })).toMatchObject({
                loading: true,
            });
        });
    });
    describe('Success', () => {
        it('should detect a success on login', () => {
            const toTest = (0, authentication_1.default)(undefined, { type: authentication_1.authenticate.fulfilled.type });
            expect(toTest).toMatchObject({
                loading: false,
                loginError: false,
                loginSuccess: true,
                showModalLogin: false,
            });
        });
        it('should detect a success on get session and be authenticated', () => {
            const payload = { data: { activated: true } };
            const toTest = (0, authentication_1.default)(undefined, { type: authentication_1.getAccount.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                isAuthenticated: true,
                loading: false,
                account: payload.data,
            });
        });
        it('should detect a success on get session and not be authenticated', () => {
            const payload = { data: { activated: false } };
            const toTest = (0, authentication_1.default)(undefined, { type: authentication_1.getAccount.fulfilled.type, payload });
            expect(toTest).toMatchObject({
                isAuthenticated: false,
                loading: false,
                account: payload.data,
            });
        });
    });
    describe('Failure', () => {
        it('should detect a failure on login', () => {
            const error = { message: 'Something happened.' };
            const toTest = (0, authentication_1.default)(undefined, { type: authentication_1.authenticate.rejected.type, error });
            expect(toTest).toMatchObject({
                errorMessage: error.message,
                showModalLogin: true,
                loginError: true,
            });
            expect(isAccountEmpty(toTest));
        });
        it('should detect a failure', () => {
            const error = { message: 'Something happened.' };
            const toTest = (0, authentication_1.default)(undefined, { type: authentication_1.getAccount.rejected.type, error });
            expect(toTest).toMatchObject({
                loading: false,
                isAuthenticated: false,
                showModalLogin: true,
                errorMessage: error.message,
            });
            expect(isAccountEmpty(toTest));
        });
    });
    describe('Other cases', () => {
        it('should properly reset the current state when a logout is requested', () => {
            const toTest = (0, authentication_1.default)(undefined, (0, authentication_1.logoutSession)());
            expect(toTest).toMatchObject({
                loading: false,
                isAuthenticated: false,
                loginSuccess: false,
                loginError: false,
                showModalLogin: true,
                errorMessage: null,
                redirectMessage: null,
            });
            expect(isAccountEmpty(toTest));
        });
        it('should properly define an error message and change the current state to display the login modal', () => {
            const message = 'redirect me please';
            const toTest = (0, authentication_1.default)(undefined, (0, authentication_1.authError)(message));
            expect(toTest).toMatchObject({
                loading: false,
                isAuthenticated: false,
                loginSuccess: false,
                loginError: false,
                showModalLogin: true,
                errorMessage: null,
                redirectMessage: message,
            });
            expect(isAccountEmpty(toTest));
        });
        it('should clear authentication', () => {
            const toTest = (0, authentication_1.default)(Object.assign(Object.assign({}, authentication_1.initialState), { isAuthenticated: true }), (0, authentication_1.clearAuth)());
            expect(toTest).toMatchObject({
                loading: false,
                showModalLogin: true,
                isAuthenticated: false,
            });
        });
    });
    describe('Actions', () => {
        let store;
        const resolvedObject = { value: 'whatever' };
        const getState = jest.fn();
        const dispatch = jest.fn();
        const extra = {};
        beforeEach(() => {
            store = (0, toolkit_1.configureStore)({
                reducer: (state = [], action) => [...state, action],
            });
            axios_1.default.get = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
        });
        it('dispatches GET_SESSION_PENDING and GET_SESSION_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const result = yield (0, authentication_1.getAccount)()(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(authentication_1.getAccount.fulfilled.match(result)).toBe(true);
        }));
        it('dispatches LOGOUT actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield store.dispatch((0, authentication_1.logout)());
            expect(store.getState()).toEqual([expect.any(Object), expect.objectContaining((0, authentication_1.logoutSession)())]);
        }));
        it('dispatches CLEAR_AUTH actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield store.dispatch((0, authentication_1.clearAuthentication)('message'));
            expect(store.getState()).toEqual([expect.any(Object), expect.objectContaining((0, authentication_1.authError)('message')), (0, authentication_1.clearAuth)()]);
        }));
        it('dispatches LOGIN, GET_SESSION and SET_LOCALE success and request actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const loginResponse = { headers: { authorization: 'auth' } };
            axios_1.default.post = sinon_1.default.stub().returns(Promise.resolve(loginResponse));
            const result = yield (0, authentication_1.authenticate)('test', 'test')(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(authentication_1.authenticate.fulfilled.match(result)).toBe(true);
        }));
    });
    describe('clearAuthToken', () => {
        let store;
        const reducer = (0, toolkit_1.createReducer)({ authentication: { account: { langKey: 'en' } } }, builder => {
            builder.addDefaultCase(() => { });
        });
        beforeEach(() => {
            store = (0, toolkit_1.configureStore)({
                reducer,
            });
        });
        it('clears the session token on clearAuthToken', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const AUTH_TOKEN_KEY = 'jhi-authenticationToken';
            const loginResponse = { headers: { authorization: 'Bearer TestToken' } };
            axios_1.default.post = sinon_1.default.stub().returns(Promise.resolve(loginResponse));
            yield store.dispatch((0, authentication_1.login)('test', 'test'));
            expect(react_jhipster_1.Storage.session.get(AUTH_TOKEN_KEY)).toBe('TestToken');
            expect(react_jhipster_1.Storage.local.get(AUTH_TOKEN_KEY)).toBe(undefined);
            (0, authentication_1.clearAuthToken)();
            expect(react_jhipster_1.Storage.session.get(AUTH_TOKEN_KEY)).toBe(undefined);
            expect(react_jhipster_1.Storage.local.get(AUTH_TOKEN_KEY)).toBe(undefined);
        }));
        it('clears the local storage token on clearAuthToken', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const AUTH_TOKEN_KEY = 'jhi-authenticationToken';
            const loginResponse = { headers: { authorization: 'Bearer TestToken' } };
            axios_1.default.post = sinon_1.default.stub().returns(Promise.resolve(loginResponse));
            yield store.dispatch((0, authentication_1.login)('user', 'user', true));
            expect(react_jhipster_1.Storage.session.get(AUTH_TOKEN_KEY)).toBe(undefined);
            expect(react_jhipster_1.Storage.local.get(AUTH_TOKEN_KEY)).toBe('TestToken');
            (0, authentication_1.clearAuthToken)();
            expect(react_jhipster_1.Storage.session.get(AUTH_TOKEN_KEY)).toBe(undefined);
            expect(react_jhipster_1.Storage.local.get(AUTH_TOKEN_KEY)).toBe(undefined);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,