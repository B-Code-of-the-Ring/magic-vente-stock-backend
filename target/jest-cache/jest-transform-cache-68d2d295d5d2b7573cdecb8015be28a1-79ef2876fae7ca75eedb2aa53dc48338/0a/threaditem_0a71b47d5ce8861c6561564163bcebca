e665f53792aad9c1f7327edfbb2369bf
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.ThreadItem = void 0;
const tslib_1 = require("tslib");
const react_1 = tslib_1.__importDefault(require("react"));
const reactstrap_1 = require("reactstrap");
class ThreadItem extends react_1.default.Component {
  constructor() {
    super(...arguments);
    this.state = {
      collapse: false
    };
    this.toggleStackTrace = () => {
      this.setState({
        collapse: !this.state.collapse
      });
    };
  }
  render() {
    const {
      threadDumpInfo
    } = this.props;
    return react_1.default.createElement("div", null, react_1.default.createElement("a", {
      onClick: this.toggleStackTrace,
      style: {
        color: 'hotpink'
      }
    }, this.state.collapse ? react_1.default.createElement("span", null, "Hide StackTrace") : react_1.default.createElement("span", null, "Show StackTrace")), react_1.default.createElement(reactstrap_1.Collapse, {
      isOpen: this.state.collapse
    }, react_1.default.createElement(reactstrap_1.Card, null, react_1.default.createElement(reactstrap_1.CardBody, null, react_1.default.createElement(reactstrap_1.Row, {
      className: "break",
      style: {
        overflowX: 'scroll'
      }
    }, Object.entries(threadDumpInfo.stackTrace).map(([stK, stV]) => react_1.default.createElement("samp", {
      key: `detail-${stK}`
    }, stV.className, ".", stV.methodName, react_1.default.createElement("code", null, "(", stV.fileName, ":", stV.lineNumber, ")"))), react_1.default.createElement("span", {
      className: "mt-1"
    }))))));
  }
}
exports.ThreadItem = ThreadItem;
exports.default = ThreadItem;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJyZWFjdF8xIiwidHNsaWJfMSIsIl9faW1wb3J0RGVmYXVsdCIsInJlcXVpcmUiLCJyZWFjdHN0cmFwXzEiLCJUaHJlYWRJdGVtIiwiZGVmYXVsdCIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwic3RhdGUiLCJjb2xsYXBzZSIsInRvZ2dsZVN0YWNrVHJhY2UiLCJzZXRTdGF0ZSIsInJlbmRlciIsInRocmVhZER1bXBJbmZvIiwicHJvcHMiLCJjcmVhdGVFbGVtZW50Iiwib25DbGljayIsInN0eWxlIiwiY29sb3IiLCJDb2xsYXBzZSIsImlzT3BlbiIsIkNhcmQiLCJDYXJkQm9keSIsIlJvdyIsImNsYXNzTmFtZSIsIm92ZXJmbG93WCIsIk9iamVjdCIsImVudHJpZXMiLCJzdGFja1RyYWNlIiwibWFwIiwic3RLIiwic3RWIiwia2V5IiwibWV0aG9kTmFtZSIsImZpbGVOYW1lIiwibGluZU51bWJlciIsImV4cG9ydHMiXSwic291cmNlcyI6WyIuLi8uLi8uLi9zcmMvY29tcG9uZW50L21ldHJpY3MvdGhyZWFkLWl0ZW0udHN4Il0sInNvdXJjZXNDb250ZW50IjpbbnVsbF0sIm1hcHBpbmdzIjoiOzs7Ozs7O0FBQUEsTUFBQUEsT0FBQSxHQUFBQyxPQUFBLENBQUFDLGVBQUEsQ0FBQUMsT0FBQTtBQUNBLE1BQUFDLFlBQUEsR0FBQUQsT0FBQTtBQVVBLE1BQWFFLFVBQVcsU0FBUUwsT0FBQSxDQUFBTSxPQUFLLENBQUNDLFNBQTZDO0VBQW5GQyxZQUFBOztJQUNFLEtBQUFDLEtBQUssR0FBcUI7TUFDeEJDLFFBQVEsRUFBRTtLQUNYO0lBRUQsS0FBQUMsZ0JBQWdCLEdBQUcsTUFBSztNQUN0QixJQUFJLENBQUNDLFFBQVEsQ0FBQztRQUNaRixRQUFRLEVBQUUsQ0FBQyxJQUFJLENBQUNELEtBQUssQ0FBQ0M7T0FDdkIsQ0FBQztJQUNKLENBQUM7RUE4Qkg7RUE1QkVHLE1BQU1BLENBQUE7SUFDSixNQUFNO01BQUVDO0lBQWMsQ0FBRSxHQUFHLElBQUksQ0FBQ0MsS0FBSztJQUVyQyxPQUNFZixPQUFBLENBQUFNLE9BQUEsQ0FBQVUsYUFBQSxjQUNFaEIsT0FBQSxDQUFBTSxPQUFBLENBQUFVLGFBQUE7TUFBR0MsT0FBTyxFQUFFLElBQUksQ0FBQ04sZ0JBQWdCO01BQUVPLEtBQUssRUFBRTtRQUFFQyxLQUFLLEVBQUU7TUFBUztJQUFFLEdBQzNELElBQUksQ0FBQ1YsS0FBSyxDQUFDQyxRQUFRLEdBQUdWLE9BQUEsQ0FBQU0sT0FBQSxDQUFBVSxhQUFBLGlDQUE0QixHQUFHaEIsT0FBQSxDQUFBTSxPQUFBLENBQUFVLGFBQUEsaUNBQTRCLENBQ2hGLEVBQ0poQixPQUFBLENBQUFNLE9BQUEsQ0FBQVUsYUFBQSxDQUFDWixZQUFBLENBQUFnQixRQUFRO01BQUNDLE1BQU0sRUFBRSxJQUFJLENBQUNaLEtBQUssQ0FBQ0M7SUFBUSxHQUNuQ1YsT0FBQSxDQUFBTSxPQUFBLENBQUFVLGFBQUEsQ0FBQ1osWUFBQSxDQUFBa0IsSUFBSSxRQUNIdEIsT0FBQSxDQUFBTSxPQUFBLENBQUFVLGFBQUEsQ0FBQ1osWUFBQSxDQUFBbUIsUUFBUSxRQUNQdkIsT0FBQSxDQUFBTSxPQUFBLENBQUFVLGFBQUEsQ0FBQ1osWUFBQSxDQUFBb0IsR0FBRztNQUFDQyxTQUFTLEVBQUMsT0FBTztNQUFDUCxLQUFLLEVBQUU7UUFBRVEsU0FBUyxFQUFFO01BQVE7SUFBRSxHQUNsREMsTUFBTSxDQUFDQyxPQUFPLENBQUNkLGNBQWMsQ0FBQ2UsVUFBVSxDQUFDLENBQUNDLEdBQUcsQ0FBQyxDQUFDLENBQUNDLEdBQUcsRUFBRUMsR0FBRyxDQUFnQixLQUN2RWhDLE9BQUEsQ0FBQU0sT0FBQSxDQUFBVSxhQUFBO01BQU1pQixHQUFHLEVBQUUsVUFBVUYsR0FBRztJQUFFLEdBQ3ZCQyxHQUFHLENBQUNQLFNBQVMsRSxLQUFHTyxHQUFHLENBQUNFLFVBQVUsRUFDL0JsQyxPQUFBLENBQUFNLE9BQUEsQ0FBQVUsYUFBQSxlLEtBQ0lnQixHQUFHLENBQUNHLFFBQVEsRSxLQUFHSCxHQUFHLENBQUNJLFVBQVUsRSxJQUMxQixDQUVWLENBQUMsRUFDRnBDLE9BQUEsQ0FBQU0sT0FBQSxDQUFBVSxhQUFBO01BQU1TLFNBQVMsRUFBQztJQUFNLEVBQUcsQ0FDckIsQ0FDRyxDQUNOLENBQ0UsQ0FDUDtFQUVWOztBQXRDRlksT0FBQSxDQUFBaEMsVUFBQSxHQUFBQSxVQUFBO0FBeUNBZ0MsT0FBQSxDQUFBL0IsT0FBQSxHQUFlRCxVQUFVIiwiaWdub3JlTGlzdCI6W119