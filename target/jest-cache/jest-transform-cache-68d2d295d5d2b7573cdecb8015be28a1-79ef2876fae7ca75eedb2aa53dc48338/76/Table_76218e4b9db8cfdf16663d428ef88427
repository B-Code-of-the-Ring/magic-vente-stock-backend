aa5fdf9303f88b0684bff44d742bd02c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _utils = require("./utils");
const _excluded = ["className", "cssModule", "size", "bordered", "borderless", "striped", "dark", "hover", "responsive", "tag", "responsiveTag", "innerRef"];
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
const propTypes = {
  /** Adds border to all sides of table */
  bordered: _propTypes.default.bool,
  /** Removes all borders */
  borderless: _propTypes.default.bool,
  /** Adds custom class name to component */
  className: _propTypes.default.string,
  /**  */
  cssModule: _propTypes.default.object,
  /** Makes the table dark */
  dark: _propTypes.default.bool,
  /** Enables a hover state on the rows within `<tbody>` */
  hover: _propTypes.default.bool,
  innerRef: _propTypes.default.oneOfType([_propTypes.default.func, _propTypes.default.string, _propTypes.default.object]),
  /** Responsive tables allow tables to be scrolled horizontally with ease */
  responsive: _propTypes.default.oneOfType([_propTypes.default.bool, _propTypes.default.string]),
  responsiveTag: _utils.tagPropType,
  /** Make tables more compact by cutting cell padding in half when setting size as sm. */
  size: _propTypes.default.string,
  /** Adds zebra-striping to any table row within the `<tbody>` */
  striped: _propTypes.default.bool,
  /** Add custom tag to the component */
  tag: _utils.tagPropType
};
function Table(props) {
  const {
      className,
      cssModule,
      size,
      bordered,
      borderless,
      striped,
      dark,
      hover,
      responsive,
      tag: Tag = 'table',
      responsiveTag: ResponsiveTag = 'div',
      innerRef
    } = props,
    attributes = _objectWithoutProperties(props, _excluded);
  const classes = (0, _utils.mapToCssModules)((0, _classnames.default)(className, 'table', size ? 'table-' + size : false, bordered ? 'table-bordered' : false, borderless ? 'table-borderless' : false, striped ? 'table-striped' : false, dark ? 'table-dark' : false, hover ? 'table-hover' : false), cssModule);
  const table = /*#__PURE__*/_react.default.createElement(Tag, _extends({}, attributes, {
    ref: innerRef,
    className: classes
  }));
  if (responsive) {
    const responsiveClassName = (0, _utils.mapToCssModules)(responsive === true ? 'table-responsive' : `table-responsive-${responsive}`, cssModule);
    return /*#__PURE__*/_react.default.createElement(ResponsiveTag, {
      className: responsiveClassName
    }, table);
  }
  return table;
}
Table.propTypes = propTypes;
var _default = Table;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl91dGlscyIsIl9leGNsdWRlZCIsIm9iaiIsIl9fZXNNb2R1bGUiLCJfZXh0ZW5kcyIsImFzc2lnbiIsImJpbmQiLCJ0YXJnZXQiLCJpIiwiYXJndW1lbnRzIiwibGVuZ3RoIiwic291cmNlIiwia2V5IiwicHJvdG90eXBlIiwiaGFzT3duUHJvcGVydHkiLCJjYWxsIiwiYXBwbHkiLCJfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMiLCJleGNsdWRlZCIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlIiwiZ2V0T3duUHJvcGVydHlTeW1ib2xzIiwic291cmNlU3ltYm9sS2V5cyIsImluZGV4T2YiLCJwcm9wZXJ0eUlzRW51bWVyYWJsZSIsInNvdXJjZUtleXMiLCJrZXlzIiwicHJvcFR5cGVzIiwiYm9yZGVyZWQiLCJib29sIiwiYm9yZGVybGVzcyIsImNsYXNzTmFtZSIsInN0cmluZyIsImNzc01vZHVsZSIsIm9iamVjdCIsImRhcmsiLCJob3ZlciIsImlubmVyUmVmIiwib25lT2ZUeXBlIiwiZnVuYyIsInJlc3BvbnNpdmUiLCJyZXNwb25zaXZlVGFnIiwidGFnUHJvcFR5cGUiLCJzaXplIiwic3RyaXBlZCIsInRhZyIsIlRhYmxlIiwicHJvcHMiLCJUYWciLCJSZXNwb25zaXZlVGFnIiwiYXR0cmlidXRlcyIsImNsYXNzZXMiLCJtYXBUb0Nzc01vZHVsZXMiLCJ0YWJsZSIsImNyZWF0ZUVsZW1lbnQiLCJyZWYiLCJyZXNwb25zaXZlQ2xhc3NOYW1lIiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJUYWJsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3V0aWxzID0gcmVxdWlyZShcIi4vdXRpbHNcIik7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjc3NNb2R1bGVcIiwgXCJzaXplXCIsIFwiYm9yZGVyZWRcIiwgXCJib3JkZXJsZXNzXCIsIFwic3RyaXBlZFwiLCBcImRhcmtcIiwgXCJob3ZlclwiLCBcInJlc3BvbnNpdmVcIiwgXCJ0YWdcIiwgXCJyZXNwb25zaXZlVGFnXCIsIFwiaW5uZXJSZWZcIl07XG5mdW5jdGlvbiBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KG9iaikgeyByZXR1cm4gb2JqICYmIG9iai5fX2VzTW9kdWxlID8gb2JqIDogeyBkZWZhdWx0OiBvYmogfTsgfVxuZnVuY3Rpb24gX2V4dGVuZHMoKSB7IF9leHRlbmRzID0gT2JqZWN0LmFzc2lnbiA/IE9iamVjdC5hc3NpZ24uYmluZCgpIDogZnVuY3Rpb24gKHRhcmdldCkgeyBmb3IgKHZhciBpID0gMTsgaSA8IGFyZ3VtZW50cy5sZW5ndGg7IGkrKykgeyB2YXIgc291cmNlID0gYXJndW1lbnRzW2ldOyBmb3IgKHZhciBrZXkgaW4gc291cmNlKSB7IGlmIChPYmplY3QucHJvdG90eXBlLmhhc093blByb3BlcnR5LmNhbGwoc291cmNlLCBrZXkpKSB7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gfSB9IHJldHVybiB0YXJnZXQ7IH07IHJldHVybiBfZXh0ZW5kcy5hcHBseSh0aGlzLCBhcmd1bWVudHMpOyB9XG5mdW5jdGlvbiBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpOyB2YXIga2V5LCBpOyBpZiAoT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scykgeyB2YXIgc291cmNlU3ltYm9sS2V5cyA9IE9iamVjdC5nZXRPd25Qcm9wZXJ0eVN5bWJvbHMoc291cmNlKTsgZm9yIChpID0gMDsgaSA8IHNvdXJjZVN5bWJvbEtleXMubGVuZ3RoOyBpKyspIHsga2V5ID0gc291cmNlU3ltYm9sS2V5c1tpXTsgaWYgKGV4Y2x1ZGVkLmluZGV4T2Yoa2V5KSA+PSAwKSBjb250aW51ZTsgaWYgKCFPYmplY3QucHJvdG90eXBlLnByb3BlcnR5SXNFbnVtZXJhYmxlLmNhbGwoc291cmNlLCBrZXkpKSBjb250aW51ZTsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IHJldHVybiB0YXJnZXQ7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllc0xvb3NlKHNvdXJjZSwgZXhjbHVkZWQpIHsgaWYgKHNvdXJjZSA9PSBudWxsKSByZXR1cm4ge307IHZhciB0YXJnZXQgPSB7fTsgdmFyIHNvdXJjZUtleXMgPSBPYmplY3Qua2V5cyhzb3VyY2UpOyB2YXIga2V5LCBpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IHJldHVybiB0YXJnZXQ7IH1cbmNvbnN0IHByb3BUeXBlcyA9IHtcbiAgLyoqIEFkZHMgYm9yZGVyIHRvIGFsbCBzaWRlcyBvZiB0YWJsZSAqL1xuICBib3JkZXJlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIC8qKiBSZW1vdmVzIGFsbCBib3JkZXJzICovXG4gIGJvcmRlcmxlc3M6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKiogQWRkcyBjdXN0b20gY2xhc3MgbmFtZSB0byBjb21wb25lbnQgKi9cbiAgY2xhc3NOYW1lOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAvKiogICovXG4gIGNzc01vZHVsZTogX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCxcbiAgLyoqIE1ha2VzIHRoZSB0YWJsZSBkYXJrICovXG4gIGRhcms6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKiogRW5hYmxlcyBhIGhvdmVyIHN0YXRlIG9uIHRoZSByb3dzIHdpdGhpbiBgPHRib2R5PmAgKi9cbiAgaG92ZXI6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBpbm5lclJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmMsIF9wcm9wVHlwZXMuZGVmYXVsdC5zdHJpbmcsIF9wcm9wVHlwZXMuZGVmYXVsdC5vYmplY3RdKSxcbiAgLyoqIFJlc3BvbnNpdmUgdGFibGVzIGFsbG93IHRhYmxlcyB0byBiZSBzY3JvbGxlZCBob3Jpem9udGFsbHkgd2l0aCBlYXNlICovXG4gIHJlc3BvbnNpdmU6IF9wcm9wVHlwZXMuZGVmYXVsdC5vbmVPZlR5cGUoW19wcm9wVHlwZXMuZGVmYXVsdC5ib29sLCBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nXSksXG4gIHJlc3BvbnNpdmVUYWc6IF91dGlscy50YWdQcm9wVHlwZSxcbiAgLyoqIE1ha2UgdGFibGVzIG1vcmUgY29tcGFjdCBieSBjdXR0aW5nIGNlbGwgcGFkZGluZyBpbiBoYWxmIHdoZW4gc2V0dGluZyBzaXplIGFzIHNtLiAqL1xuICBzaXplOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICAvKiogQWRkcyB6ZWJyYS1zdHJpcGluZyB0byBhbnkgdGFibGUgcm93IHdpdGhpbiB0aGUgYDx0Ym9keT5gICovXG4gIHN0cmlwZWQ6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICAvKiogQWRkIGN1c3RvbSB0YWcgdG8gdGhlIGNvbXBvbmVudCAqL1xuICB0YWc6IF91dGlscy50YWdQcm9wVHlwZVxufTtcbmZ1bmN0aW9uIFRhYmxlKHByb3BzKSB7XG4gIGNvbnN0IHtcbiAgICAgIGNsYXNzTmFtZSxcbiAgICAgIGNzc01vZHVsZSxcbiAgICAgIHNpemUsXG4gICAgICBib3JkZXJlZCxcbiAgICAgIGJvcmRlcmxlc3MsXG4gICAgICBzdHJpcGVkLFxuICAgICAgZGFyayxcbiAgICAgIGhvdmVyLFxuICAgICAgcmVzcG9uc2l2ZSxcbiAgICAgIHRhZzogVGFnID0gJ3RhYmxlJyxcbiAgICAgIHJlc3BvbnNpdmVUYWc6IFJlc3BvbnNpdmVUYWcgPSAnZGl2JyxcbiAgICAgIGlubmVyUmVmXG4gICAgfSA9IHByb3BzLFxuICAgIGF0dHJpYnV0ZXMgPSBfb2JqZWN0V2l0aG91dFByb3BlcnRpZXMocHJvcHMsIF9leGNsdWRlZCk7XG4gIGNvbnN0IGNsYXNzZXMgPSAoMCwgX3V0aWxzLm1hcFRvQ3NzTW9kdWxlcykoKDAsIF9jbGFzc25hbWVzLmRlZmF1bHQpKGNsYXNzTmFtZSwgJ3RhYmxlJywgc2l6ZSA/ICd0YWJsZS0nICsgc2l6ZSA6IGZhbHNlLCBib3JkZXJlZCA/ICd0YWJsZS1ib3JkZXJlZCcgOiBmYWxzZSwgYm9yZGVybGVzcyA/ICd0YWJsZS1ib3JkZXJsZXNzJyA6IGZhbHNlLCBzdHJpcGVkID8gJ3RhYmxlLXN0cmlwZWQnIDogZmFsc2UsIGRhcmsgPyAndGFibGUtZGFyaycgOiBmYWxzZSwgaG92ZXIgPyAndGFibGUtaG92ZXInIDogZmFsc2UpLCBjc3NNb2R1bGUpO1xuICBjb25zdCB0YWJsZSA9IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRhZywgX2V4dGVuZHMoe30sIGF0dHJpYnV0ZXMsIHtcbiAgICByZWY6IGlubmVyUmVmLFxuICAgIGNsYXNzTmFtZTogY2xhc3Nlc1xuICB9KSk7XG4gIGlmIChyZXNwb25zaXZlKSB7XG4gICAgY29uc3QgcmVzcG9uc2l2ZUNsYXNzTmFtZSA9ICgwLCBfdXRpbHMubWFwVG9Dc3NNb2R1bGVzKShyZXNwb25zaXZlID09PSB0cnVlID8gJ3RhYmxlLXJlc3BvbnNpdmUnIDogYHRhYmxlLXJlc3BvbnNpdmUtJHtyZXNwb25zaXZlfWAsIGNzc01vZHVsZSk7XG4gICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFJlc3BvbnNpdmVUYWcsIHtcbiAgICAgIGNsYXNzTmFtZTogcmVzcG9uc2l2ZUNsYXNzTmFtZVxuICAgIH0sIHRhYmxlKTtcbiAgfVxuICByZXR1cm4gdGFibGU7XG59XG5UYWJsZS5wcm9wVHlwZXMgPSBwcm9wVHlwZXM7XG52YXIgX2RlZmF1bHQgPSBUYWJsZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELElBQUlDLFVBQVUsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5RCxJQUFJRSxXQUFXLEdBQUdILHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0QsSUFBSUcsTUFBTSxHQUFHSCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQy9CLE1BQU1JLFNBQVMsR0FBRyxDQUFDLFdBQVcsRUFBRSxXQUFXLEVBQUUsTUFBTSxFQUFFLFVBQVUsRUFBRSxZQUFZLEVBQUUsU0FBUyxFQUFF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LElBQUk7TUFDSmYsUUFBUTtNQUNSRSxVQUFVO01BQ1ZjLE9BQU87TUFDUFQsSUFBSTtNQUNKQyxLQUFLO01BQ0xJLFVBQVU7TUFDVkssR0FBRyxFQUFFRyxHQUFHLEdBQUcsT0FBTztNQUNsQlAsYUFBYSxFQUFFUSxhQUFhLEdBQUcsS0FBSztNQUNwQ1o7SUFDRixDQUFDLEdBQUdVLEtBQUs7SUFDVEcsVUFBVSxHQUFHaEMsd0JBQXdCLENBQUM2QixLQUFLLEVBQUU3QyxTQUFTLENBQUM7RUFDekQsTUFBTWlELE9BQU8sR0FBRyxDQUFDLENBQUMsRUFBRWxELE1BQU0sQ0FBQ21ELGVBQWUsRUFBRSxDQUFDLENBQUMsRUFBRXBELFdBQVcsQ0FBQ0wsT0FBTyxFQUFFb0MsU0FBUyxFQUFFLE9BQU8sRUFBRVksSUFBSSxHQUFHLFFBQVEsR0FBR0EsSUFBSSxHQUFHLEtBQUssRUFBRWYsUUFBUSxHQUFHLGdCQUFnQixHQUFHLEtBQUssRUFBRUUsVUFBVSxHQUFHLGtCQUFrQixHQUFHLEtBQUssRUFBRWMsT0FBTyxHQUFHLGVBQWUsR0FBRyxLQUFLLEVBQUVULElBQUksR0FBRyxZQUFZLEdBQUcsS0FBSyxFQUFFQyxLQUFLLEdBQUcsYUFBYSxHQUFHLEtBQUssQ0FBQyxFQUFFSCxTQUFTLENBQUM7RUFDalQsTUFBTW9CLEtBQUssR0FBRyxhQUFhekQsTUFBTSxDQUFDRCxPQUFPLENBQUMyRCxhQUFhLENBQUNOLEdBQUcsRUFBRTNDLFFBQVEsQ0FBQyxDQUFDLENBQUMsRUFBRTZDLFVBQVUsRUFBRTtJQUNwRkssR0FBRyxFQUFFbEIsUUFBUTtJQUNiTixTQUFTLEVBQUVvQjtFQUNiLENBQUMsQ0FBQyxDQUFDO0VBQ0gsSUFBSVgsVUFBVSxFQUFFO0lBQ2QsTUFBTWdCLG1CQUFtQixHQUFHLENBQUMsQ0FBQyxFQUFFdkQsTUFBTSxDQUFDbUQsZUFBZSxFQUFFWixVQUFVLEtBQUssSUFBSSxHQUFHLGtCQUFrQixHQUFHLG9CQUFvQkEsVUFBVSxFQUFFLEVBQUVQLFNBQVMsQ0FBQztJQUMvSSxPQUFPLGFBQWFyQyxNQUFNLENBQUNELE9BQU8sQ0FBQzJELGFBQWEsQ0FBQ0wsYUFBYSxFQUFFO01BQzlEbEIsU0FBUyxFQUFFeUI7SUFDYixDQUFDLEVBQUVILEtBQUssQ0FBQztFQUNYO0VBQ0EsT0FBT0EsS0FBSztBQUNkO0FBQ0FQLEtBQUssQ0FBQ25CLFNBQVMsR0FBR0EsU0FBUztBQUMzQixJQUFJOEIsUUFBUSxHQUFHWCxLQUFLO0FBQ3BCckQsT0FBTyxDQUFDRSxPQUFPLEdBQUc4RCxRQUFRIiwiaWdub3JlTGlzdCI6W119