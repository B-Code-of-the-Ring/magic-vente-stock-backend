cac15b2980e290a17119b43a42143252
var Stack = require('./_Stack'),
  assignMergeValue = require('./_assignMergeValue'),
  baseFor = require('./_baseFor'),
  baseMergeDeep = require('./_baseMergeDeep'),
  isObject = require('./isObject'),
  keysIn = require('./keysIn'),
  safeGet = require('./_safeGet');

/**
 * The base implementation of `_.merge` without support for multiple sources.
 *
 * @private
 * @param {Object} object The destination object.
 * @param {Object} source The source object.
 * @param {number} srcIndex The index of `source`.
 * @param {Function} [customizer] The function to customize merged values.
 * @param {Object} [stack] Tracks traversed source values and their merged
 *  counterparts.
 */
function baseMerge(object, source, srcIndex, customizer, stack) {
  if (object === source) {
    return;
  }
  baseFor(source, function (srcValue, key) {
    stack || (stack = new Stack());
    if (isObject(srcValue)) {
      baseMergeDeep(object, source, key, srcIndex, baseMerge, customizer, stack);
    } else {
      var newValue = customizer ? customizer(safeGet(object, key), srcValue, key + '', object, source, stack) : undefined;
      if (newValue === undefined) {
        newValue = srcValue;
      }
      assignMergeValue(object, key, newValue);
    }
  }, keysIn);
}
module.exports = baseMerge;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJTdGFjayIsInJlcXVpcmUiLCJhc3NpZ25NZXJnZVZhbHVlIiwiYmFzZUZvciIsImJhc2VNZXJnZURlZXAiLCJpc09iamVjdCIsImtleXNJbiIsInNhZmVHZXQiLCJiYXNlTWVyZ2UiLCJvYmplY3QiLCJzb3VyY2UiLCJzcmNJbmRleCIsImN1c3RvbWl6ZXIiLCJzdGFjayIsInNyY1ZhbHVlIiwia2V5IiwibmV3VmFsdWUiLCJ1bmRlZmluZWQiLCJtb2R1bGUiLCJleHBvcnRzIl0sInNvdXJjZXMiOlsiX2Jhc2VNZXJnZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJ2YXIgU3RhY2sgPSByZXF1aXJlKCcuL19TdGFjaycpLFxuICAgIGFzc2lnbk1lcmdlVmFsdWUgPSByZXF1aXJlKCcuL19hc3NpZ25NZXJnZVZhbHVlJyksXG4gICAgYmFzZUZvciA9IHJlcXVpcmUoJy4vX2Jhc2VGb3InKSxcbiAgICBiYXNlTWVyZ2VEZWVwID0gcmVxdWlyZSgnLi9fYmFzZU1lcmdlRGVlcCcpLFxuICAgIGlzT2JqZWN0ID0gcmVxdWlyZSgnLi9pc09iamVjdCcpLFxuICAgIGtleXNJbiA9IHJlcXVpcmUoJy4va2V5c0luJyksXG4gICAgc2FmZUdldCA9IHJlcXVpcmUoJy4vX3NhZmVHZXQnKTtcblxuLyoqXG4gKiBUaGUgYmFzZSBpbXBsZW1lbnRhdGlvbiBvZiBgXy5tZXJnZWAgd2l0aG91dCBzdXBwb3J0IGZvciBtdWx0aXBsZSBzb3VyY2VzLlxuICpcbiAqIEBwcml2YXRlXG4gKiBAcGFyYW0ge09iamVjdH0gb2JqZWN0IFRoZSBkZXN0aW5hdGlvbiBvYmplY3QuXG4gKiBAcGFyYW0ge09iamVjdH0gc291cmNlIFRoZSBzb3VyY2Ugb2JqZWN0LlxuICogQHBhcmFtIHtudW1iZXJ9IHNyY0luZGV4IFRoZSBpbmRleCBvZiBgc291cmNlYC5cbiAqIEBwYXJhbSB7RnVuY3Rpb259IFtjdXN0b21pemVyXSBUaGUgZnVuY3Rpb24gdG8gY3VzdG9taXplIG1lcmdlZCB2YWx1ZXMuXG4gKiBAcGFyYW0ge09iamVjdH0gW3N0YWNrXSBUcmFja3MgdHJhdmVyc2VkIHNvdXJjZSB2YWx1ZXMgYW5kIHRoZWlyIG1lcmdlZFxuICogIGNvdW50ZXJwYXJ0cy5cbiAqL1xuZnVuY3Rpb24gYmFzZU1lcmdlKG9iamVjdCwgc291cmNlLCBzcmNJbmRleCwgY3VzdG9taXplciwgc3RhY2spIHtcbiAgaWYgKG9iamVjdCA9PT0gc291cmNlKSB7XG4gICAgcmV0dXJuO1xuICB9XG4gIGJhc2VGb3Ioc291cmNlLCBmdW5jdGlvbihzcmNWYWx1ZSwga2V5KSB7XG4gICAgc3RhY2sgfHwgKHN0YWNrID0gbmV3IFN0YWNrKTtcbiAgICBpZiAoaXNPYmplY3Qoc3JjVmFsdWUpKSB7XG4gICAgICBiYXNlTWVyZ2VEZWVwKG9iamVjdCwgc291cmNlLCBrZXksIHNyY0luZGV4LCBiYXNlTWVyZ2UsIGN1c3RvbWl6ZXIsIHN0YWNrKTtcbiAgICB9XG4gICAgZWxzZSB7XG4gICAgICB2YXIgbmV3VmFsdWUgPSBjdXN0b21pemVyXG4gICAgICAgID8gY3VzdG9taXplcihzYWZlR2V0KG9iamVjdCwga2V5KSwgc3JjVmFsdWUsIChrZXkgKyAnJyksIG9iamVjdCwgc291cmNlLCBzdGFjaylcbiAgICAgICAgOiB1bmRlZmluZWQ7XG5cbiAgICAgIGlmIChuZXdWYWx1ZSA9PT0gdW5kZWZpbmVkKSB7XG4gICAgICAgIG5ld1ZhbHVlID0gc3JjVmFsdWU7XG4gICAgICB9XG4gICAgICBhc3NpZ25NZXJnZVZhbHVlKG9iamVjdCwga2V5LCBuZXdWYWx1ZSk7XG4gICAgfVxuICB9LCBrZXlzSW4pO1xufVxuXG5tb2R1bGUuZXhwb3J0cyA9IGJhc2VNZXJnZTtcbiJdLCJtYXBwaW5ncyI6IkFBQUEsSUFBSUEsS0FBSyxHQUFHQyxPQUFPLENBQUMsVUFBVSxDQUFDO0VBQzNCQyxnQkFBZ0IsR0FBR0QsT0FBTyxDQUFDLHFCQUFxQixDQUFDO0VBQ2pERSxPQUFPLEdBQUdGLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDL0JHLGFBQWEsR0FBR0gsT0FBTyxDQUFDLGtCQUFrQixDQUFDO0VBQzNDSSxRQUFRLEdBQUdKLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDaENLLE1BQU0sR0FBR0wsT0FBTyxDQUFDLFVBQVUsQ0FBQztFQUM1Qk0sT0FBTyxHQUFHTixPQUFPLENBQUMsWUFBWSxDQUFDOztBQUVuQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0EsU0FBU08sU0FBU0EsQ0FBQ0MsTUFBTSxFQUFFQyxNQUFNLEVBQUVDLFFBQVEsRUFBRUMsVUFBVSxFQUFFQyxLQUFLLEVBQUU7RUFDOUQsSUFBSUosTUFBTSxLQUFLQyxNQUFNLEVBQUU7SUFDckI7RUFDRjtFQUNBUCxPQUFPLENBQUNPLE1BQU0sRUFBRSxVQUFTSSxRQUFRLEVBQUVDLEdBQUcsRUFBRTtJQUN0Q0YsS0FBSyxLQUFLQSxLQUFLLEdBQUcsSUFBSWIsS0FBSyxDQUFELENBQUMsQ0FBQztJQUM1QixJQUFJSyxRQUFRLENBQUNTLFFBQVEsQ0FBQyxFQUFFO01BQ3RCVixhQUFhLENBQUNLLE1BQU0sRUFBRUMsTUFBTSxFQUFFSyxHQUFHLEVBQUVKLFFBQVEsRUFBRUgsU0FBUyxFQUFFSSxVQUFVLEVBQUVDLEtBQUssQ0FBQztJQUM1RSxDQUFDLE1BQ0k7TUFDSCxJQUFJRyxRQUFRLEdBQUdKLFVBQVUsR0FDckJBLFVBQVUsQ0FBQ0wsT0FBTyxDQUFDRSxNQUFNLEVBQUVNLEdBQUcsQ0FBQyxFQUFFRCxRQUFRLEVBQUdDLEdBQUcsR0FBRyxFQUFFLEVBQUdOLE1BQU0sRUFBRUMsTUFBTSxFQUFFRyxLQUFLLENBQUMsR0FDN0VJLFNBQVM7TUFFYixJQUFJRCxRQUFRLEtBQUtDLFNBQVMsRUFBRTtRQUMxQkQsUUFBUSxHQUFHRixRQUFRO01BQ3JCO01BQ0FaLGdCQUFnQixDQUFDTyxNQUFNLEVBQUVNLEdBQUcsRUFBRUMsUUFBUSxDQUFDO0lBQ3pDO0VBQ0YsQ0FBQyxFQUFFVixNQUFNLENBQUM7QUFDWjtBQUVBWSxNQUFNLENBQUNDLE9BQU8sR0FBR1gsU0FBUyIsImlnbm9yZUxpc3QiOltdfQ==