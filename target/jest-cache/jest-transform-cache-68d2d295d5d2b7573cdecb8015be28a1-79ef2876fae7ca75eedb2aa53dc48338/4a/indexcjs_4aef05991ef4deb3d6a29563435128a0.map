{"version":3,"names":["r","e","type","s","Date","a","n","i","Array","isArray","u","target","checked","value","o","isNameInFieldArray","t","has","substring","search","l","constructor","prototype","hasOwnProperty","d","window","HTMLElement","document","c","Set","Blob","FileList","f","filter","Boolean","m","y","get","split","reduce","p","_","test","g","replace","h","set","length","isNaN","v","BLUR","FOCUS_OUT","CHANGE","b","onBlur","onChange","onSubmit","onTouched","all","x","A","V","F","S","w","D","k","default","createContext","C","useFormContext","useContext","E","getProxyFormState","defaultValues","_defaultValues","Object","defineProperty","_proxyFormState","O","keys","j","shouldRenderFormState","name","find","U","T","shouldSubscribeByName","some","startsWith","B","useRef","current","useEffect","disabled","subject","subscribe","next","unsubscribe","N","control","exact","useState","_formState","isDirty","isLoading","dirtyFields","touchedFields","validatingFields","isValidating","isValid","errors","_updateFormState","_subjects","state","_updateValid","L","M","generateWatchOutput","watch","add","map","watchAll","R","defaultValue","values","_names","_formValues","_getWatch","_removeUnmounted","P","shouldUnregister","array","register","rules","_options","updateMounted","_fields","_f","mount","_state","action","unregister","_updateDisabledField","fields","field","useCallback","ref","focus","select","setCustomValidity","reportValidity","formState","fieldState","defineProperties","invalid","enumerable","isTouched","error","q","W","appendErrors","types","I","generateId","performance","now","Math","random","toString","$","getFocusFieldName","shouldFocus","focusName","focusIndex","H","isOnSubmit","isOnBlur","isOnChange","isOnAll","isOnTouch","G","isWatched","slice","J","iterateFieldsByAction","refs","z","updateFieldArrayRootError","K","Q","X","ownerDocument","defaultView","Y","Z","ee","RegExp","te","re","se","attributes","ae","ne","ie","every","message","ue","oe","required","maxLength","minLength","min","max","pattern","validate","valueAsNumber","bind","getMinMaxMessage","valueAsDate","toDateString","match","le","appendAt","de","ce","fe","moveArrayAt","splice","me","prependAt","ye","removeArrayAt","sort","pe","swapArrayAt","_e","ge","updateAt","he","createSubject","observers","push","ve","be","getTime","includes","xe","Ae","Ve","isConnected","Fe","Se","we","De","getDirtyFields","ke","getFieldValueAs","setValueAs","NaN","Ce","files","selectedOptions","Ee","getResolverOptions","criteriaMode","names","shouldUseNativeValidation","Oe","source","je","Ue","join","pop","Te","skipValidation","Be","unsetEmptyArray","Ne","mode","reValidateMode","shouldFocusError","Le","submitCount","isSubmitted","isSubmitting","isSubmitSuccessful","unMount","resolver","_updateIsValidating","from","forEach","updateValidAndValue","defaultChecked","updateTouchAndDirty","shouldRenderByError","delayError","callback","clearTimeout","setTimeout","context","valid","_getDirty","setFieldValue","options","selected","shouldDirty","shouldTouch","shouldValidate","setValues","setValue","Number","deps","_focusInput","Promise","getFieldState","setError","delete","keepValue","keepError","keepDirty","keepTouched","keepIsValidating","keepDefaultValue","keepIsValid","progressive","querySelectorAll","_focusError","handleSubmit","preventDefault","persist","_reset","keepDefaultValues","keepValues","keepDirtyValues","closest","reset","keepSubmitCount","keepIsSubmitted","keepErrors","keepIsSubmitSuccessful","_executeSchema","_updateFieldArray","argA","argB","_getFieldArray","_resetDefaultValues","then","resetOptions","_disableForm","_setErrors","trigger","getValues","resetField","clearErrors","setFocus","shouldSelect","exports","Controller","render","Form","children","method","headers","encType","onError","onSuccess","validateStatus","FormData","JSON","stringify","append","data","event","formData","formDataJson","fetch","body","status","response","String","createElement","Fragment","submit","noValidate","FormProvider","Provider","useController","useFieldArray","keyName","swap","move","prepend","remove","insert","update","useMemo","useForm","useFormState","useWatch"],"sources":["../src/utils/isCheckBoxInput.ts","../src/utils/isDateObject.ts","../src/utils/isNullOrUndefined.ts","../src/utils/isObject.ts","../src/logic/getEventValue.ts","../src/logic/isNameInFieldArray.ts","../src/logic/getNodeParentName.ts","../src/utils/isPlainObject.ts","../src/utils/isWeb.ts","../src/utils/cloneObject.ts","../src/utils/compact.ts","../src/utils/isUndefined.ts","../src/utils/get.ts","../src/utils/isBoolean.ts","../src/utils/isKey.ts","../src/utils/stringToPath.ts","../src/utils/set.ts","../src/constants.ts","../src/useFormContext.tsx","../src/logic/getProxyFormState.ts","../src/utils/isEmptyObject.ts","../src/logic/shouldRenderFormState.ts","../src/utils/convertToArrayPayload.ts","../src/logic/shouldSubscribeByName.ts","../src/useSubscribe.ts","../src/useFormState.ts","../src/utils/isString.ts","../src/logic/generateWatchOutput.ts","../src/useWatch.ts","../src/useController.ts","../src/controller.tsx","../src/form.tsx","../src/logic/appendErrors.ts","../src/logic/generateId.ts","../src/logic/getFocusFieldName.ts","../src/logic/getValidationModes.ts","../src/logic/isWatched.ts","../src/logic/iterateFieldsByAction.ts","../src/logic/updateFieldArrayRootError.ts","../src/utils/isFileInput.ts","../src/utils/isFunction.ts","../src/utils/isHTMLElement.ts","../src/utils/isMessage.ts","../src/utils/isRadioInput.ts","../src/utils/isRegex.ts","../src/logic/getCheckboxValue.ts","../src/logic/getRadioValue.ts","../src/logic/getValidateError.ts","../src/logic/getValueAndMessage.ts","../src/logic/validateField.ts","../src/utils/append.ts","../src/utils/fillEmptyArray.ts","../src/utils/insert.ts","../src/utils/move.ts","../src/utils/prepend.ts","../src/utils/remove.ts","../src/utils/swap.ts","../src/utils/unset.ts","../src/utils/update.ts","../src/utils/createSubject.ts","../src/utils/isPrimitive.ts","../src/utils/deepEqual.ts","../src/utils/isMultipleSelect.ts","../src/utils/isRadioOrCheckbox.ts","../src/utils/live.ts","../src/utils/objectHasFunction.ts","../src/logic/getDirtyFields.ts","../src/logic/getFieldValueAs.ts","../src/logic/getFieldValue.ts","../src/logic/getResolverOptions.ts","../src/logic/getRuleValue.ts","../src/logic/hasValidation.ts","../src/logic/schemaErrorLookup.ts","../src/logic/skipValidation.ts","../src/logic/unsetEmptyArray.ts","../src/logic/createFormControl.ts","../src/useFieldArray.ts","../src/useForm.ts"],"sourcesContent":["import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'checkbox';\n","export default (value: unknown): value is Date => value instanceof Date;\n","export default (value: unknown): value is null | undefined => value == null;\n","import isDateObject from './isDateObject';\nimport isNullOrUndefined from './isNullOrUndefined';\n\nexport const isObjectType = (value: unknown): value is object =>\n  typeof value === 'object';\n\nexport default <T extends object>(value: unknown): value is T =>\n  !isNullOrUndefined(value) &&\n  !Array.isArray(value) &&\n  isObjectType(value) &&\n  !isDateObject(value);\n","import isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isObject from '../utils/isObject';\n\ntype Event = { target: any };\n\nexport default (event: unknown) =>\n  isObject(event) && (event as Event).target\n    ? isCheckBoxInput((event as Event).target)\n      ? (event as Event).target.checked\n      : (event as Event).target.value\n    : event;\n","import { InternalFieldName } from '../types';\n\nimport getNodeParentName from './getNodeParentName';\n\nexport default (names: Set<InternalFieldName>, name: InternalFieldName) =>\n  names.has(getNodeParentName(name));\n","export default (name: string) =>\n  name.substring(0, name.search(/\\.\\d+(\\.|$)/)) || name;\n","import isObject from './isObject';\n\nexport default (tempObject: object) => {\n  const prototypeCopy =\n    tempObject.constructor && tempObject.constructor.prototype;\n\n  return (\n    isObject(prototypeCopy) && prototypeCopy.hasOwnProperty('isPrototypeOf')\n  );\n};\n","export default typeof window !== 'undefined' &&\n  typeof window.HTMLElement !== 'undefined' &&\n  typeof document !== 'undefined';\n","import isObject from './isObject';\nimport isPlainObject from './isPlainObject';\nimport isWeb from './isWeb';\n\nexport default function cloneObject<T>(data: T): T {\n  let copy: any;\n  const isArray = Array.isArray(data);\n\n  if (data instanceof Date) {\n    copy = new Date(data);\n  } else if (data instanceof Set) {\n    copy = new Set(data);\n  } else if (\n    !(isWeb && (data instanceof Blob || data instanceof FileList)) &&\n    (isArray || isObject(data))\n  ) {\n    copy = isArray ? [] : {};\n\n    if (!isArray && !isPlainObject(data)) {\n      copy = data;\n    } else {\n      for (const key in data) {\n        if (data.hasOwnProperty(key)) {\n          copy[key] = cloneObject(data[key]);\n        }\n      }\n    }\n  } else {\n    return data;\n  }\n\n  return copy;\n}\n","export default <TValue>(value: TValue[]) =>\n  Array.isArray(value) ? value.filter(Boolean) : [];\n","export default (val: unknown): val is undefined => val === undefined;\n","import compact from './compact';\nimport isNullOrUndefined from './isNullOrUndefined';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\n\nexport default <T>(object: T, path?: string, defaultValue?: unknown): any => {\n  if (!path || !isObject(object)) {\n    return defaultValue;\n  }\n\n  const result = compact(path.split(/[,[\\].]+?/)).reduce(\n    (result, key) =>\n      isNullOrUndefined(result) ? result : result[key as keyof {}],\n    object,\n  );\n\n  return isUndefined(result) || result === object\n    ? isUndefined(object[path as keyof T])\n      ? defaultValue\n      : object[path as keyof T]\n    : result;\n};\n","export default (value: unknown): value is boolean => typeof value === 'boolean';\n","export default (value: string) => /^\\w*$/.test(value);\n","import compact from './compact';\n\nexport default (input: string): string[] =>\n  compact(input.replace(/[\"|']|\\]/g, '').split(/\\.|\\[/));\n","import { FieldValues } from '../types';\n\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport stringToPath from './stringToPath';\n\nexport default (object: FieldValues, path: string, value?: unknown) => {\n  let index = -1;\n  const tempPath = isKey(path) ? [path] : stringToPath(path);\n  const length = tempPath.length;\n  const lastIndex = length - 1;\n\n  while (++index < length) {\n    const key = tempPath[index];\n    let newValue = value;\n\n    if (index !== lastIndex) {\n      const objValue = object[key];\n      newValue =\n        isObject(objValue) || Array.isArray(objValue)\n          ? objValue\n          : !isNaN(+tempPath[index + 1])\n          ? []\n          : {};\n    }\n\n    if (key === '__proto__') {\n      return;\n    }\n\n    object[key] = newValue;\n    object = object[key];\n  }\n  return object;\n};\n","export const EVENTS = {\n  BLUR: 'blur',\n  FOCUS_OUT: 'focusout',\n  CHANGE: 'change',\n} as const;\n\nexport const VALIDATION_MODE = {\n  onBlur: 'onBlur',\n  onChange: 'onChange',\n  onSubmit: 'onSubmit',\n  onTouched: 'onTouched',\n  all: 'all',\n} as const;\n\nexport const INPUT_VALIDATION_RULES = {\n  max: 'max',\n  min: 'min',\n  maxLength: 'maxLength',\n  minLength: 'minLength',\n  pattern: 'pattern',\n  required: 'required',\n  validate: 'validate',\n} as const;\n","import React from 'react';\n\nimport { FieldValues, FormProviderProps, UseFormReturn } from './types';\n\nconst HookFormContext = React.createContext<UseFormReturn | null>(null);\n\n/**\n * This custom hook allows you to access the form context. useFormContext is intended to be used in deeply nested structures, where it would become inconvenient to pass the context as a prop. To be used with {@link FormProvider}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @returns return all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const useFormContext = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TransformedValues extends FieldValues | undefined = undefined,\n>(): UseFormReturn<TFieldValues, TContext, TransformedValues> =>\n  React.useContext(HookFormContext) as UseFormReturn<\n    TFieldValues,\n    TContext,\n    TransformedValues\n  >;\n\n/**\n * A provider component that propagates the `useForm` methods to all children components via [React Context](https://reactjs.org/docs/context.html) API. To be used with {@link useFormContext}.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformcontext) • [Demo](https://codesandbox.io/s/react-hook-form-v7-form-context-ytudi)\n *\n * @param props - all useForm methods\n *\n * @example\n * ```tsx\n * function App() {\n *   const methods = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   return (\n *     <FormProvider {...methods} >\n *       <form onSubmit={methods.handleSubmit(onSubmit)}>\n *         <NestedInput />\n *         <input type=\"submit\" />\n *       </form>\n *     </FormProvider>\n *   );\n * }\n *\n *  function NestedInput() {\n *   const { register } = useFormContext(); // retrieve all hook methods\n *   return <input {...register(\"test\")} />;\n * }\n * ```\n */\nexport const FormProvider = <\n  TFieldValues extends FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: FormProviderProps<TFieldValues, TContext, TTransformedValues>,\n) => {\n  const { children, ...data } = props;\n  return (\n    <HookFormContext.Provider value={data as unknown as UseFormReturn}>\n      {children}\n    </HookFormContext.Provider>\n  );\n};\n","import { VALIDATION_MODE } from '../constants';\nimport { Control, FieldValues, FormState, ReadFormState } from '../types';\n\nexport default <TFieldValues extends FieldValues, TContext = any>(\n  formState: FormState<TFieldValues>,\n  control: Control<TFieldValues, TContext>,\n  localProxyFormState?: ReadFormState,\n  isRoot = true,\n) => {\n  const result = {\n    defaultValues: control._defaultValues,\n  } as typeof formState;\n\n  for (const key in formState) {\n    Object.defineProperty(result, key, {\n      get: () => {\n        const _key = key as keyof FormState<TFieldValues> & keyof ReadFormState;\n\n        if (control._proxyFormState[_key] !== VALIDATION_MODE.all) {\n          control._proxyFormState[_key] = !isRoot || VALIDATION_MODE.all;\n        }\n\n        localProxyFormState && (localProxyFormState[_key] = true);\n        return formState[_key];\n      },\n    });\n  }\n\n  return result;\n};\n","import { EmptyObject } from '../types';\n\nimport isObject from './isObject';\n\nexport default (value: unknown): value is EmptyObject =>\n  isObject(value) && !Object.keys(value).length;\n","import { VALIDATION_MODE } from '../constants';\nimport {\n  Control,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  ReadFormState,\n} from '../types';\nimport isEmptyObject from '../utils/isEmptyObject';\n\nexport default <T extends FieldValues, K extends ReadFormState>(\n  formStateData: Partial<FormState<T>> & { name?: InternalFieldName },\n  _proxyFormState: K,\n  updateFormState: Control<T>['_updateFormState'],\n  isRoot?: boolean,\n) => {\n  updateFormState(formStateData);\n  const { name, ...formState } = formStateData;\n\n  return (\n    isEmptyObject(formState) ||\n    Object.keys(formState).length >= Object.keys(_proxyFormState).length ||\n    Object.keys(formState).find(\n      (key) =>\n        _proxyFormState[key as keyof ReadFormState] ===\n        (!isRoot || VALIDATION_MODE.all),\n    )\n  );\n};\n","export default <T>(value: T) => (Array.isArray(value) ? value : [value]);\n","import convertToArrayPayload from '../utils/convertToArrayPayload';\n\nexport default <T extends string | string[] | undefined>(\n  name?: T,\n  signalName?: string,\n  exact?: boolean,\n) =>\n  !name ||\n  !signalName ||\n  name === signalName ||\n  convertToArrayPayload(name).some(\n    (currentName) =>\n      currentName &&\n      (exact\n        ? currentName === signalName\n        : currentName.startsWith(signalName) ||\n          signalName.startsWith(currentName)),\n  );\n","import React from 'react';\n\nimport { Subject } from './utils/createSubject';\n\ntype Props<T> = {\n  disabled?: boolean;\n  subject: Subject<T>;\n  next: (value: T) => void;\n};\n\nexport function useSubscribe<T>(props: Props<T>) {\n  const _props = React.useRef(props);\n  _props.current = props;\n\n  React.useEffect(() => {\n    const subscription =\n      !props.disabled &&\n      _props.current.subject &&\n      _props.current.subject.subscribe({\n        next: _props.current.next,\n      });\n\n    return () => {\n      subscription && subscription.unsubscribe();\n    };\n  }, [props.disabled]);\n}\n","import React from 'react';\n\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormStateProps,\n  UseFormStateReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * This custom hook allows you to subscribe to each form state, and isolate the re-render at the custom hook level. It has its scope in terms of form state subscription, so it would not affect other useFormState and useForm. Using this hook can reduce the re-render impact on large and complex form application.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useformstate) • [Demo](https://codesandbox.io/s/useformstate-75xly)\n *\n * @param props - include options on specify fields to subscribe. {@link UseFormStateReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, control } = useForm({\n *     defaultValues: {\n *     firstName: \"firstName\"\n *   }});\n *   const { dirtyFields } = useFormState({\n *     control\n *   });\n *   const onSubmit = (data) => console.log(data);\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input {...register(\"firstName\")} placeholder=\"First Name\" />\n *       {dirtyFields.firstName && <p>Field is dirty.</p>}\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nfunction useFormState<TFieldValues extends FieldValues = FieldValues>(\n  props?: UseFormStateProps<TFieldValues>,\n): UseFormStateReturn<TFieldValues> {\n  const methods = useFormContext<TFieldValues>();\n  const { control = methods.control, disabled, name, exact } = props || {};\n  const [formState, updateFormState] = React.useState(control._formState);\n  const _mounted = React.useRef(true);\n  const _localProxyFormState = React.useRef({\n    isDirty: false,\n    isLoading: false,\n    dirtyFields: false,\n    touchedFields: false,\n    validatingFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  });\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    next: (\n      value: Partial<FormState<TFieldValues>> & { name?: InternalFieldName },\n    ) =>\n      _mounted.current &&\n      shouldSubscribeByName(\n        _name.current as InternalFieldName,\n        value.name,\n        exact,\n      ) &&\n      shouldRenderFormState(\n        value,\n        _localProxyFormState.current,\n        control._updateFormState,\n      ) &&\n      updateFormState({\n        ...control._formState,\n        ...value,\n      }),\n    subject: control._subjects.state,\n  });\n\n  React.useEffect(() => {\n    _mounted.current = true;\n    _localProxyFormState.current.isValid && control._updateValid(true);\n\n    return () => {\n      _mounted.current = false;\n    };\n  }, [control]);\n\n  return getProxyFormState(\n    formState,\n    control,\n    _localProxyFormState.current,\n    false,\n  );\n}\n\nexport { useFormState };\n","export default (value: unknown): value is string => typeof value === 'string';\n","import { DeepPartial, FieldValues, Names } from '../types';\nimport get from '../utils/get';\nimport isString from '../utils/isString';\n\nexport default <T>(\n  names: string | string[] | undefined,\n  _names: Names,\n  formValues?: FieldValues,\n  isGlobal?: boolean,\n  defaultValue?: DeepPartial<T> | unknown,\n) => {\n  if (isString(names)) {\n    isGlobal && _names.watch.add(names);\n    return get(formValues, names, defaultValue);\n  }\n\n  if (Array.isArray(names)) {\n    return names.map(\n      (fieldName) => (\n        isGlobal && _names.watch.add(fieldName), get(formValues, fieldName)\n      ),\n    );\n  }\n\n  isGlobal && (_names.watchAll = true);\n\n  return formValues;\n};\n","import React from 'react';\n\nimport generateWatchOutput from './logic/generateWatchOutput';\nimport shouldSubscribeByName from './logic/shouldSubscribeByName';\nimport cloneObject from './utils/cloneObject';\nimport {\n  Control,\n  DeepPartialSkipArrayKey,\n  FieldPath,\n  FieldPathValue,\n  FieldPathValues,\n  FieldValues,\n  InternalFieldName,\n  UseWatchProps,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Subscribe to the entire form values change and re-render at the hook level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   control,\n *   defaultValue: {\n *     name: \"data\"\n *   },\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(props: {\n  defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): DeepPartialSkipArrayKey<TFieldValues>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   control,\n *   name: \"fieldA\",\n *   defaultValue: \"default value\",\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(props: {\n  name: TFieldName;\n  defaultValue?: FieldPathValue<TFieldValues, TFieldName>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValue<TFieldValues, TFieldName>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @param props - defaultValue, disable subscription and match exact name.\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   control,\n *   name: [\"fieldA\", \"fieldB\"],\n *   defaultValue: {\n *     fieldA: \"data\",\n *     fieldB: \"data\"\n *   },\n *   exact: false,\n * })\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldNames extends readonly FieldPath<TFieldValues>[] = readonly FieldPath<TFieldValues>[],\n>(props: {\n  name: readonly [...TFieldNames];\n  defaultValue?: DeepPartialSkipArrayKey<TFieldValues>;\n  control?: Control<TFieldValues>;\n  disabled?: boolean;\n  exact?: boolean;\n}): FieldPathValues<TFieldValues, TFieldNames>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * // can skip passing down the control into useWatch if the form is wrapped with the FormProvider\n * const values = useWatch()\n * ```\n */\nexport function useWatch<\n  TFieldValues extends FieldValues = FieldValues,\n>(): DeepPartialSkipArrayKey<TFieldValues>;\n/**\n * Custom hook to subscribe to field change and isolate re-rendering at the component level.\n *\n * @remarks\n *\n * [API](https://react-hook-form.com/docs/usewatch) • [Demo](https://codesandbox.io/s/react-hook-form-v7-ts-usewatch-h9i5e)\n *\n * @example\n * ```tsx\n * const { control } = useForm();\n * const values = useWatch({\n *   name: \"fieldName\"\n *   control,\n * })\n * ```\n */\nexport function useWatch<TFieldValues extends FieldValues>(\n  props?: UseWatchProps<TFieldValues>,\n) {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    defaultValue,\n    disabled,\n    exact,\n  } = props || {};\n  const _name = React.useRef(name);\n\n  _name.current = name;\n\n  useSubscribe({\n    disabled,\n    subject: control._subjects.values,\n    next: (formState: { name?: InternalFieldName; values?: FieldValues }) => {\n      if (\n        shouldSubscribeByName(\n          _name.current as InternalFieldName,\n          formState.name,\n          exact,\n        )\n      ) {\n        updateValue(\n          cloneObject(\n            generateWatchOutput(\n              _name.current as InternalFieldName | InternalFieldName[],\n              control._names,\n              formState.values || control._formValues,\n              false,\n              defaultValue,\n            ),\n          ),\n        );\n      }\n    },\n  });\n\n  const [value, updateValue] = React.useState(\n    control._getWatch(\n      name as InternalFieldName,\n      defaultValue as DeepPartialSkipArrayKey<TFieldValues>,\n    ),\n  );\n\n  React.useEffect(() => control._removeUnmounted());\n\n  return value;\n}\n","import React from 'react';\n\nimport getEventValue from './logic/getEventValue';\nimport isNameInFieldArray from './logic/isNameInFieldArray';\nimport cloneObject from './utils/cloneObject';\nimport get from './utils/get';\nimport isBoolean from './utils/isBoolean';\nimport isUndefined from './utils/isUndefined';\nimport set from './utils/set';\nimport { EVENTS } from './constants';\nimport {\n  ControllerFieldState,\n  Field,\n  FieldPath,\n  FieldPathValue,\n  FieldValues,\n  InternalFieldName,\n  UseControllerProps,\n  UseControllerReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useFormState } from './useFormState';\nimport { useWatch } from './useWatch';\n\n/**\n * Custom hook to work with controlled component, this function provide you with both form and field level state. Re-render is isolated at the hook level.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller) • [Demo](https://codesandbox.io/s/usecontroller-0o8px)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns field properties, field and form state. {@link UseControllerReturn}\n *\n * @example\n * ```tsx\n * function Input(props) {\n *   const { field, fieldState, formState } = useController(props);\n *   return (\n *     <div>\n *       <input {...field} placeholder={props.name} />\n *       <p>{fieldState.isTouched && \"Touched\"}</p>\n *       <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *     </div>\n *   );\n * }\n * ```\n */\nexport function useController<\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: UseControllerProps<TFieldValues, TName>,\n): UseControllerReturn<TFieldValues, TName> {\n  const methods = useFormContext<TFieldValues>();\n  const { name, disabled, control = methods.control, shouldUnregister } = props;\n  const isArrayField = isNameInFieldArray(control._names.array, name);\n  const value = useWatch({\n    control,\n    name,\n    defaultValue: get(\n      control._formValues,\n      name,\n      get(control._defaultValues, name, props.defaultValue),\n    ),\n    exact: true,\n  }) as FieldPathValue<TFieldValues, TName>;\n  const formState = useFormState({\n    control,\n    name,\n  });\n\n  const _registerProps = React.useRef(\n    control.register(name, {\n      ...props.rules,\n      value,\n      ...(isBoolean(props.disabled) ? { disabled: props.disabled } : {}),\n    }),\n  );\n\n  React.useEffect(() => {\n    const _shouldUnregisterField =\n      control._options.shouldUnregister || shouldUnregister;\n\n    const updateMounted = (name: InternalFieldName, value: boolean) => {\n      const field: Field = get(control._fields, name);\n\n      if (field) {\n        field._f.mount = value;\n      }\n    };\n\n    updateMounted(name, true);\n\n    if (_shouldUnregisterField) {\n      const value = cloneObject(get(control._options.defaultValues, name));\n      set(control._defaultValues, name, value);\n      if (isUndefined(get(control._formValues, name))) {\n        set(control._formValues, name, value);\n      }\n    }\n\n    return () => {\n      (\n        isArrayField\n          ? _shouldUnregisterField && !control._state.action\n          : _shouldUnregisterField\n      )\n        ? control.unregister(name)\n        : updateMounted(name, false);\n    };\n  }, [name, control, isArrayField, shouldUnregister]);\n\n  React.useEffect(() => {\n    if (get(control._fields, name)) {\n      control._updateDisabledField({\n        disabled,\n        fields: control._fields,\n        name,\n        value: get(control._fields, name)._f.value,\n      });\n    }\n  }, [disabled, name, control]);\n\n  return {\n    field: {\n      name,\n      value,\n      ...(isBoolean(disabled) || formState.disabled\n        ? { disabled: formState.disabled || disabled }\n        : {}),\n      onChange: React.useCallback(\n        (event) =>\n          _registerProps.current.onChange({\n            target: {\n              value: getEventValue(event),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.CHANGE,\n          }),\n        [name],\n      ),\n      onBlur: React.useCallback(\n        () =>\n          _registerProps.current.onBlur({\n            target: {\n              value: get(control._formValues, name),\n              name: name as InternalFieldName,\n            },\n            type: EVENTS.BLUR,\n          }),\n        [name, control],\n      ),\n      ref: (elm) => {\n        const field = get(control._fields, name);\n\n        if (field && elm) {\n          field._f.ref = {\n            focus: () => elm.focus(),\n            select: () => elm.select(),\n            setCustomValidity: (message: string) =>\n              elm.setCustomValidity(message),\n            reportValidity: () => elm.reportValidity(),\n          };\n        }\n      },\n    },\n    formState,\n    fieldState: Object.defineProperties(\n      {},\n      {\n        invalid: {\n          enumerable: true,\n          get: () => !!get(formState.errors, name),\n        },\n        isDirty: {\n          enumerable: true,\n          get: () => !!get(formState.dirtyFields, name),\n        },\n        isTouched: {\n          enumerable: true,\n          get: () => !!get(formState.touchedFields, name),\n        },\n        isValidating: {\n          enumerable: true,\n          get: () => !!get(formState.validatingFields, name),\n        },\n        error: {\n          enumerable: true,\n          get: () => get(formState.errors, name),\n        },\n      },\n    ) as ControllerFieldState,\n  };\n}\n","import { ControllerProps, FieldPath, FieldValues } from './types';\nimport { useController } from './useController';\n\n/**\n * Component based on `useController` hook to work with controlled component.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usecontroller/controller) • [Demo](https://codesandbox.io/s/react-hook-form-v6-controller-ts-jwyzw) • [Video](https://www.youtube.com/watch?v=N2UNk_UCVyA)\n *\n * @param props - the path name to the form field value, and validation rules.\n *\n * @returns provide field handler functions, field and form state.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control } = useForm<FormValues>({\n *     defaultValues: {\n *       test: \"\"\n *     }\n *   });\n *\n *   return (\n *     <form>\n *       <Controller\n *         control={control}\n *         name=\"test\"\n *         render={({ field: { onChange, onBlur, value, ref }, formState, fieldState }) => (\n *           <>\n *             <input\n *               onChange={onChange} // send value to hook form\n *               onBlur={onBlur} // notify when input is touched\n *               value={value} // return updated value\n *               ref={ref} // set ref for focus management\n *             />\n *             <p>{formState.isSubmitted ? \"submitted\" : \"\"}</p>\n *             <p>{fieldState.isTouched ? \"touched\" : \"\"}</p>\n *           </>\n *         )}\n *       />\n *     </form>\n *   );\n * }\n * ```\n */\nconst Controller = <\n  TFieldValues extends FieldValues = FieldValues,\n  TName extends FieldPath<TFieldValues> = FieldPath<TFieldValues>,\n>(\n  props: ControllerProps<TFieldValues, TName>,\n) => props.render(useController<TFieldValues, TName>(props));\n\nexport { Controller };\n","import React from 'react';\n\nimport get from './utils/get';\nimport { FieldValues, FormProps } from './types';\nimport { useFormContext } from './useFormContext';\n\nconst POST_REQUEST = 'post';\n\n/**\n * Form component to manage submission.\n *\n * @param props - to setup submission detail. {@link FormProps}\n *\n * @returns form component or headless render prop.\n *\n * @example\n * ```tsx\n * function App() {\n *   const { control, formState: { errors } } = useForm();\n *\n *   return (\n *     <Form action=\"/api\" control={control}>\n *       <input {...register(\"name\")} />\n *       <p>{errors?.root?.server && 'Server error'}</p>\n *       <button>Submit</button>\n *     </Form>\n *   );\n * }\n * ```\n */\nfunction Form<\n  T extends FieldValues,\n  U extends FieldValues | undefined = undefined,\n>(props: FormProps<T, U>) {\n  const methods = useFormContext<T>();\n  const [mounted, setMounted] = React.useState(false);\n  const {\n    control = methods.control,\n    onSubmit,\n    children,\n    action,\n    method = POST_REQUEST,\n    headers,\n    encType,\n    onError,\n    render,\n    onSuccess,\n    validateStatus,\n    ...rest\n  } = props;\n\n  const submit = async (event?: React.BaseSyntheticEvent) => {\n    let hasError = false;\n    let type = '';\n\n    await control.handleSubmit(async (data) => {\n      const formData = new FormData();\n      let formDataJson = '';\n\n      try {\n        formDataJson = JSON.stringify(data);\n      } catch {}\n\n      for (const name of control._names.mount) {\n        formData.append(name, get(data, name));\n      }\n\n      if (onSubmit) {\n        await onSubmit({\n          data,\n          event,\n          method,\n          formData,\n          formDataJson,\n        });\n      }\n\n      if (action) {\n        try {\n          const shouldStringifySubmissionData = [\n            headers && headers['Content-Type'],\n            encType,\n          ].some((value) => value && value.includes('json'));\n\n          const response = await fetch(action, {\n            method,\n            headers: {\n              ...headers,\n              ...(encType ? { 'Content-Type': encType } : {}),\n            },\n            body: shouldStringifySubmissionData ? formDataJson : formData,\n          });\n\n          if (\n            response &&\n            (validateStatus\n              ? !validateStatus(response.status)\n              : response.status < 200 || response.status >= 300)\n          ) {\n            hasError = true;\n            onError && onError({ response });\n            type = String(response.status);\n          } else {\n            onSuccess && onSuccess({ response });\n          }\n        } catch (error: unknown) {\n          hasError = true;\n          onError && onError({ error });\n        }\n      }\n    })(event);\n\n    if (hasError && props.control) {\n      props.control._subjects.state.next({\n        isSubmitSuccessful: false,\n      });\n      props.control.setError('root.server', {\n        type,\n      });\n    }\n  };\n\n  React.useEffect(() => {\n    setMounted(true);\n  }, []);\n\n  return render ? (\n    <>\n      {render({\n        submit,\n      })}\n    </>\n  ) : (\n    <form\n      noValidate={mounted}\n      action={action}\n      method={method}\n      encType={encType}\n      onSubmit={submit}\n      {...rest}\n    >\n      {children}\n    </form>\n  );\n}\n\nexport { Form };\n","import {\n  InternalFieldErrors,\n  InternalFieldName,\n  ValidateResult,\n} from '../types';\n\nexport default (\n  name: InternalFieldName,\n  validateAllFieldCriteria: boolean,\n  errors: InternalFieldErrors,\n  type: string,\n  message: ValidateResult,\n) =>\n  validateAllFieldCriteria\n    ? {\n        ...errors[name],\n        types: {\n          ...(errors[name] && errors[name]!.types ? errors[name]!.types : {}),\n          [type]: message || true,\n        },\n      }\n    : {};\n","export default () => {\n  const d =\n    typeof performance === 'undefined' ? Date.now() : performance.now() * 1000;\n\n  return 'xxxxxxxx-xxxx-4xxx-yxxx-xxxxxxxxxxxx'.replace(/[xy]/g, (c) => {\n    const r = (Math.random() * 16 + d) % 16 | 0;\n\n    return (c == 'x' ? r : (r & 0x3) | 0x8).toString(16);\n  });\n};\n","import { FieldArrayMethodProps, InternalFieldName } from '../types';\nimport isUndefined from '../utils/isUndefined';\n\nexport default (\n  name: InternalFieldName,\n  index: number,\n  options: FieldArrayMethodProps = {},\n): string =>\n  options.shouldFocus || isUndefined(options.shouldFocus)\n    ? options.focusName ||\n      `${name}.${isUndefined(options.focusIndex) ? index : options.focusIndex}.`\n    : '';\n","import { VALIDATION_MODE } from '../constants';\nimport { Mode, ValidationModeFlags } from '../types';\n\nexport default (mode?: Mode): ValidationModeFlags => ({\n  isOnSubmit: !mode || mode === VALIDATION_MODE.onSubmit,\n  isOnBlur: mode === VALIDATION_MODE.onBlur,\n  isOnChange: mode === VALIDATION_MODE.onChange,\n  isOnAll: mode === VALIDATION_MODE.all,\n  isOnTouch: mode === VALIDATION_MODE.onTouched,\n});\n","import { InternalFieldName, Names } from '../types';\n\nexport default (\n  name: InternalFieldName,\n  _names: Names,\n  isBlurEvent?: boolean,\n) =>\n  !isBlurEvent &&\n  (_names.watchAll ||\n    _names.watch.has(name) ||\n    [..._names.watch].some(\n      (watchName) =>\n        name.startsWith(watchName) &&\n        /^\\.\\w+/.test(name.slice(watchName.length)),\n    ));\n","import { FieldRefs, InternalFieldName, Ref } from '../types';\nimport { get } from '../utils';\nimport isObject from '../utils/isObject';\n\nconst iterateFieldsByAction = (\n  fields: FieldRefs,\n  action: (ref: Ref, name: string) => 1 | undefined | void,\n  fieldsNames?: Set<InternalFieldName> | InternalFieldName[] | 0,\n  abortEarly?: boolean,\n) => {\n  for (const key of fieldsNames || Object.keys(fields)) {\n    const field = get(fields, key);\n\n    if (field) {\n      const { _f, ...currentField } = field;\n\n      if (_f) {\n        if (_f.refs && _f.refs[0] && action(_f.refs[0], key) && !abortEarly) {\n          break;\n        } else if (_f.ref && action(_f.ref, _f.name) && !abortEarly) {\n          break;\n        } else {\n          iterateFieldsByAction(currentField, action);\n        }\n      } else if (isObject(currentField)) {\n        iterateFieldsByAction(currentField, action);\n      }\n    }\n  }\n};\n\nexport default iterateFieldsByAction;\n","import {\n  FieldError,\n  FieldErrors,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport compact from '../utils/compact';\nimport get from '../utils/get';\nimport set from '../utils/set';\n\nexport default <T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  error: Partial<Record<string, FieldError>>,\n  name: InternalFieldName,\n): FieldErrors<T> => {\n  const fieldArrayErrors = compact(get(errors, name));\n  set(fieldArrayErrors, 'root', error[name]);\n  set(errors, name, fieldArrayErrors);\n  return errors;\n};\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'file';\n","export default (value: unknown): value is Function =>\n  typeof value === 'function';\n","import isWeb from './isWeb';\n\nexport default (value: unknown): value is HTMLElement => {\n  if (!isWeb) {\n    return false;\n  }\n\n  const owner = value ? ((value as HTMLElement).ownerDocument as Document) : 0;\n  return (\n    value instanceof\n    (owner && owner.defaultView ? owner.defaultView.HTMLElement : HTMLElement)\n  );\n};\n","import { Message } from '../types';\nimport isString from '../utils/isString';\n\nexport default (value: unknown): value is Message => isString(value);\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLInputElement =>\n  element.type === 'radio';\n","export default (value: unknown): value is RegExp => value instanceof RegExp;\n","import isUndefined from '../utils/isUndefined';\n\ntype CheckboxFieldResult = {\n  isValid: boolean;\n  value: string | string[] | boolean | undefined;\n};\n\nconst defaultResult: CheckboxFieldResult = {\n  value: false,\n  isValid: false,\n};\n\nconst validResult = { value: true, isValid: true };\n\nexport default (options?: HTMLInputElement[]): CheckboxFieldResult => {\n  if (Array.isArray(options)) {\n    if (options.length > 1) {\n      const values = options\n        .filter((option) => option && option.checked && !option.disabled)\n        .map((option) => option.value);\n      return { value: values, isValid: !!values.length };\n    }\n\n    return options[0].checked && !options[0].disabled\n      ? // @ts-expect-error expected to work in the browser\n        options[0].attributes && !isUndefined(options[0].attributes.value)\n        ? isUndefined(options[0].value) || options[0].value === ''\n          ? validResult\n          : { value: options[0].value, isValid: true }\n        : validResult\n      : defaultResult;\n  }\n\n  return defaultResult;\n};\n","type RadioFieldResult = {\n  isValid: boolean;\n  value: number | string | null;\n};\n\nconst defaultReturn: RadioFieldResult = {\n  isValid: false,\n  value: null,\n};\n\nexport default (options?: HTMLInputElement[]): RadioFieldResult =>\n  Array.isArray(options)\n    ? options.reduce(\n        (previous, option): RadioFieldResult =>\n          option && option.checked && !option.disabled\n            ? {\n                isValid: true,\n                value: option.value,\n              }\n            : previous,\n        defaultReturn,\n      )\n    : defaultReturn;\n","import { FieldError, Ref, ValidateResult } from '../types';\nimport isBoolean from '../utils/isBoolean';\nimport isMessage from '../utils/isMessage';\n\nexport default function getValidateError(\n  result: ValidateResult,\n  ref: Ref,\n  type = 'validate',\n): FieldError | void {\n  if (\n    isMessage(result) ||\n    (Array.isArray(result) && result.every(isMessage)) ||\n    (isBoolean(result) && !result)\n  ) {\n    return {\n      type,\n      message: isMessage(result) ? result : '',\n      ref,\n    };\n  }\n}\n","import { ValidationRule } from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\n\nexport default (validationData?: ValidationRule) =>\n  isObject(validationData) && !isRegex(validationData)\n    ? validationData\n    : {\n        value: validationData,\n        message: '',\n      };\n","import { INPUT_VALIDATION_RULES } from '../constants';\nimport {\n  Field,\n  FieldError,\n  FieldValues,\n  InternalFieldErrors,\n  MaxType,\n  Message,\n  MinType,\n  NativeFieldValue,\n} from '../types';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMessage from '../utils/isMessage';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isRadioInput from '../utils/isRadioInput';\nimport isRegex from '../utils/isRegex';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nimport appendErrors from './appendErrors';\nimport getCheckboxValue from './getCheckboxValue';\nimport getRadioValue from './getRadioValue';\nimport getValidateError from './getValidateError';\nimport getValueAndMessage from './getValueAndMessage';\n\nexport default async <T extends FieldValues>(\n  field: Field,\n  formValues: T,\n  validateAllFieldCriteria: boolean,\n  shouldUseNativeValidation?: boolean,\n  isFieldArray?: boolean,\n): Promise<InternalFieldErrors> => {\n  const {\n    ref,\n    refs,\n    required,\n    maxLength,\n    minLength,\n    min,\n    max,\n    pattern,\n    validate,\n    name,\n    valueAsNumber,\n    mount,\n    disabled,\n  } = field._f;\n  const inputValue: NativeFieldValue = get(formValues, name);\n  if (!mount || disabled) {\n    return {};\n  }\n  const inputRef: HTMLInputElement = refs ? refs[0] : (ref as HTMLInputElement);\n  const setCustomValidity = (message?: string | boolean) => {\n    if (shouldUseNativeValidation && inputRef.reportValidity) {\n      inputRef.setCustomValidity(isBoolean(message) ? '' : message || '');\n      inputRef.reportValidity();\n    }\n  };\n  const error: InternalFieldErrors = {};\n  const isRadio = isRadioInput(ref);\n  const isCheckBox = isCheckBoxInput(ref);\n  const isRadioOrCheckbox = isRadio || isCheckBox;\n  const isEmpty =\n    ((valueAsNumber || isFileInput(ref)) &&\n      isUndefined(ref.value) &&\n      isUndefined(inputValue)) ||\n    (isHTMLElement(ref) && ref.value === '') ||\n    inputValue === '' ||\n    (Array.isArray(inputValue) && !inputValue.length);\n  const appendErrorsCurry = appendErrors.bind(\n    null,\n    name,\n    validateAllFieldCriteria,\n    error,\n  );\n  const getMinMaxMessage = (\n    exceedMax: boolean,\n    maxLengthMessage: Message,\n    minLengthMessage: Message,\n    maxType: MaxType = INPUT_VALIDATION_RULES.maxLength,\n    minType: MinType = INPUT_VALIDATION_RULES.minLength,\n  ) => {\n    const message = exceedMax ? maxLengthMessage : minLengthMessage;\n    error[name] = {\n      type: exceedMax ? maxType : minType,\n      message,\n      ref,\n      ...appendErrorsCurry(exceedMax ? maxType : minType, message),\n    };\n  };\n\n  if (\n    isFieldArray\n      ? !Array.isArray(inputValue) || !inputValue.length\n      : required &&\n        ((!isRadioOrCheckbox && (isEmpty || isNullOrUndefined(inputValue))) ||\n          (isBoolean(inputValue) && !inputValue) ||\n          (isCheckBox && !getCheckboxValue(refs).isValid) ||\n          (isRadio && !getRadioValue(refs).isValid))\n  ) {\n    const { value, message } = isMessage(required)\n      ? { value: !!required, message: required }\n      : getValueAndMessage(required);\n\n    if (value) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.required,\n        message,\n        ref: inputRef,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.required, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (!isEmpty && (!isNullOrUndefined(min) || !isNullOrUndefined(max))) {\n    let exceedMax;\n    let exceedMin;\n    const maxOutput = getValueAndMessage(max);\n    const minOutput = getValueAndMessage(min);\n\n    if (!isNullOrUndefined(inputValue) && !isNaN(inputValue as number)) {\n      const valueNumber =\n        (ref as HTMLInputElement).valueAsNumber ||\n        (inputValue ? +inputValue : inputValue);\n      if (!isNullOrUndefined(maxOutput.value)) {\n        exceedMax = valueNumber > maxOutput.value;\n      }\n      if (!isNullOrUndefined(minOutput.value)) {\n        exceedMin = valueNumber < minOutput.value;\n      }\n    } else {\n      const valueDate =\n        (ref as HTMLInputElement).valueAsDate || new Date(inputValue as string);\n      const convertTimeToDate = (time: unknown) =>\n        new Date(new Date().toDateString() + ' ' + time);\n      const isTime = ref.type == 'time';\n      const isWeek = ref.type == 'week';\n\n      if (isString(maxOutput.value) && inputValue) {\n        exceedMax = isTime\n          ? convertTimeToDate(inputValue) > convertTimeToDate(maxOutput.value)\n          : isWeek\n          ? inputValue > maxOutput.value\n          : valueDate > new Date(maxOutput.value);\n      }\n\n      if (isString(minOutput.value) && inputValue) {\n        exceedMin = isTime\n          ? convertTimeToDate(inputValue) < convertTimeToDate(minOutput.value)\n          : isWeek\n          ? inputValue < minOutput.value\n          : valueDate < new Date(minOutput.value);\n      }\n    }\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        !!exceedMax,\n        maxOutput.message,\n        minOutput.message,\n        INPUT_VALIDATION_RULES.max,\n        INPUT_VALIDATION_RULES.min,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (\n    (maxLength || minLength) &&\n    !isEmpty &&\n    (isString(inputValue) || (isFieldArray && Array.isArray(inputValue)))\n  ) {\n    const maxLengthOutput = getValueAndMessage(maxLength);\n    const minLengthOutput = getValueAndMessage(minLength);\n    const exceedMax =\n      !isNullOrUndefined(maxLengthOutput.value) &&\n      inputValue.length > +maxLengthOutput.value;\n    const exceedMin =\n      !isNullOrUndefined(minLengthOutput.value) &&\n      inputValue.length < +minLengthOutput.value;\n\n    if (exceedMax || exceedMin) {\n      getMinMaxMessage(\n        exceedMax,\n        maxLengthOutput.message,\n        minLengthOutput.message,\n      );\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(error[name]!.message);\n        return error;\n      }\n    }\n  }\n\n  if (pattern && !isEmpty && isString(inputValue)) {\n    const { value: patternValue, message } = getValueAndMessage(pattern);\n\n    if (isRegex(patternValue) && !inputValue.match(patternValue)) {\n      error[name] = {\n        type: INPUT_VALIDATION_RULES.pattern,\n        message,\n        ref,\n        ...appendErrorsCurry(INPUT_VALIDATION_RULES.pattern, message),\n      };\n      if (!validateAllFieldCriteria) {\n        setCustomValidity(message);\n        return error;\n      }\n    }\n  }\n\n  if (validate) {\n    if (isFunction(validate)) {\n      const result = await validate(inputValue, formValues);\n      const validateError = getValidateError(result, inputRef);\n\n      if (validateError) {\n        error[name] = {\n          ...validateError,\n          ...appendErrorsCurry(\n            INPUT_VALIDATION_RULES.validate,\n            validateError.message,\n          ),\n        };\n        if (!validateAllFieldCriteria) {\n          setCustomValidity(validateError.message);\n          return error;\n        }\n      }\n    } else if (isObject(validate)) {\n      let validationResult = {} as FieldError;\n\n      for (const key in validate) {\n        if (!isEmptyObject(validationResult) && !validateAllFieldCriteria) {\n          break;\n        }\n\n        const validateError = getValidateError(\n          await validate[key](inputValue, formValues),\n          inputRef,\n          key,\n        );\n\n        if (validateError) {\n          validationResult = {\n            ...validateError,\n            ...appendErrorsCurry(key, validateError.message),\n          };\n\n          setCustomValidity(validateError.message);\n\n          if (validateAllFieldCriteria) {\n            error[name] = validationResult;\n          }\n        }\n      }\n\n      if (!isEmptyObject(validationResult)) {\n        error[name] = {\n          ref: inputRef,\n          ...validationResult,\n        };\n        if (!validateAllFieldCriteria) {\n          return error;\n        }\n      }\n    }\n  }\n\n  setCustomValidity(true);\n  return error;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...data,\n  ...convertToArrayPayload(value),\n];\n","export default <T>(value: T | T[]): undefined[] | undefined =>\n  Array.isArray(value) ? value.map(() => undefined) : undefined;\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default function insert<T>(data: T[], index: number): (T | undefined)[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value: T | T[],\n): T[];\nexport default function insert<T>(\n  data: T[],\n  index: number,\n  value?: T | T[],\n): (T | undefined)[] {\n  return [\n    ...data.slice(0, index),\n    ...convertToArrayPayload(value),\n    ...data.slice(index),\n  ];\n}\n","import isUndefined from './isUndefined';\n\nexport default <T>(\n  data: (T | undefined)[],\n  from: number,\n  to: number,\n): (T | undefined)[] => {\n  if (!Array.isArray(data)) {\n    return [];\n  }\n\n  if (isUndefined(data[to])) {\n    data[to] = undefined;\n  }\n  data.splice(to, 0, data.splice(from, 1)[0]);\n\n  return data;\n};\n","import convertToArrayPayload from './convertToArrayPayload';\n\nexport default <T>(data: T[], value: T | T[]): T[] => [\n  ...convertToArrayPayload(value),\n  ...convertToArrayPayload(data),\n];\n","import compact from './compact';\nimport convertToArrayPayload from './convertToArrayPayload';\nimport isUndefined from './isUndefined';\n\nfunction removeAtIndexes<T>(data: T[], indexes: number[]): T[] {\n  let i = 0;\n  const temp = [...data];\n\n  for (const index of indexes) {\n    temp.splice(index - i, 1);\n    i++;\n  }\n\n  return compact(temp).length ? temp : [];\n}\n\nexport default <T>(data: T[], index?: number | number[]): T[] =>\n  isUndefined(index)\n    ? []\n    : removeAtIndexes(\n        data,\n        (convertToArrayPayload(index) as number[]).sort((a, b) => a - b),\n      );\n","export default <T>(data: T[], indexA: number, indexB: number): void => {\n  [data[indexA], data[indexB]] = [data[indexB], data[indexA]];\n};\n","import isEmptyObject from './isEmptyObject';\nimport isKey from './isKey';\nimport isObject from './isObject';\nimport isUndefined from './isUndefined';\nimport stringToPath from './stringToPath';\n\nfunction baseGet(object: any, updatePath: (string | number)[]) {\n  const length = updatePath.slice(0, -1).length;\n  let index = 0;\n\n  while (index < length) {\n    object = isUndefined(object) ? index++ : object[updatePath[index++]];\n  }\n\n  return object;\n}\n\nfunction isEmptyArray(obj: unknown[]) {\n  for (const key in obj) {\n    if (obj.hasOwnProperty(key) && !isUndefined(obj[key])) {\n      return false;\n    }\n  }\n  return true;\n}\n\nexport default function unset(object: any, path: string | (string | number)[]) {\n  const paths = Array.isArray(path)\n    ? path\n    : isKey(path)\n    ? [path]\n    : stringToPath(path);\n\n  const childObject = paths.length === 1 ? object : baseGet(object, paths);\n\n  const index = paths.length - 1;\n  const key = paths[index];\n\n  if (childObject) {\n    delete childObject[key];\n  }\n\n  if (\n    index !== 0 &&\n    ((isObject(childObject) && isEmptyObject(childObject)) ||\n      (Array.isArray(childObject) && isEmptyArray(childObject)))\n  ) {\n    unset(object, paths.slice(0, -1));\n  }\n\n  return object;\n}\n","export default <T>(fieldValues: T[], index: number, value: T) => {\n  fieldValues[index] = value;\n  return fieldValues;\n};\n","import { Noop } from '../types';\n\nexport type Observer<T> = {\n  next: (value: T) => void;\n};\n\nexport type Subscription = {\n  unsubscribe: Noop;\n};\n\nexport type Subject<T> = {\n  readonly observers: Observer<T>[];\n  subscribe: (value: Observer<T>) => Subscription;\n  unsubscribe: Noop;\n} & Observer<T>;\n\nexport default <T>(): Subject<T> => {\n  let _observers: Observer<T>[] = [];\n\n  const next = (value: T) => {\n    for (const observer of _observers) {\n      observer.next && observer.next(value);\n    }\n  };\n\n  const subscribe = (observer: Observer<T>): Subscription => {\n    _observers.push(observer);\n    return {\n      unsubscribe: () => {\n        _observers = _observers.filter((o) => o !== observer);\n      },\n    };\n  };\n\n  const unsubscribe = () => {\n    _observers = [];\n  };\n\n  return {\n    get observers() {\n      return _observers;\n    },\n    next,\n    subscribe,\n    unsubscribe,\n  };\n};\n","import { Primitive } from '../types';\n\nimport isNullOrUndefined from './isNullOrUndefined';\nimport { isObjectType } from './isObject';\n\nexport default (value: unknown): value is Primitive =>\n  isNullOrUndefined(value) || !isObjectType(value);\n","import isObject from '../utils/isObject';\n\nimport isDateObject from './isDateObject';\nimport isPrimitive from './isPrimitive';\n\nexport default function deepEqual(object1: any, object2: any) {\n  if (isPrimitive(object1) || isPrimitive(object2)) {\n    return object1 === object2;\n  }\n\n  if (isDateObject(object1) && isDateObject(object2)) {\n    return object1.getTime() === object2.getTime();\n  }\n\n  const keys1 = Object.keys(object1);\n  const keys2 = Object.keys(object2);\n\n  if (keys1.length !== keys2.length) {\n    return false;\n  }\n\n  for (const key of keys1) {\n    const val1 = object1[key];\n\n    if (!keys2.includes(key)) {\n      return false;\n    }\n\n    if (key !== 'ref') {\n      const val2 = object2[key];\n\n      if (\n        (isDateObject(val1) && isDateObject(val2)) ||\n        (isObject(val1) && isObject(val2)) ||\n        (Array.isArray(val1) && Array.isArray(val2))\n          ? !deepEqual(val1, val2)\n          : val1 !== val2\n      ) {\n        return false;\n      }\n    }\n  }\n\n  return true;\n}\n","import { FieldElement } from '../types';\n\nexport default (element: FieldElement): element is HTMLSelectElement =>\n  element.type === `select-multiple`;\n","import { FieldElement } from '../types';\n\nimport isCheckBoxInput from './isCheckBoxInput';\nimport isRadioInput from './isRadioInput';\n\nexport default (ref: FieldElement): ref is HTMLInputElement =>\n  isRadioInput(ref) || isCheckBoxInput(ref);\n","import { Ref } from '../types';\n\nimport isHTMLElement from './isHTMLElement';\n\nexport default (ref: Ref) => isHTMLElement(ref) && ref.isConnected;\n","import isFunction from './isFunction';\n\nexport default <T>(data: T): boolean => {\n  for (const key in data) {\n    if (isFunction(data[key])) {\n      return true;\n    }\n  }\n  return false;\n};\n","import deepEqual from '../utils/deepEqual';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isUndefined from '../utils/isUndefined';\nimport objectHasFunction from '../utils/objectHasFunction';\n\nfunction markFieldsDirty<T>(data: T, fields: Record<string, any> = {}) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        fields[key] = Array.isArray(data[key]) ? [] : {};\n        markFieldsDirty(data[key], fields[key]);\n      } else if (!isNullOrUndefined(data[key])) {\n        fields[key] = true;\n      }\n    }\n  }\n\n  return fields;\n}\n\nfunction getDirtyFieldsFromDefaultValues<T>(\n  data: T,\n  formValues: T,\n  dirtyFieldsFromValues: Record<\n    Extract<keyof T, string>,\n    ReturnType<typeof markFieldsDirty> | boolean\n  >,\n) {\n  const isParentNodeArray = Array.isArray(data);\n\n  if (isObject(data) || isParentNodeArray) {\n    for (const key in data) {\n      if (\n        Array.isArray(data[key]) ||\n        (isObject(data[key]) && !objectHasFunction(data[key]))\n      ) {\n        if (\n          isUndefined(formValues) ||\n          isPrimitive(dirtyFieldsFromValues[key])\n        ) {\n          dirtyFieldsFromValues[key] = Array.isArray(data[key])\n            ? markFieldsDirty(data[key], [])\n            : { ...markFieldsDirty(data[key]) };\n        } else {\n          getDirtyFieldsFromDefaultValues(\n            data[key],\n            isNullOrUndefined(formValues) ? {} : formValues[key],\n            dirtyFieldsFromValues[key],\n          );\n        }\n      } else {\n        dirtyFieldsFromValues[key] = !deepEqual(data[key], formValues[key]);\n      }\n    }\n  }\n\n  return dirtyFieldsFromValues;\n}\n\nexport default <T>(defaultValues: T, formValues: T) =>\n  getDirtyFieldsFromDefaultValues(\n    defaultValues,\n    formValues,\n    markFieldsDirty(formValues),\n  );\n","import { Field, NativeFieldValue } from '../types';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends NativeFieldValue>(\n  value: T,\n  { valueAsNumber, valueAsDate, setValueAs }: Field['_f'],\n) =>\n  isUndefined(value)\n    ? value\n    : valueAsNumber\n    ? value === ''\n      ? NaN\n      : value\n      ? +value\n      : value\n    : valueAsDate && isString(value)\n    ? new Date(value)\n    : setValueAs\n    ? setValueAs(value)\n    : value;\n","import { Field } from '../types';\nimport isCheckBox from '../utils/isCheckBoxInput';\nimport isFileInput from '../utils/isFileInput';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isRadioInput from '../utils/isRadioInput';\nimport isUndefined from '../utils/isUndefined';\n\nimport getCheckboxValue from './getCheckboxValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getRadioValue from './getRadioValue';\n\nexport default function getFieldValue(_f: Field['_f']) {\n  const ref = _f.ref;\n\n  if (_f.refs ? _f.refs.every((ref) => ref.disabled) : ref.disabled) {\n    return;\n  }\n\n  if (isFileInput(ref)) {\n    return ref.files;\n  }\n\n  if (isRadioInput(ref)) {\n    return getRadioValue(_f.refs).value;\n  }\n\n  if (isMultipleSelect(ref)) {\n    return [...ref.selectedOptions].map(({ value }) => value);\n  }\n\n  if (isCheckBox(ref)) {\n    return getCheckboxValue(_f.refs).value;\n  }\n\n  return getFieldValueAs(isUndefined(ref.value) ? _f.ref.value : ref.value, _f);\n}\n","import {\n  CriteriaMode,\n  Field,\n  FieldName,\n  FieldRefs,\n  FieldValues,\n  InternalFieldName,\n} from '../types';\nimport { get } from '../utils';\nimport set from '../utils/set';\n\nexport default <TFieldValues extends FieldValues>(\n  fieldsNames: Set<InternalFieldName> | InternalFieldName[],\n  _fields: FieldRefs,\n  criteriaMode?: CriteriaMode,\n  shouldUseNativeValidation?: boolean | undefined,\n) => {\n  const fields: Record<InternalFieldName, Field['_f']> = {};\n\n  for (const name of fieldsNames) {\n    const field: Field = get(_fields, name);\n\n    field && set(fields, name, field._f);\n  }\n\n  return {\n    criteriaMode,\n    names: [...fieldsNames] as FieldName<TFieldValues>[],\n    fields,\n    shouldUseNativeValidation,\n  };\n};\n","import {\n  ValidationRule,\n  ValidationValue,\n  ValidationValueMessage,\n} from '../types';\nimport isObject from '../utils/isObject';\nimport isRegex from '../utils/isRegex';\nimport isUndefined from '../utils/isUndefined';\n\nexport default <T extends ValidationValue>(\n  rule?: ValidationRule<T> | ValidationValueMessage<T>,\n) =>\n  isUndefined(rule)\n    ? rule\n    : isRegex(rule)\n    ? rule.source\n    : isObject(rule)\n    ? isRegex(rule.value)\n      ? rule.value.source\n      : rule.value\n    : rule;\n","import { Field } from '../types';\n\nexport default (options: Field['_f']) =>\n  options.mount &&\n  (options.required ||\n    options.min ||\n    options.max ||\n    options.maxLength ||\n    options.minLength ||\n    options.pattern ||\n    options.validate);\n","import { FieldError, FieldErrors, FieldValues } from '../types';\nimport get from '../utils/get';\nimport isKey from '../utils/isKey';\n\nexport default function schemaErrorLookup<T extends FieldValues = FieldValues>(\n  errors: FieldErrors<T>,\n  _fields: FieldValues,\n  name: string,\n): {\n  error?: FieldError;\n  name: string;\n} {\n  const error = get(errors, name);\n\n  if (error || isKey(name)) {\n    return {\n      error,\n      name,\n    };\n  }\n\n  const names = name.split('.');\n\n  while (names.length) {\n    const fieldName = names.join('.');\n    const field = get(_fields, fieldName);\n    const foundError = get(errors, fieldName);\n\n    if (field && !Array.isArray(field) && name !== fieldName) {\n      return { name };\n    }\n\n    if (foundError && foundError.type) {\n      return {\n        name: fieldName,\n        error: foundError,\n      };\n    }\n\n    names.pop();\n  }\n\n  return {\n    name,\n  };\n}\n","import { ValidationModeFlags } from '../types';\n\nexport default (\n  isBlurEvent: boolean,\n  isTouched: boolean,\n  isSubmitted: boolean,\n  reValidateMode: {\n    isOnBlur: boolean;\n    isOnChange: boolean;\n  },\n  mode: Partial<ValidationModeFlags>,\n) => {\n  if (mode.isOnAll) {\n    return false;\n  } else if (!isSubmitted && mode.isOnTouch) {\n    return !(isTouched || isBlurEvent);\n  } else if (isSubmitted ? reValidateMode.isOnBlur : mode.isOnBlur) {\n    return !isBlurEvent;\n  } else if (isSubmitted ? reValidateMode.isOnChange : mode.isOnChange) {\n    return isBlurEvent;\n  }\n  return true;\n};\n","import compact from '../utils/compact';\nimport get from '../utils/get';\nimport unset from '../utils/unset';\n\nexport default <T>(ref: T, name: string) =>\n  !compact(get(ref, name)).length && unset(ref, name);\n","import { EVENTS, VALIDATION_MODE } from '../constants';\nimport {\n  BatchFieldArrayUpdate,\n  ChangeHandler,\n  Control,\n  DeepPartial,\n  DelayCallback,\n  EventType,\n  Field,\n  FieldError,\n  FieldErrors,\n  FieldNamesMarkedBoolean,\n  FieldPath,\n  FieldRefs,\n  FieldValues,\n  FormState,\n  GetIsDirty,\n  InternalFieldName,\n  Names,\n  Path,\n  PathValue,\n  ReadFormState,\n  Ref,\n  SetFieldValue,\n  SetValueConfig,\n  Subjects,\n  UseFormClearErrors,\n  UseFormGetFieldState,\n  UseFormGetValues,\n  UseFormHandleSubmit,\n  UseFormProps,\n  UseFormRegister,\n  UseFormReset,\n  UseFormResetField,\n  UseFormReturn,\n  UseFormSetError,\n  UseFormSetFocus,\n  UseFormSetValue,\n  UseFormTrigger,\n  UseFormUnregister,\n  UseFormWatch,\n  WatchInternal,\n  WatchObserver,\n} from '../types';\nimport cloneObject from '../utils/cloneObject';\nimport compact from '../utils/compact';\nimport convertToArrayPayload from '../utils/convertToArrayPayload';\nimport createSubject from '../utils/createSubject';\nimport deepEqual from '../utils/deepEqual';\nimport get from '../utils/get';\nimport isBoolean from '../utils/isBoolean';\nimport isCheckBoxInput from '../utils/isCheckBoxInput';\nimport isDateObject from '../utils/isDateObject';\nimport isEmptyObject from '../utils/isEmptyObject';\nimport isFileInput from '../utils/isFileInput';\nimport isFunction from '../utils/isFunction';\nimport isHTMLElement from '../utils/isHTMLElement';\nimport isMultipleSelect from '../utils/isMultipleSelect';\nimport isNullOrUndefined from '../utils/isNullOrUndefined';\nimport isObject from '../utils/isObject';\nimport isPrimitive from '../utils/isPrimitive';\nimport isRadioOrCheckbox from '../utils/isRadioOrCheckbox';\nimport isString from '../utils/isString';\nimport isUndefined from '../utils/isUndefined';\nimport isWeb from '../utils/isWeb';\nimport live from '../utils/live';\nimport set from '../utils/set';\nimport unset from '../utils/unset';\n\nimport generateWatchOutput from './generateWatchOutput';\nimport getDirtyFields from './getDirtyFields';\nimport getEventValue from './getEventValue';\nimport getFieldValue from './getFieldValue';\nimport getFieldValueAs from './getFieldValueAs';\nimport getResolverOptions from './getResolverOptions';\nimport getRuleValue from './getRuleValue';\nimport getValidationModes from './getValidationModes';\nimport hasValidation from './hasValidation';\nimport isNameInFieldArray from './isNameInFieldArray';\nimport isWatched from './isWatched';\nimport iterateFieldsByAction from './iterateFieldsByAction';\nimport schemaErrorLookup from './schemaErrorLookup';\nimport skipValidation from './skipValidation';\nimport unsetEmptyArray from './unsetEmptyArray';\nimport updateFieldArrayRootError from './updateFieldArrayRootError';\nimport validateField from './validateField';\n\nconst defaultOptions = {\n  mode: VALIDATION_MODE.onSubmit,\n  reValidateMode: VALIDATION_MODE.onChange,\n  shouldFocusError: true,\n} as const;\n\nexport function createFormControl<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): Omit<UseFormReturn<TFieldValues, TContext>, 'formState'> {\n  let _options = {\n    ...defaultOptions,\n    ...props,\n  };\n  let _formState: FormState<TFieldValues> = {\n    submitCount: 0,\n    isDirty: false,\n    isLoading: isFunction(_options.defaultValues),\n    isValidating: false,\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    touchedFields: {},\n    dirtyFields: {},\n    validatingFields: {},\n    errors: _options.errors || {},\n    disabled: _options.disabled || false,\n  };\n  let _fields: FieldRefs = {};\n  let _defaultValues =\n    isObject(_options.defaultValues) || isObject(_options.values)\n      ? cloneObject(_options.defaultValues || _options.values) || {}\n      : {};\n  let _formValues = _options.shouldUnregister\n    ? {}\n    : cloneObject(_defaultValues);\n  let _state = {\n    action: false,\n    mount: false,\n    watch: false,\n  };\n  let _names: Names = {\n    mount: new Set(),\n    unMount: new Set(),\n    array: new Set(),\n    watch: new Set(),\n  };\n  let delayErrorCallback: DelayCallback | null;\n  let timer = 0;\n  const _proxyFormState: ReadFormState = {\n    isDirty: false,\n    dirtyFields: false,\n    validatingFields: false,\n    touchedFields: false,\n    isValidating: false,\n    isValid: false,\n    errors: false,\n  };\n  const _subjects: Subjects<TFieldValues> = {\n    values: createSubject(),\n    array: createSubject(),\n    state: createSubject(),\n  };\n  const validationModeBeforeSubmit = getValidationModes(_options.mode);\n  const validationModeAfterSubmit = getValidationModes(_options.reValidateMode);\n  const shouldDisplayAllAssociatedErrors =\n    _options.criteriaMode === VALIDATION_MODE.all;\n\n  const debounce =\n    <T extends Function>(callback: T) =>\n    (wait: number) => {\n      clearTimeout(timer);\n      timer = setTimeout(callback, wait);\n    };\n\n  const _updateValid = async (shouldUpdateValid?: boolean) => {\n    if (_proxyFormState.isValid || shouldUpdateValid) {\n      const isValid = _options.resolver\n        ? isEmptyObject((await _executeSchema()).errors)\n        : await executeBuiltInValidation(_fields, true);\n\n      if (isValid !== _formState.isValid) {\n        _subjects.state.next({\n          isValid,\n        });\n      }\n    }\n  };\n\n  const _updateIsValidating = (names?: string[], isValidating?: boolean) => {\n    if (_proxyFormState.isValidating || _proxyFormState.validatingFields) {\n      (names || Array.from(_names.mount)).forEach((name) => {\n        if (name) {\n          isValidating\n            ? set(_formState.validatingFields, name, isValidating)\n            : unset(_formState.validatingFields, name);\n        }\n      });\n\n      _subjects.state.next({\n        validatingFields: _formState.validatingFields,\n        isValidating: !isEmptyObject(_formState.validatingFields),\n      });\n    }\n  };\n\n  const _updateFieldArray: BatchFieldArrayUpdate = (\n    name,\n    values = [],\n    method,\n    args,\n    shouldSetValues = true,\n    shouldUpdateFieldsAndState = true,\n  ) => {\n    if (args && method) {\n      _state.action = true;\n      if (shouldUpdateFieldsAndState && Array.isArray(get(_fields, name))) {\n        const fieldValues = method(get(_fields, name), args.argA, args.argB);\n        shouldSetValues && set(_fields, name, fieldValues);\n      }\n\n      if (\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.errors, name))\n      ) {\n        const errors = method(\n          get(_formState.errors, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.errors, name, errors);\n        unsetEmptyArray(_formState.errors, name);\n      }\n\n      if (\n        _proxyFormState.touchedFields &&\n        shouldUpdateFieldsAndState &&\n        Array.isArray(get(_formState.touchedFields, name))\n      ) {\n        const touchedFields = method(\n          get(_formState.touchedFields, name),\n          args.argA,\n          args.argB,\n        );\n        shouldSetValues && set(_formState.touchedFields, name, touchedFields);\n      }\n\n      if (_proxyFormState.dirtyFields) {\n        _formState.dirtyFields = getDirtyFields(_defaultValues, _formValues);\n      }\n\n      _subjects.state.next({\n        name,\n        isDirty: _getDirty(name, values),\n        dirtyFields: _formState.dirtyFields,\n        errors: _formState.errors,\n        isValid: _formState.isValid,\n      });\n    } else {\n      set(_formValues, name, values);\n    }\n  };\n\n  const updateErrors = (name: InternalFieldName, error: FieldError) => {\n    set(_formState.errors, name, error);\n    _subjects.state.next({\n      errors: _formState.errors,\n    });\n  };\n\n  const _setErrors = (errors: FieldErrors<TFieldValues>) => {\n    _formState.errors = errors;\n    _subjects.state.next({\n      errors: _formState.errors,\n      isValid: false,\n    });\n  };\n\n  const updateValidAndValue = (\n    name: InternalFieldName,\n    shouldSkipSetValueAs: boolean,\n    value?: unknown,\n    ref?: Ref,\n  ) => {\n    const field: Field = get(_fields, name);\n\n    if (field) {\n      const defaultValue = get(\n        _formValues,\n        name,\n        isUndefined(value) ? get(_defaultValues, name) : value,\n      );\n\n      isUndefined(defaultValue) ||\n      (ref && (ref as HTMLInputElement).defaultChecked) ||\n      shouldSkipSetValueAs\n        ? set(\n            _formValues,\n            name,\n            shouldSkipSetValueAs ? defaultValue : getFieldValue(field._f),\n          )\n        : setFieldValue(name, defaultValue);\n\n      _state.mount && _updateValid();\n    }\n  };\n\n  const updateTouchAndDirty = (\n    name: InternalFieldName,\n    fieldValue: unknown,\n    isBlurEvent?: boolean,\n    shouldDirty?: boolean,\n    shouldRender?: boolean,\n  ): Partial<\n    Pick<FormState<TFieldValues>, 'dirtyFields' | 'isDirty' | 'touchedFields'>\n  > => {\n    let shouldUpdateField = false;\n    let isPreviousDirty = false;\n    const output: Partial<FormState<TFieldValues>> & { name: string } = {\n      name,\n    };\n    const disabledField = !!(\n      get(_fields, name) && get(_fields, name)._f.disabled\n    );\n\n    if (!isBlurEvent || shouldDirty) {\n      if (_proxyFormState.isDirty) {\n        isPreviousDirty = _formState.isDirty;\n        _formState.isDirty = output.isDirty = _getDirty();\n        shouldUpdateField = isPreviousDirty !== output.isDirty;\n      }\n\n      const isCurrentFieldPristine =\n        disabledField || deepEqual(get(_defaultValues, name), fieldValue);\n\n      isPreviousDirty = !!(!disabledField && get(_formState.dirtyFields, name));\n      isCurrentFieldPristine || disabledField\n        ? unset(_formState.dirtyFields, name)\n        : set(_formState.dirtyFields, name, true);\n      output.dirtyFields = _formState.dirtyFields;\n      shouldUpdateField =\n        shouldUpdateField ||\n        (_proxyFormState.dirtyFields &&\n          isPreviousDirty !== !isCurrentFieldPristine);\n    }\n\n    if (isBlurEvent) {\n      const isPreviousFieldTouched = get(_formState.touchedFields, name);\n\n      if (!isPreviousFieldTouched) {\n        set(_formState.touchedFields, name, isBlurEvent);\n        output.touchedFields = _formState.touchedFields;\n        shouldUpdateField =\n          shouldUpdateField ||\n          (_proxyFormState.touchedFields &&\n            isPreviousFieldTouched !== isBlurEvent);\n      }\n    }\n\n    shouldUpdateField && shouldRender && _subjects.state.next(output);\n\n    return shouldUpdateField ? output : {};\n  };\n\n  const shouldRenderByError = (\n    name: InternalFieldName,\n    isValid?: boolean,\n    error?: FieldError,\n    fieldState?: {\n      dirty?: FieldNamesMarkedBoolean<TFieldValues>;\n      isDirty?: boolean;\n      touched?: FieldNamesMarkedBoolean<TFieldValues>;\n    },\n  ) => {\n    const previousFieldError = get(_formState.errors, name);\n    const shouldUpdateValid =\n      _proxyFormState.isValid &&\n      isBoolean(isValid) &&\n      _formState.isValid !== isValid;\n\n    if (props.delayError && error) {\n      delayErrorCallback = debounce(() => updateErrors(name, error));\n      delayErrorCallback(props.delayError);\n    } else {\n      clearTimeout(timer);\n      delayErrorCallback = null;\n      error\n        ? set(_formState.errors, name, error)\n        : unset(_formState.errors, name);\n    }\n\n    if (\n      (error ? !deepEqual(previousFieldError, error) : previousFieldError) ||\n      !isEmptyObject(fieldState) ||\n      shouldUpdateValid\n    ) {\n      const updatedFormState = {\n        ...fieldState,\n        ...(shouldUpdateValid && isBoolean(isValid) ? { isValid } : {}),\n        errors: _formState.errors,\n        name,\n      };\n\n      _formState = {\n        ..._formState,\n        ...updatedFormState,\n      };\n\n      _subjects.state.next(updatedFormState);\n    }\n  };\n\n  const _executeSchema = async (name?: InternalFieldName[]) => {\n    _updateIsValidating(name, true);\n    const result = await _options.resolver!(\n      _formValues as TFieldValues,\n      _options.context,\n      getResolverOptions(\n        name || _names.mount,\n        _fields,\n        _options.criteriaMode,\n        _options.shouldUseNativeValidation,\n      ),\n    );\n    _updateIsValidating(name);\n    return result;\n  };\n\n  const executeSchemaAndUpdateState = async (names?: InternalFieldName[]) => {\n    const { errors } = await _executeSchema(names);\n\n    if (names) {\n      for (const name of names) {\n        const error = get(errors, name);\n        error\n          ? set(_formState.errors, name, error)\n          : unset(_formState.errors, name);\n      }\n    } else {\n      _formState.errors = errors;\n    }\n\n    return errors;\n  };\n\n  const executeBuiltInValidation = async (\n    fields: FieldRefs,\n    shouldOnlyCheckValid?: boolean,\n    context: {\n      valid: boolean;\n    } = {\n      valid: true,\n    },\n  ) => {\n    for (const name in fields) {\n      const field = fields[name];\n\n      if (field) {\n        const { _f, ...fieldValue } = field;\n\n        if (_f) {\n          const isFieldArrayRoot = _names.array.has(_f.name);\n          _updateIsValidating([name], true);\n          const fieldError = await validateField(\n            field,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation && !shouldOnlyCheckValid,\n            isFieldArrayRoot,\n          );\n          _updateIsValidating([name]);\n\n          if (fieldError[_f.name]) {\n            context.valid = false;\n            if (shouldOnlyCheckValid) {\n              break;\n            }\n          }\n\n          !shouldOnlyCheckValid &&\n            (get(fieldError, _f.name)\n              ? isFieldArrayRoot\n                ? updateFieldArrayRootError(\n                    _formState.errors,\n                    fieldError,\n                    _f.name,\n                  )\n                : set(_formState.errors, _f.name, fieldError[_f.name])\n              : unset(_formState.errors, _f.name));\n        }\n\n        fieldValue &&\n          (await executeBuiltInValidation(\n            fieldValue,\n            shouldOnlyCheckValid,\n            context,\n          ));\n      }\n    }\n\n    return context.valid;\n  };\n\n  const _removeUnmounted = () => {\n    for (const name of _names.unMount) {\n      const field: Field = get(_fields, name);\n\n      field &&\n        (field._f.refs\n          ? field._f.refs.every((ref) => !live(ref))\n          : !live(field._f.ref)) &&\n        unregister(name as FieldPath<TFieldValues>);\n    }\n\n    _names.unMount = new Set();\n  };\n\n  const _getDirty: GetIsDirty = (name, data) => (\n    name && data && set(_formValues, name, data),\n    !deepEqual(getValues(), _defaultValues)\n  );\n\n  const _getWatch: WatchInternal<TFieldValues> = (\n    names,\n    defaultValue,\n    isGlobal,\n  ) =>\n    generateWatchOutput(\n      names,\n      _names,\n      {\n        ...(_state.mount\n          ? _formValues\n          : isUndefined(defaultValue)\n          ? _defaultValues\n          : isString(names)\n          ? { [names]: defaultValue }\n          : defaultValue),\n      },\n      isGlobal,\n      defaultValue,\n    );\n\n  const _getFieldArray = <TFieldArrayValues>(\n    name: InternalFieldName,\n  ): Partial<TFieldArrayValues>[] =>\n    compact(\n      get(\n        _state.mount ? _formValues : _defaultValues,\n        name,\n        props.shouldUnregister ? get(_defaultValues, name, []) : [],\n      ),\n    );\n\n  const setFieldValue = (\n    name: InternalFieldName,\n    value: SetFieldValue<TFieldValues>,\n    options: SetValueConfig = {},\n  ) => {\n    const field: Field = get(_fields, name);\n    let fieldValue: unknown = value;\n\n    if (field) {\n      const fieldReference = field._f;\n\n      if (fieldReference) {\n        !fieldReference.disabled &&\n          set(_formValues, name, getFieldValueAs(value, fieldReference));\n\n        fieldValue =\n          isHTMLElement(fieldReference.ref) && isNullOrUndefined(value)\n            ? ''\n            : value;\n\n        if (isMultipleSelect(fieldReference.ref)) {\n          [...fieldReference.ref.options].forEach(\n            (optionRef) =>\n              (optionRef.selected = (\n                fieldValue as InternalFieldName[]\n              ).includes(optionRef.value)),\n          );\n        } else if (fieldReference.refs) {\n          if (isCheckBoxInput(fieldReference.ref)) {\n            fieldReference.refs.length > 1\n              ? fieldReference.refs.forEach(\n                  (checkboxRef) =>\n                    (!checkboxRef.defaultChecked || !checkboxRef.disabled) &&\n                    (checkboxRef.checked = Array.isArray(fieldValue)\n                      ? !!(fieldValue as []).find(\n                          (data: string) => data === checkboxRef.value,\n                        )\n                      : fieldValue === checkboxRef.value),\n                )\n              : fieldReference.refs[0] &&\n                (fieldReference.refs[0].checked = !!fieldValue);\n          } else {\n            fieldReference.refs.forEach(\n              (radioRef: HTMLInputElement) =>\n                (radioRef.checked = radioRef.value === fieldValue),\n            );\n          }\n        } else if (isFileInput(fieldReference.ref)) {\n          fieldReference.ref.value = '';\n        } else {\n          fieldReference.ref.value = fieldValue;\n\n          if (!fieldReference.ref.type) {\n            _subjects.values.next({\n              name,\n              values: { ..._formValues },\n            });\n          }\n        }\n      }\n    }\n\n    (options.shouldDirty || options.shouldTouch) &&\n      updateTouchAndDirty(\n        name,\n        fieldValue,\n        options.shouldTouch,\n        options.shouldDirty,\n        true,\n      );\n\n    options.shouldValidate && trigger(name as Path<TFieldValues>);\n  };\n\n  const setValues = <\n    T extends InternalFieldName,\n    K extends SetFieldValue<TFieldValues>,\n    U extends SetValueConfig,\n  >(\n    name: T,\n    value: K,\n    options: U,\n  ) => {\n    for (const fieldKey in value) {\n      const fieldValue = value[fieldKey];\n      const fieldName = `${name}.${fieldKey}`;\n      const field = get(_fields, fieldName);\n\n      (_names.array.has(name) ||\n        !isPrimitive(fieldValue) ||\n        (field && !field._f)) &&\n      !isDateObject(fieldValue)\n        ? setValues(fieldName, fieldValue, options)\n        : setFieldValue(fieldName, fieldValue, options);\n    }\n  };\n\n  const setValue: UseFormSetValue<TFieldValues> = (\n    name,\n    value,\n    options = {},\n  ) => {\n    const field = get(_fields, name);\n    const isFieldArray = _names.array.has(name);\n    const cloneValue = cloneObject(value);\n\n    set(_formValues, name, cloneValue);\n\n    if (isFieldArray) {\n      _subjects.array.next({\n        name,\n        values: { ..._formValues },\n      });\n\n      if (\n        (_proxyFormState.isDirty || _proxyFormState.dirtyFields) &&\n        options.shouldDirty\n      ) {\n        _subjects.state.next({\n          name,\n          dirtyFields: getDirtyFields(_defaultValues, _formValues),\n          isDirty: _getDirty(name, cloneValue),\n        });\n      }\n    } else {\n      field && !field._f && !isNullOrUndefined(cloneValue)\n        ? setValues(name, cloneValue, options)\n        : setFieldValue(name, cloneValue, options);\n    }\n\n    isWatched(name, _names) && _subjects.state.next({ ..._formState });\n    _subjects.values.next({\n      name: _state.mount ? name : undefined,\n      values: { ..._formValues },\n    });\n  };\n\n  const onChange: ChangeHandler = async (event) => {\n    _state.mount = true;\n    const target = event.target;\n    let name = target.name as string;\n    let isFieldValueUpdated = true;\n    const field: Field = get(_fields, name);\n    const getCurrentFieldValue = () =>\n      target.type ? getFieldValue(field._f) : getEventValue(event);\n    const _updateIsFieldValueUpdated = (fieldValue: any): void => {\n      isFieldValueUpdated =\n        Number.isNaN(fieldValue) ||\n        fieldValue === get(_formValues, name, fieldValue);\n    };\n\n    if (field) {\n      let error;\n      let isValid;\n      const fieldValue = getCurrentFieldValue();\n      const isBlurEvent =\n        event.type === EVENTS.BLUR || event.type === EVENTS.FOCUS_OUT;\n      const shouldSkipValidation =\n        (!hasValidation(field._f) &&\n          !_options.resolver &&\n          !get(_formState.errors, name) &&\n          !field._f.deps) ||\n        skipValidation(\n          isBlurEvent,\n          get(_formState.touchedFields, name),\n          _formState.isSubmitted,\n          validationModeAfterSubmit,\n          validationModeBeforeSubmit,\n        );\n      const watched = isWatched(name, _names, isBlurEvent);\n\n      set(_formValues, name, fieldValue);\n\n      if (isBlurEvent) {\n        field._f.onBlur && field._f.onBlur(event);\n        delayErrorCallback && delayErrorCallback(0);\n      } else if (field._f.onChange) {\n        field._f.onChange(event);\n      }\n\n      const fieldState = updateTouchAndDirty(\n        name,\n        fieldValue,\n        isBlurEvent,\n        false,\n      );\n\n      const shouldRender = !isEmptyObject(fieldState) || watched;\n\n      !isBlurEvent &&\n        _subjects.values.next({\n          name,\n          type: event.type,\n          values: { ..._formValues },\n        });\n\n      if (shouldSkipValidation) {\n        _proxyFormState.isValid && _updateValid();\n\n        return (\n          shouldRender &&\n          _subjects.state.next({ name, ...(watched ? {} : fieldState) })\n        );\n      }\n\n      !isBlurEvent && watched && _subjects.state.next({ ..._formState });\n\n      if (_options.resolver) {\n        const { errors } = await _executeSchema([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          const previousErrorLookupResult = schemaErrorLookup(\n            _formState.errors,\n            _fields,\n            name,\n          );\n          const errorLookupResult = schemaErrorLookup(\n            errors,\n            _fields,\n            previousErrorLookupResult.name || name,\n          );\n\n          error = errorLookupResult.error;\n          name = errorLookupResult.name;\n\n          isValid = isEmptyObject(errors);\n        }\n      } else {\n        _updateIsValidating([name], true);\n        error = (\n          await validateField(\n            field,\n            _formValues,\n            shouldDisplayAllAssociatedErrors,\n            _options.shouldUseNativeValidation,\n          )\n        )[name];\n        _updateIsValidating([name]);\n\n        _updateIsFieldValueUpdated(fieldValue);\n\n        if (isFieldValueUpdated) {\n          if (error) {\n            isValid = false;\n          } else if (_proxyFormState.isValid) {\n            isValid = await executeBuiltInValidation(_fields, true);\n          }\n        }\n      }\n\n      if (isFieldValueUpdated) {\n        field._f.deps &&\n          trigger(\n            field._f.deps as\n              | FieldPath<TFieldValues>\n              | FieldPath<TFieldValues>[],\n          );\n        shouldRenderByError(name, isValid, error, fieldState);\n      }\n    }\n  };\n\n  const _focusInput = (ref: Ref, key: string) => {\n    if (get(_formState.errors, key) && ref.focus) {\n      ref.focus();\n      return 1;\n    }\n    return;\n  };\n\n  const trigger: UseFormTrigger<TFieldValues> = async (name, options = {}) => {\n    let isValid;\n    let validationResult;\n    const fieldNames = convertToArrayPayload(name) as InternalFieldName[];\n\n    if (_options.resolver) {\n      const errors = await executeSchemaAndUpdateState(\n        isUndefined(name) ? name : fieldNames,\n      );\n\n      isValid = isEmptyObject(errors);\n      validationResult = name\n        ? !fieldNames.some((name) => get(errors, name))\n        : isValid;\n    } else if (name) {\n      validationResult = (\n        await Promise.all(\n          fieldNames.map(async (fieldName) => {\n            const field = get(_fields, fieldName);\n            return await executeBuiltInValidation(\n              field && field._f ? { [fieldName]: field } : field,\n            );\n          }),\n        )\n      ).every(Boolean);\n      !(!validationResult && !_formState.isValid) && _updateValid();\n    } else {\n      validationResult = isValid = await executeBuiltInValidation(_fields);\n    }\n\n    _subjects.state.next({\n      ...(!isString(name) ||\n      (_proxyFormState.isValid && isValid !== _formState.isValid)\n        ? {}\n        : { name }),\n      ...(_options.resolver || !name ? { isValid } : {}),\n      errors: _formState.errors,\n    });\n\n    options.shouldFocus &&\n      !validationResult &&\n      iterateFieldsByAction(\n        _fields,\n        _focusInput,\n        name ? fieldNames : _names.mount,\n      );\n\n    return validationResult;\n  };\n\n  const getValues: UseFormGetValues<TFieldValues> = (\n    fieldNames?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>,\n  ) => {\n    const values = {\n      ...(_state.mount ? _formValues : _defaultValues),\n    };\n\n    return isUndefined(fieldNames)\n      ? values\n      : isString(fieldNames)\n      ? get(values, fieldNames)\n      : fieldNames.map((name) => get(values, name));\n  };\n\n  const getFieldState: UseFormGetFieldState<TFieldValues> = (\n    name,\n    formState,\n  ) => ({\n    invalid: !!get((formState || _formState).errors, name),\n    isDirty: !!get((formState || _formState).dirtyFields, name),\n    isTouched: !!get((formState || _formState).touchedFields, name),\n    isValidating: !!get((formState || _formState).validatingFields, name),\n    error: get((formState || _formState).errors, name),\n  });\n\n  const clearErrors: UseFormClearErrors<TFieldValues> = (name) => {\n    name &&\n      convertToArrayPayload(name).forEach((inputName) =>\n        unset(_formState.errors, inputName),\n      );\n\n    _subjects.state.next({\n      errors: name ? _formState.errors : {},\n    });\n  };\n\n  const setError: UseFormSetError<TFieldValues> = (name, error, options) => {\n    const ref = (get(_fields, name, { _f: {} })._f || {}).ref;\n    const currentError = get(_formState.errors, name) || {};\n\n    // Don't override existing error messages elsewhere in the object tree.\n    const { ref: currentRef, message, type, ...restOfErrorTree } = currentError;\n\n    set(_formState.errors, name, {\n      ...restOfErrorTree,\n      ...error,\n      ref,\n    });\n\n    _subjects.state.next({\n      name,\n      errors: _formState.errors,\n      isValid: false,\n    });\n\n    options && options.shouldFocus && ref && ref.focus && ref.focus();\n  };\n\n  const watch: UseFormWatch<TFieldValues> = (\n    name?:\n      | FieldPath<TFieldValues>\n      | ReadonlyArray<FieldPath<TFieldValues>>\n      | WatchObserver<TFieldValues>,\n    defaultValue?: DeepPartial<TFieldValues>,\n  ) =>\n    isFunction(name)\n      ? _subjects.values.subscribe({\n          next: (payload) =>\n            name(\n              _getWatch(undefined, defaultValue),\n              payload as {\n                name?: FieldPath<TFieldValues>;\n                type?: EventType;\n                value?: unknown;\n              },\n            ),\n        })\n      : _getWatch(\n          name as InternalFieldName | InternalFieldName[],\n          defaultValue,\n          true,\n        );\n\n  const unregister: UseFormUnregister<TFieldValues> = (name, options = {}) => {\n    for (const fieldName of name ? convertToArrayPayload(name) : _names.mount) {\n      _names.mount.delete(fieldName);\n      _names.array.delete(fieldName);\n\n      if (!options.keepValue) {\n        unset(_fields, fieldName);\n        unset(_formValues, fieldName);\n      }\n\n      !options.keepError && unset(_formState.errors, fieldName);\n      !options.keepDirty && unset(_formState.dirtyFields, fieldName);\n      !options.keepTouched && unset(_formState.touchedFields, fieldName);\n      !options.keepIsValidating &&\n        unset(_formState.validatingFields, fieldName);\n      !_options.shouldUnregister &&\n        !options.keepDefaultValue &&\n        unset(_defaultValues, fieldName);\n    }\n\n    _subjects.values.next({\n      values: { ..._formValues },\n    });\n\n    _subjects.state.next({\n      ..._formState,\n      ...(!options.keepDirty ? {} : { isDirty: _getDirty() }),\n    });\n\n    !options.keepIsValid && _updateValid();\n  };\n\n  const _updateDisabledField: Control<TFieldValues>['_updateDisabledField'] = ({\n    disabled,\n    name,\n    field,\n    fields,\n    value,\n  }) => {\n    if ((isBoolean(disabled) && _state.mount) || !!disabled) {\n      const inputValue = disabled\n        ? undefined\n        : isUndefined(value)\n        ? getFieldValue(field ? field._f : get(fields, name)._f)\n        : value;\n      set(_formValues, name, inputValue);\n      updateTouchAndDirty(name, inputValue, false, false, true);\n    }\n  };\n\n  const register: UseFormRegister<TFieldValues> = (name, options = {}) => {\n    let field = get(_fields, name);\n    const disabledIsDefined = isBoolean(options.disabled);\n\n    set(_fields, name, {\n      ...(field || {}),\n      _f: {\n        ...(field && field._f ? field._f : { ref: { name } }),\n        name,\n        mount: true,\n        ...options,\n      },\n    });\n    _names.mount.add(name);\n\n    if (field) {\n      _updateDisabledField({\n        field,\n        disabled: options.disabled,\n        name,\n        value: options.value,\n      });\n    } else {\n      updateValidAndValue(name, true, options.value);\n    }\n\n    return {\n      ...(disabledIsDefined ? { disabled: options.disabled } : {}),\n      ...(_options.progressive\n        ? {\n            required: !!options.required,\n            min: getRuleValue(options.min),\n            max: getRuleValue(options.max),\n            minLength: getRuleValue<number>(options.minLength) as number,\n            maxLength: getRuleValue(options.maxLength) as number,\n            pattern: getRuleValue(options.pattern) as string,\n          }\n        : {}),\n      name,\n      onChange,\n      onBlur: onChange,\n      ref: (ref: HTMLInputElement | null): void => {\n        if (ref) {\n          register(name, options);\n          field = get(_fields, name);\n\n          const fieldRef = isUndefined(ref.value)\n            ? ref.querySelectorAll\n              ? (ref.querySelectorAll('input,select,textarea')[0] as Ref) || ref\n              : ref\n            : ref;\n          const radioOrCheckbox = isRadioOrCheckbox(fieldRef);\n          const refs = field._f.refs || [];\n\n          if (\n            radioOrCheckbox\n              ? refs.find((option: Ref) => option === fieldRef)\n              : fieldRef === field._f.ref\n          ) {\n            return;\n          }\n\n          set(_fields, name, {\n            _f: {\n              ...field._f,\n              ...(radioOrCheckbox\n                ? {\n                    refs: [\n                      ...refs.filter(live),\n                      fieldRef,\n                      ...(Array.isArray(get(_defaultValues, name)) ? [{}] : []),\n                    ],\n                    ref: { type: fieldRef.type, name },\n                  }\n                : { ref: fieldRef }),\n            },\n          });\n\n          updateValidAndValue(name, false, undefined, fieldRef);\n        } else {\n          field = get(_fields, name, {});\n\n          if (field._f) {\n            field._f.mount = false;\n          }\n\n          (_options.shouldUnregister || options.shouldUnregister) &&\n            !(isNameInFieldArray(_names.array, name) && _state.action) &&\n            _names.unMount.add(name);\n        }\n      },\n    };\n  };\n\n  const _focusError = () =>\n    _options.shouldFocusError &&\n    iterateFieldsByAction(_fields, _focusInput, _names.mount);\n\n  const _disableForm = (disabled?: boolean) => {\n    if (isBoolean(disabled)) {\n      _subjects.state.next({ disabled });\n      iterateFieldsByAction(\n        _fields,\n        (ref, name) => {\n          const currentField: Field = get(_fields, name);\n          if (currentField) {\n            ref.disabled = currentField._f.disabled || disabled;\n\n            if (Array.isArray(currentField._f.refs)) {\n              currentField._f.refs.forEach((inputRef) => {\n                inputRef.disabled = currentField._f.disabled || disabled;\n              });\n            }\n          }\n        },\n        0,\n        false,\n      );\n    }\n  };\n\n  const handleSubmit: UseFormHandleSubmit<TFieldValues> =\n    (onValid, onInvalid) => async (e) => {\n      let onValidError = undefined;\n      if (e) {\n        e.preventDefault && e.preventDefault();\n        e.persist && e.persist();\n      }\n      let fieldValues = cloneObject(_formValues);\n\n      _subjects.state.next({\n        isSubmitting: true,\n      });\n\n      if (_options.resolver) {\n        const { errors, values } = await _executeSchema();\n        _formState.errors = errors;\n        fieldValues = values;\n      } else {\n        await executeBuiltInValidation(_fields);\n      }\n\n      unset(_formState.errors, 'root');\n\n      if (isEmptyObject(_formState.errors)) {\n        _subjects.state.next({\n          errors: {},\n        });\n        try {\n          await onValid(fieldValues as TFieldValues, e);\n        } catch (error) {\n          onValidError = error;\n        }\n      } else {\n        if (onInvalid) {\n          await onInvalid({ ..._formState.errors }, e);\n        }\n        _focusError();\n        setTimeout(_focusError);\n      }\n\n      _subjects.state.next({\n        isSubmitted: true,\n        isSubmitting: false,\n        isSubmitSuccessful: isEmptyObject(_formState.errors) && !onValidError,\n        submitCount: _formState.submitCount + 1,\n        errors: _formState.errors,\n      });\n      if (onValidError) {\n        throw onValidError;\n      }\n    };\n\n  const resetField: UseFormResetField<TFieldValues> = (name, options = {}) => {\n    if (get(_fields, name)) {\n      if (isUndefined(options.defaultValue)) {\n        setValue(name, cloneObject(get(_defaultValues, name)));\n      } else {\n        setValue(\n          name,\n          options.defaultValue as PathValue<\n            TFieldValues,\n            FieldPath<TFieldValues>\n          >,\n        );\n        set(_defaultValues, name, cloneObject(options.defaultValue));\n      }\n\n      if (!options.keepTouched) {\n        unset(_formState.touchedFields, name);\n      }\n\n      if (!options.keepDirty) {\n        unset(_formState.dirtyFields, name);\n        _formState.isDirty = options.defaultValue\n          ? _getDirty(name, cloneObject(get(_defaultValues, name)))\n          : _getDirty();\n      }\n\n      if (!options.keepError) {\n        unset(_formState.errors, name);\n        _proxyFormState.isValid && _updateValid();\n      }\n\n      _subjects.state.next({ ..._formState });\n    }\n  };\n\n  const _reset: UseFormReset<TFieldValues> = (\n    formValues,\n    keepStateOptions = {},\n  ) => {\n    const updatedValues = formValues ? cloneObject(formValues) : _defaultValues;\n    const cloneUpdatedValues = cloneObject(updatedValues);\n    const isEmptyResetValues = isEmptyObject(formValues);\n    const values = isEmptyResetValues ? _defaultValues : cloneUpdatedValues;\n\n    if (!keepStateOptions.keepDefaultValues) {\n      _defaultValues = updatedValues;\n    }\n\n    if (!keepStateOptions.keepValues) {\n      if (keepStateOptions.keepDirtyValues) {\n        for (const fieldName of _names.mount) {\n          get(_formState.dirtyFields, fieldName)\n            ? set(values, fieldName, get(_formValues, fieldName))\n            : setValue(\n                fieldName as FieldPath<TFieldValues>,\n                get(values, fieldName),\n              );\n        }\n      } else {\n        if (isWeb && isUndefined(formValues)) {\n          for (const name of _names.mount) {\n            const field = get(_fields, name);\n            if (field && field._f) {\n              const fieldReference = Array.isArray(field._f.refs)\n                ? field._f.refs[0]\n                : field._f.ref;\n\n              if (isHTMLElement(fieldReference)) {\n                const form = fieldReference.closest('form');\n                if (form) {\n                  form.reset();\n                  break;\n                }\n              }\n            }\n          }\n        }\n\n        _fields = {};\n      }\n\n      _formValues = props.shouldUnregister\n        ? keepStateOptions.keepDefaultValues\n          ? cloneObject(_defaultValues)\n          : {}\n        : cloneObject(values);\n\n      _subjects.array.next({\n        values: { ...values },\n      });\n\n      _subjects.values.next({\n        values: { ...values },\n      });\n    }\n\n    _names = {\n      mount: keepStateOptions.keepDirtyValues ? _names.mount : new Set(),\n      unMount: new Set(),\n      array: new Set(),\n      watch: new Set(),\n      watchAll: false,\n      focus: '',\n    };\n\n    _state.mount =\n      !_proxyFormState.isValid ||\n      !!keepStateOptions.keepIsValid ||\n      !!keepStateOptions.keepDirtyValues;\n\n    _state.watch = !!props.shouldUnregister;\n\n    _subjects.state.next({\n      submitCount: keepStateOptions.keepSubmitCount\n        ? _formState.submitCount\n        : 0,\n      isDirty: isEmptyResetValues\n        ? false\n        : keepStateOptions.keepDirty\n        ? _formState.isDirty\n        : !!(\n            keepStateOptions.keepDefaultValues &&\n            !deepEqual(formValues, _defaultValues)\n          ),\n      isSubmitted: keepStateOptions.keepIsSubmitted\n        ? _formState.isSubmitted\n        : false,\n      dirtyFields: isEmptyResetValues\n        ? []\n        : keepStateOptions.keepDirtyValues\n        ? keepStateOptions.keepDefaultValues && _formValues\n          ? getDirtyFields(_defaultValues, _formValues)\n          : _formState.dirtyFields\n        : keepStateOptions.keepDefaultValues && formValues\n        ? getDirtyFields(_defaultValues, formValues)\n        : {},\n      touchedFields: keepStateOptions.keepTouched\n        ? _formState.touchedFields\n        : {},\n      errors: keepStateOptions.keepErrors ? _formState.errors : {},\n      isSubmitSuccessful: keepStateOptions.keepIsSubmitSuccessful\n        ? _formState.isSubmitSuccessful\n        : false,\n      isSubmitting: false,\n    });\n  };\n\n  const reset: UseFormReset<TFieldValues> = (formValues, keepStateOptions) =>\n    _reset(\n      isFunction(formValues)\n        ? formValues(_formValues as TFieldValues)\n        : formValues,\n      keepStateOptions,\n    );\n\n  const setFocus: UseFormSetFocus<TFieldValues> = (name, options = {}) => {\n    const field = get(_fields, name);\n    const fieldReference = field && field._f;\n\n    if (fieldReference) {\n      const fieldRef = fieldReference.refs\n        ? fieldReference.refs[0]\n        : fieldReference.ref;\n\n      if (fieldRef.focus) {\n        fieldRef.focus();\n        options.shouldSelect && fieldRef.select();\n      }\n    }\n  };\n\n  const _updateFormState = (\n    updatedFormState: Partial<FormState<TFieldValues>>,\n  ) => {\n    _formState = {\n      ..._formState,\n      ...updatedFormState,\n    };\n  };\n\n  const _resetDefaultValues = () =>\n    isFunction(_options.defaultValues) &&\n    _options.defaultValues().then((values) => {\n      reset(values, _options.resetOptions);\n      _subjects.state.next({\n        isLoading: false,\n      });\n    });\n\n  return {\n    control: {\n      register,\n      unregister,\n      getFieldState,\n      handleSubmit,\n      setError,\n      _executeSchema,\n      _getWatch,\n      _getDirty,\n      _updateValid,\n      _removeUnmounted,\n      _updateFieldArray,\n      _updateDisabledField,\n      _getFieldArray,\n      _reset,\n      _resetDefaultValues,\n      _updateFormState,\n      _disableForm,\n      _subjects,\n      _proxyFormState,\n      _setErrors,\n      get _fields() {\n        return _fields;\n      },\n      get _formValues() {\n        return _formValues;\n      },\n      get _state() {\n        return _state;\n      },\n      set _state(value) {\n        _state = value;\n      },\n      get _defaultValues() {\n        return _defaultValues;\n      },\n      get _names() {\n        return _names;\n      },\n      set _names(value) {\n        _names = value;\n      },\n      get _formState() {\n        return _formState;\n      },\n      set _formState(value) {\n        _formState = value;\n      },\n      get _options() {\n        return _options;\n      },\n      set _options(value) {\n        _options = {\n          ..._options,\n          ...value,\n        };\n      },\n    },\n    trigger,\n    register,\n    handleSubmit,\n    watch,\n    setValue,\n    getValues,\n    reset,\n    resetField,\n    clearErrors,\n    unregister,\n    setError,\n    setFocus,\n    getFieldState,\n  };\n}\n","import React from 'react';\n\nimport generateId from './logic/generateId';\nimport getFocusFieldName from './logic/getFocusFieldName';\nimport getValidationModes from './logic/getValidationModes';\nimport isWatched from './logic/isWatched';\nimport iterateFieldsByAction from './logic/iterateFieldsByAction';\nimport updateFieldArrayRootError from './logic/updateFieldArrayRootError';\nimport validateField from './logic/validateField';\nimport appendAt from './utils/append';\nimport cloneObject from './utils/cloneObject';\nimport convertToArrayPayload from './utils/convertToArrayPayload';\nimport fillEmptyArray from './utils/fillEmptyArray';\nimport get from './utils/get';\nimport insertAt from './utils/insert';\nimport isEmptyObject from './utils/isEmptyObject';\nimport moveArrayAt from './utils/move';\nimport prependAt from './utils/prepend';\nimport removeArrayAt from './utils/remove';\nimport set from './utils/set';\nimport swapArrayAt from './utils/swap';\nimport unset from './utils/unset';\nimport updateAt from './utils/update';\nimport { VALIDATION_MODE } from './constants';\nimport {\n  Control,\n  Field,\n  FieldArray,\n  FieldArrayMethodProps,\n  FieldArrayPath,\n  FieldArrayWithId,\n  FieldErrors,\n  FieldPath,\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  RegisterOptions,\n  UseFieldArrayProps,\n  UseFieldArrayReturn,\n} from './types';\nimport { useFormContext } from './useFormContext';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * A custom hook that exposes convenient methods to perform operations with a list of dynamic inputs that need to be appended, updated, removed etc. • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn) • [Video](https://youtu.be/4MrbfGSFY2A)\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/usefieldarray) • [Demo](https://codesandbox.io/s/react-hook-form-usefieldarray-ssugn)\n *\n * @param props - useFieldArray props\n *\n * @returns methods - functions to manipulate with the Field Arrays (dynamic inputs) {@link UseFieldArrayReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, control, handleSubmit, reset, trigger, setError } = useForm({\n *     defaultValues: {\n *       test: []\n *     }\n *   });\n *   const { fields, append } = useFieldArray({\n *     control,\n *     name: \"test\"\n *   });\n *\n *   return (\n *     <form onSubmit={handleSubmit(data => console.log(data))}>\n *       {fields.map((item, index) => (\n *          <input key={item.id} {...register(`test.${index}.firstName`)}  />\n *       ))}\n *       <button type=\"button\" onClick={() => append({ firstName: \"bill\" })}>\n *         append\n *       </button>\n *       <input type=\"submit\" />\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useFieldArray<\n  TFieldValues extends FieldValues = FieldValues,\n  TFieldArrayName extends FieldArrayPath<TFieldValues> = FieldArrayPath<TFieldValues>,\n  TKeyName extends string = 'id',\n>(\n  props: UseFieldArrayProps<TFieldValues, TFieldArrayName, TKeyName>,\n): UseFieldArrayReturn<TFieldValues, TFieldArrayName, TKeyName> {\n  const methods = useFormContext();\n  const {\n    control = methods.control,\n    name,\n    keyName = 'id',\n    shouldUnregister,\n  } = props;\n  const [fields, setFields] = React.useState(control._getFieldArray(name));\n  const ids = React.useRef<string[]>(\n    control._getFieldArray(name).map(generateId),\n  );\n  const _fieldIds = React.useRef(fields);\n  const _name = React.useRef(name);\n  const _actioned = React.useRef(false);\n\n  _name.current = name;\n  _fieldIds.current = fields;\n  control._names.array.add(name);\n\n  props.rules &&\n    (control as Control<TFieldValues>).register(\n      name as FieldPath<TFieldValues>,\n      props.rules as RegisterOptions<TFieldValues>,\n    );\n\n  useSubscribe({\n    next: ({\n      values,\n      name: fieldArrayName,\n    }: {\n      values?: FieldValues;\n      name?: InternalFieldName;\n    }) => {\n      if (fieldArrayName === _name.current || !fieldArrayName) {\n        const fieldValues = get(values, _name.current);\n        if (Array.isArray(fieldValues)) {\n          setFields(fieldValues);\n          ids.current = fieldValues.map(generateId);\n        }\n      }\n    },\n    subject: control._subjects.array,\n  });\n\n  const updateValues = React.useCallback(\n    <\n      T extends Partial<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >[],\n    >(\n      updatedFieldArrayValues: T,\n    ) => {\n      _actioned.current = true;\n      control._updateFieldArray(name, updatedFieldArrayValues);\n    },\n    [control, name],\n  );\n\n  const append = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const appendValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = appendAt(\n      control._getFieldArray(name),\n      appendValue,\n    );\n    control._names.focus = getFocusFieldName(\n      name,\n      updatedFieldArrayValues.length - 1,\n      options,\n    );\n    ids.current = appendAt(ids.current, appendValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, appendAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const prepend = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const prependValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = prependAt(\n      control._getFieldArray(name),\n      prependValue,\n    );\n    control._names.focus = getFocusFieldName(name, 0, options);\n    ids.current = prependAt(ids.current, prependValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, prependAt, {\n      argA: fillEmptyArray(value),\n    });\n  };\n\n  const remove = (index?: number | number[]) => {\n    const updatedFieldArrayValues: Partial<\n      FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n    >[] = removeArrayAt(control._getFieldArray(name), index);\n    ids.current = removeArrayAt(ids.current, index);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, removeArrayAt, {\n      argA: index,\n    });\n  };\n\n  const insert = (\n    index: number,\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n    options?: FieldArrayMethodProps,\n  ) => {\n    const insertValue = convertToArrayPayload(cloneObject(value));\n    const updatedFieldArrayValues = insertAt(\n      control._getFieldArray(name),\n      index,\n      insertValue,\n    );\n    control._names.focus = getFocusFieldName(name, index, options);\n    ids.current = insertAt(ids.current, index, insertValue.map(generateId));\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(name, updatedFieldArrayValues, insertAt, {\n      argA: index,\n      argB: fillEmptyArray(value),\n    });\n  };\n\n  const swap = (indexA: number, indexB: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    swapArrayAt(updatedFieldArrayValues, indexA, indexB);\n    swapArrayAt(ids.current, indexA, indexB);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      swapArrayAt,\n      {\n        argA: indexA,\n        argB: indexB,\n      },\n      false,\n    );\n  };\n\n  const move = (from: number, to: number) => {\n    const updatedFieldArrayValues = control._getFieldArray(name);\n    moveArrayAt(updatedFieldArrayValues, from, to);\n    moveArrayAt(ids.current, from, to);\n    updateValues(updatedFieldArrayValues);\n    setFields(updatedFieldArrayValues);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      moveArrayAt,\n      {\n        argA: from,\n        argB: to,\n      },\n      false,\n    );\n  };\n\n  const update = (\n    index: number,\n    value: FieldArray<TFieldValues, TFieldArrayName>,\n  ) => {\n    const updateValue = cloneObject(value);\n    const updatedFieldArrayValues = updateAt(\n      control._getFieldArray<\n        FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>\n      >(name),\n      index,\n      updateValue as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>,\n    );\n    ids.current = [...updatedFieldArrayValues].map((item, i) =>\n      !item || i === index ? generateId() : ids.current[i],\n    );\n    updateValues(updatedFieldArrayValues);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      updatedFieldArrayValues,\n      updateAt,\n      {\n        argA: index,\n        argB: updateValue,\n      },\n      true,\n      false,\n    );\n  };\n\n  const replace = (\n    value:\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>\n      | Partial<FieldArray<TFieldValues, TFieldArrayName>>[],\n  ) => {\n    const updatedFieldArrayValues = convertToArrayPayload(cloneObject(value));\n    ids.current = updatedFieldArrayValues.map(generateId);\n    updateValues([...updatedFieldArrayValues]);\n    setFields([...updatedFieldArrayValues]);\n    control._updateFieldArray(\n      name,\n      [...updatedFieldArrayValues],\n      <T>(data: T): T => data,\n      {},\n      true,\n      false,\n    );\n  };\n\n  React.useEffect(() => {\n    control._state.action = false;\n\n    isWatched(name, control._names) &&\n      control._subjects.state.next({\n        ...control._formState,\n      } as FormState<TFieldValues>);\n\n    if (\n      _actioned.current &&\n      (!getValidationModes(control._options.mode).isOnSubmit ||\n        control._formState.isSubmitted)\n    ) {\n      if (control._options.resolver) {\n        control._executeSchema([name]).then((result) => {\n          const error = get(result.errors, name);\n          const existingError = get(control._formState.errors, name);\n\n          if (\n            existingError\n              ? (!error && existingError.type) ||\n                (error &&\n                  (existingError.type !== error.type ||\n                    existingError.message !== error.message))\n              : error && error.type\n          ) {\n            error\n              ? set(control._formState.errors, name, error)\n              : unset(control._formState.errors, name);\n            control._subjects.state.next({\n              errors: control._formState.errors as FieldErrors<TFieldValues>,\n            });\n          }\n        });\n      } else {\n        const field: Field = get(control._fields, name);\n        if (\n          field &&\n          field._f &&\n          !(\n            getValidationModes(control._options.reValidateMode).isOnSubmit &&\n            getValidationModes(control._options.mode).isOnSubmit\n          )\n        ) {\n          validateField(\n            field,\n            control._formValues,\n            control._options.criteriaMode === VALIDATION_MODE.all,\n            control._options.shouldUseNativeValidation,\n            true,\n          ).then(\n            (error) =>\n              !isEmptyObject(error) &&\n              control._subjects.state.next({\n                errors: updateFieldArrayRootError(\n                  control._formState.errors as FieldErrors<TFieldValues>,\n                  error,\n                  name,\n                ) as FieldErrors<TFieldValues>,\n              }),\n          );\n        }\n      }\n    }\n\n    control._subjects.values.next({\n      name,\n      values: { ...control._formValues },\n    });\n\n    control._names.focus &&\n      iterateFieldsByAction(control._fields, (ref, key: string) => {\n        if (\n          control._names.focus &&\n          key.startsWith(control._names.focus) &&\n          ref.focus\n        ) {\n          ref.focus();\n          return 1;\n        }\n        return;\n      });\n\n    control._names.focus = '';\n\n    control._updateValid();\n    _actioned.current = false;\n  }, [fields, name, control]);\n\n  React.useEffect(() => {\n    !get(control._formValues, name) && control._updateFieldArray(name);\n\n    return () => {\n      (control._options.shouldUnregister || shouldUnregister) &&\n        control.unregister(name as FieldPath<TFieldValues>);\n    };\n  }, [name, control, keyName, shouldUnregister]);\n\n  return {\n    swap: React.useCallback(swap, [updateValues, name, control]),\n    move: React.useCallback(move, [updateValues, name, control]),\n    prepend: React.useCallback(prepend, [updateValues, name, control]),\n    append: React.useCallback(append, [updateValues, name, control]),\n    remove: React.useCallback(remove, [updateValues, name, control]),\n    insert: React.useCallback(insert, [updateValues, name, control]),\n    update: React.useCallback(update, [updateValues, name, control]),\n    replace: React.useCallback(replace, [updateValues, name, control]),\n    fields: React.useMemo(\n      () =>\n        fields.map((field, index) => ({\n          ...field,\n          [keyName]: ids.current[index] || generateId(),\n        })) as FieldArrayWithId<TFieldValues, TFieldArrayName, TKeyName>[],\n      [fields, keyName],\n    ),\n  };\n}\n","import React from 'react';\n\nimport { createFormControl } from './logic/createFormControl';\nimport getProxyFormState from './logic/getProxyFormState';\nimport shouldRenderFormState from './logic/shouldRenderFormState';\nimport deepEqual from './utils/deepEqual';\nimport isFunction from './utils/isFunction';\nimport {\n  FieldValues,\n  FormState,\n  InternalFieldName,\n  UseFormProps,\n  UseFormReturn,\n} from './types';\nimport { useSubscribe } from './useSubscribe';\n\n/**\n * Custom hook to manage the entire form.\n *\n * @remarks\n * [API](https://react-hook-form.com/docs/useform) • [Demo](https://codesandbox.io/s/react-hook-form-get-started-ts-5ksmm) • [Video](https://www.youtube.com/watch?v=RkXv4AXXC_4)\n *\n * @param props - form configuration and validation parameters.\n *\n * @returns methods - individual functions to manage the form state. {@link UseFormReturn}\n *\n * @example\n * ```tsx\n * function App() {\n *   const { register, handleSubmit, watch, formState: { errors } } = useForm();\n *   const onSubmit = data => console.log(data);\n *\n *   console.log(watch(\"example\"));\n *\n *   return (\n *     <form onSubmit={handleSubmit(onSubmit)}>\n *       <input defaultValue=\"test\" {...register(\"example\")} />\n *       <input {...register(\"exampleRequired\", { required: true })} />\n *       {errors.exampleRequired && <span>This field is required</span>}\n *       <button>Submit</button>\n *     </form>\n *   );\n * }\n * ```\n */\nexport function useForm<\n  TFieldValues extends FieldValues = FieldValues,\n  TContext = any,\n  TTransformedValues extends FieldValues | undefined = undefined,\n>(\n  props: UseFormProps<TFieldValues, TContext> = {},\n): UseFormReturn<TFieldValues, TContext, TTransformedValues> {\n  const _formControl = React.useRef<\n    UseFormReturn<TFieldValues, TContext, TTransformedValues> | undefined\n  >();\n  const _values = React.useRef<typeof props.values>();\n  const [formState, updateFormState] = React.useState<FormState<TFieldValues>>({\n    isDirty: false,\n    isValidating: false,\n    isLoading: isFunction(props.defaultValues),\n    isSubmitted: false,\n    isSubmitting: false,\n    isSubmitSuccessful: false,\n    isValid: false,\n    submitCount: 0,\n    dirtyFields: {},\n    touchedFields: {},\n    validatingFields: {},\n    errors: props.errors || {},\n    disabled: props.disabled || false,\n    defaultValues: isFunction(props.defaultValues)\n      ? undefined\n      : props.defaultValues,\n  });\n\n  if (!_formControl.current) {\n    _formControl.current = {\n      ...createFormControl(props),\n      formState,\n    };\n  }\n\n  const control = _formControl.current.control;\n  control._options = props;\n\n  useSubscribe({\n    subject: control._subjects.state,\n    next: (\n      value: Partial<FormState<TFieldValues>> & { name?: InternalFieldName },\n    ) => {\n      if (\n        shouldRenderFormState(\n          value,\n          control._proxyFormState,\n          control._updateFormState,\n          true,\n        )\n      ) {\n        updateFormState({ ...control._formState });\n      }\n    },\n  });\n\n  React.useEffect(\n    () => control._disableForm(props.disabled),\n    [control, props.disabled],\n  );\n\n  React.useEffect(() => {\n    if (control._proxyFormState.isDirty) {\n      const isDirty = control._getDirty();\n      if (isDirty !== formState.isDirty) {\n        control._subjects.state.next({\n          isDirty,\n        });\n      }\n    }\n  }, [control, formState.isDirty]);\n\n  React.useEffect(() => {\n    if (props.values && !deepEqual(props.values, _values.current)) {\n      control._reset(props.values, control._options.resetOptions);\n      _values.current = props.values;\n      updateFormState((state) => ({ ...state }));\n    } else {\n      control._resetDefaultValues();\n    }\n  }, [props.values, control]);\n\n  React.useEffect(() => {\n    if (props.errors) {\n      control._setErrors(props.errors);\n    }\n  }, [props.errors, control]);\n\n  React.useEffect(() => {\n    if (!control._state.mount) {\n      control._updateValid();\n      control._state.mount = true;\n    }\n\n    if (control._state.watch) {\n      control._state.watch = false;\n      control._subjects.state.next({ ...control._formState });\n    }\n\n    control._removeUnmounted();\n  });\n\n  React.useEffect(() => {\n    props.shouldUnregister &&\n      control._subjects.values.next({\n        values: control._getWatch(),\n      });\n  }, [props.shouldUnregister, control]);\n\n  _formControl.current.formState = getProxyFormState(formState, control);\n\n  return _formControl.current;\n}\n"],"mappings":"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","ignoreList":[]}