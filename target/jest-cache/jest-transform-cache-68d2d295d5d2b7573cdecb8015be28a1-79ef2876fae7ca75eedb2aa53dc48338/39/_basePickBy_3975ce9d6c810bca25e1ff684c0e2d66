53f551e561dbb71bc79522a156bd30d6
var baseGet = require('./_baseGet'),
  baseSet = require('./_baseSet'),
  castPath = require('./_castPath');

/**
 * The base implementation of  `_.pickBy` without support for iteratee shorthands.
 *
 * @private
 * @param {Object} object The source object.
 * @param {string[]} paths The property paths to pick.
 * @param {Function} predicate The function invoked per property.
 * @returns {Object} Returns the new object.
 */
function basePickBy(object, paths, predicate) {
  var index = -1,
    length = paths.length,
    result = {};
  while (++index < length) {
    var path = paths[index],
      value = baseGet(object, path);
    if (predicate(value, path)) {
      baseSet(result, castPath(path, object), value);
    }
  }
  return result;
}
module.exports = basePickBy;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJiYXNlR2V0IiwicmVxdWlyZSIsImJhc2VTZXQiLCJjYXN0UGF0aCIsImJhc2VQaWNrQnkiLCJvYmplY3QiLCJwYXRocyIsInByZWRpY2F0ZSIsImluZGV4IiwibGVuZ3RoIiwicmVzdWx0IiwicGF0aCIsInZhbHVlIiwibW9kdWxlIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbIl9iYXNlUGlja0J5LmpzIl0sInNvdXJjZXNDb250ZW50IjpbInZhciBiYXNlR2V0ID0gcmVxdWlyZSgnLi9fYmFzZUdldCcpLFxuICAgIGJhc2VTZXQgPSByZXF1aXJlKCcuL19iYXNlU2V0JyksXG4gICAgY2FzdFBhdGggPSByZXF1aXJlKCcuL19jYXN0UGF0aCcpO1xuXG4vKipcbiAqIFRoZSBiYXNlIGltcGxlbWVudGF0aW9uIG9mICBgXy5waWNrQnlgIHdpdGhvdXQgc3VwcG9ydCBmb3IgaXRlcmF0ZWUgc2hvcnRoYW5kcy5cbiAqXG4gKiBAcHJpdmF0ZVxuICogQHBhcmFtIHtPYmplY3R9IG9iamVjdCBUaGUgc291cmNlIG9iamVjdC5cbiAqIEBwYXJhbSB7c3RyaW5nW119IHBhdGhzIFRoZSBwcm9wZXJ0eSBwYXRocyB0byBwaWNrLlxuICogQHBhcmFtIHtGdW5jdGlvbn0gcHJlZGljYXRlIFRoZSBmdW5jdGlvbiBpbnZva2VkIHBlciBwcm9wZXJ0eS5cbiAqIEByZXR1cm5zIHtPYmplY3R9IFJldHVybnMgdGhlIG5ldyBvYmplY3QuXG4gKi9cbmZ1bmN0aW9uIGJhc2VQaWNrQnkob2JqZWN0LCBwYXRocywgcHJlZGljYXRlKSB7XG4gIHZhciBpbmRleCA9IC0xLFxuICAgICAgbGVuZ3RoID0gcGF0aHMubGVuZ3RoLFxuICAgICAgcmVzdWx0ID0ge307XG5cbiAgd2hpbGUgKCsraW5kZXggPCBsZW5ndGgpIHtcbiAgICB2YXIgcGF0aCA9IHBhdGhzW2luZGV4XSxcbiAgICAgICAgdmFsdWUgPSBiYXNlR2V0KG9iamVjdCwgcGF0aCk7XG5cbiAgICBpZiAocHJlZGljYXRlKHZhbHVlLCBwYXRoKSkge1xuICAgICAgYmFzZVNldChyZXN1bHQsIGNhc3RQYXRoKHBhdGgsIG9iamVjdCksIHZhbHVlKTtcbiAgICB9XG4gIH1cbiAgcmV0dXJuIHJlc3VsdDtcbn1cblxubW9kdWxlLmV4cG9ydHMgPSBiYXNlUGlja0J5O1xuIl0sIm1hcHBpbmdzIjoiQUFBQSxJQUFJQSxPQUFPLEdBQUdDLE9BQU8sQ0FBQyxZQUFZLENBQUM7RUFDL0JDLE9BQU8sR0FBR0QsT0FBTyxDQUFDLFlBQVksQ0FBQztFQUMvQkUsUUFBUSxHQUFHRixPQUFPLENBQUMsYUFBYSxDQUFDOztBQUVyQztBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQTtBQUNBO0FBQ0E7QUFDQSxTQUFTRyxVQUFVQSxDQUFDQyxNQUFNLEVBQUVDLEtBQUssRUFBRUMsU0FBUyxFQUFFO0VBQzVDLElBQUlDLEtBQUssR0FBRyxDQUFDLENBQUM7SUFDVkMsTUFBTSxHQUFHSCxLQUFLLENBQUNHLE1BQU07SUFDckJDLE1BQU0sR0FBRyxDQUFDLENBQUM7RUFFZixPQUFPLEVBQUVGLEtBQUssR0FBR0MsTUFBTSxFQUFFO0lBQ3ZCLElBQUlFLElBQUksR0FBR0wsS0FBSyxDQUFDRSxLQUFLLENBQUM7TUFDbkJJLEtBQUssR0FBR1osT0FBTyxDQUFDSyxNQUFNLEVBQUVNLElBQUksQ0FBQztJQUVqQyxJQUFJSixTQUFTLENBQUNLLEtBQUssRUFBRUQsSUFBSSxDQUFDLEVBQUU7TUFDMUJULE9BQU8sQ0FBQ1EsTUFBTSxFQUFFUCxRQUFRLENBQUNRLElBQUksRUFBRU4sTUFBTSxDQUFDLEVBQUVPLEtBQUssQ0FBQztJQUNoRDtFQUNGO0VBQ0EsT0FBT0YsTUFBTTtBQUNmO0FBRUFHLE1BQU0sQ0FBQ0MsT0FBTyxHQUFHVixVQUFVIiwiaWdub3JlTGlzdCI6W119