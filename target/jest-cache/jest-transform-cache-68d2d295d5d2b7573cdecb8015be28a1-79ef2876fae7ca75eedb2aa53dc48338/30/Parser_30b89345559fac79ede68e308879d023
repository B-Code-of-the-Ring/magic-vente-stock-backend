232d377ce0914a9e56f8c39f24af3ef5
"use strict";

var __createBinding = this && this.__createBinding || (Object.create ? function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  var desc = Object.getOwnPropertyDescriptor(m, k);
  if (!desc || ("get" in desc ? !m.__esModule : desc.writable || desc.configurable)) {
    desc = {
      enumerable: true,
      get: function () {
        return m[k];
      }
    };
  }
  Object.defineProperty(o, k2, desc);
} : function (o, m, k, k2) {
  if (k2 === undefined) k2 = k;
  o[k2] = m[k];
});
var __setModuleDefault = this && this.__setModuleDefault || (Object.create ? function (o, v) {
  Object.defineProperty(o, "default", {
    enumerable: true,
    value: v
  });
} : function (o, v) {
  o["default"] = v;
});
var __importStar = this && this.__importStar || function (mod) {
  if (mod && mod.__esModule) return mod;
  var result = {};
  if (mod != null) for (var k in mod) if (k !== "default" && Object.prototype.hasOwnProperty.call(mod, k)) __createBinding(result, mod, k);
  __setModuleDefault(result, mod);
  return result;
};
Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.Parser = void 0;
var Tokenizer_js_1 = __importStar(require("./Tokenizer.js"));
var decode_js_1 = require("entities/lib/decode.js");
var formTags = new Set(["input", "option", "optgroup", "select", "button", "datalist", "textarea"]);
var pTag = new Set(["p"]);
var tableSectionTags = new Set(["thead", "tbody"]);
var ddtTags = new Set(["dd", "dt"]);
var rtpTags = new Set(["rt", "rp"]);
var openImpliesClose = new Map([["tr", new Set(["tr", "th", "td"])], ["th", new Set(["th"])], ["td", new Set(["thead", "th", "td"])], ["body", new Set(["head", "link", "script"])], ["li", new Set(["li"])], ["p", pTag], ["h1", pTag], ["h2", pTag], ["h3", pTag], ["h4", pTag], ["h5", pTag], ["h6", pTag], ["select", formTags], ["input", formTags], ["output", formTags], ["button", formTags], ["datalist", formTags], ["textarea", formTags], ["option", new Set(["option"])], ["optgroup", new Set(["optgroup", "option"])], ["dd", ddtTags], ["dt", ddtTags], ["address", pTag], ["article", pTag], ["aside", pTag], ["blockquote", pTag], ["details", pTag], ["div", pTag], ["dl", pTag], ["fieldset", pTag], ["figcaption", pTag], ["figure", pTag], ["footer", pTag], ["form", pTag], ["header", pTag], ["hr", pTag], ["main", pTag], ["nav", pTag], ["ol", pTag], ["pre", pTag], ["section", pTag], ["table", pTag], ["ul", pTag], ["rt", rtpTags], ["rp", rtpTags], ["tbody", tableSectionTags], ["tfoot", tableSectionTags]]);
var voidElements = new Set(["area", "base", "basefont", "br", "col", "command", "embed", "frame", "hr", "img", "input", "isindex", "keygen", "link", "meta", "param", "source", "track", "wbr"]);
var foreignContextElements = new Set(["math", "svg"]);
var htmlIntegrationElements = new Set(["mi", "mo", "mn", "ms", "mtext", "annotation-xml", "foreignobject", "desc", "title"]);
var reNameEnd = /\s|\//;
var Parser = /** @class */function () {
  function Parser(cbs, options) {
    if (options === void 0) {
      options = {};
    }
    var _a, _b, _c, _d, _e;
    this.options = options;
    /** The start index of the last event. */
    this.startIndex = 0;
    /** The end index of the last event. */
    this.endIndex = 0;
    /**
     * Store the start index of the current open tag,
     * so we can update the start index for attributes.
     */
    this.openTagStart = 0;
    this.tagname = "";
    this.attribname = "";
    this.attribvalue = "";
    this.attribs = null;
    this.stack = [];
    this.foreignContext = [];
    this.buffers = [];
    this.bufferOffset = 0;
    /** The index of the last written buffer. Used when resuming after a `pause()`. */
    this.writeIndex = 0;
    /** Indicates whether the parser has finished running / `.end` has been called. */
    this.ended = false;
    this.cbs = cbs !== null && cbs !== void 0 ? cbs : {};
    this.lowerCaseTagNames = (_a = options.lowerCaseTags) !== null && _a !== void 0 ? _a : !options.xmlMode;
    this.lowerCaseAttributeNames = (_b = options.lowerCaseAttributeNames) !== null && _b !== void 0 ? _b : !options.xmlMode;
    this.tokenizer = new ((_c = options.Tokenizer) !== null && _c !== void 0 ? _c : Tokenizer_js_1.default)(this.options, this);
    (_e = (_d = this.cbs).onparserinit) === null || _e === void 0 ? void 0 : _e.call(_d, this);
  }
  // Tokenizer event handlers
  /** @internal */
  Parser.prototype.ontext = function (start, endIndex) {
    var _a, _b;
    var data = this.getSlice(start, endIndex);
    this.endIndex = endIndex - 1;
    (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, data);
    this.startIndex = endIndex;
  };
  /** @internal */
  Parser.prototype.ontextentity = function (cp) {
    var _a, _b;
    /*
     * Entities can be emitted on the character, or directly after.
     * We use the section start here to get accurate indices.
     */
    var index = this.tokenizer.getSectionStart();
    this.endIndex = index - 1;
    (_b = (_a = this.cbs).ontext) === null || _b === void 0 ? void 0 : _b.call(_a, (0, decode_js_1.fromCodePoint)(cp));
    this.startIndex = index;
  };
  Parser.prototype.isVoidElement = function (name) {
    return !this.options.xmlMode && voidElements.has(name);
  };
  /** @internal */
  Parser.prototype.onopentagname = function (start, endIndex) {
    this.endIndex = endIndex;
    var name = this.getSlice(start, endIndex);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    this.emitOpenTag(name);
  };
  Parser.prototype.emitOpenTag = function (name) {
    var _a, _b, _c, _d;
    this.openTagStart = this.startIndex;
    this.tagname = name;
    var impliesClose = !this.options.xmlMode && openImpliesClose.get(name);
    if (impliesClose) {
      while (this.stack.length > 0 && impliesClose.has(this.stack[this.stack.length - 1])) {
        var element = this.stack.pop();
        (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, element, true);
      }
    }
    if (!this.isVoidElement(name)) {
      this.stack.push(name);
      if (foreignContextElements.has(name)) {
        this.foreignContext.push(true);
      } else if (htmlIntegrationElements.has(name)) {
        this.foreignContext.push(false);
      }
    }
    (_d = (_c = this.cbs).onopentagname) === null || _d === void 0 ? void 0 : _d.call(_c, name);
    if (this.cbs.onopentag) this.attribs = {};
  };
  Parser.prototype.endOpenTag = function (isImplied) {
    var _a, _b;
    this.startIndex = this.openTagStart;
    if (this.attribs) {
      (_b = (_a = this.cbs).onopentag) === null || _b === void 0 ? void 0 : _b.call(_a, this.tagname, this.attribs, isImplied);
      this.attribs = null;
    }
    if (this.cbs.onclosetag && this.isVoidElement(this.tagname)) {
      this.cbs.onclosetag(this.tagname, true);
    }
    this.tagname = "";
  };
  /** @internal */
  Parser.prototype.onopentagend = function (endIndex) {
    this.endIndex = endIndex;
    this.endOpenTag(false);
    // Set `startIndex` for next node
    this.startIndex = endIndex + 1;
  };
  /** @internal */
  Parser.prototype.onclosetag = function (start, endIndex) {
    var _a, _b, _c, _d, _e, _f;
    this.endIndex = endIndex;
    var name = this.getSlice(start, endIndex);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    if (foreignContextElements.has(name) || htmlIntegrationElements.has(name)) {
      this.foreignContext.pop();
    }
    if (!this.isVoidElement(name)) {
      var pos = this.stack.lastIndexOf(name);
      if (pos !== -1) {
        if (this.cbs.onclosetag) {
          var count = this.stack.length - pos;
          while (count--) {
            // We know the stack has sufficient elements.
            this.cbs.onclosetag(this.stack.pop(), count !== 0);
          }
        } else this.stack.length = pos;
      } else if (!this.options.xmlMode && name === "p") {
        // Implicit open before close
        this.emitOpenTag("p");
        this.closeCurrentTag(true);
      }
    } else if (!this.options.xmlMode && name === "br") {
      // We can't use `emitOpenTag` for implicit open, as `br` would be implicitly closed.
      (_b = (_a = this.cbs).onopentagname) === null || _b === void 0 ? void 0 : _b.call(_a, "br");
      (_d = (_c = this.cbs).onopentag) === null || _d === void 0 ? void 0 : _d.call(_c, "br", {}, true);
      (_f = (_e = this.cbs).onclosetag) === null || _f === void 0 ? void 0 : _f.call(_e, "br", false);
    }
    // Set `startIndex` for next node
    this.startIndex = endIndex + 1;
  };
  /** @internal */
  Parser.prototype.onselfclosingtag = function (endIndex) {
    this.endIndex = endIndex;
    if (this.options.xmlMode || this.options.recognizeSelfClosing || this.foreignContext[this.foreignContext.length - 1]) {
      this.closeCurrentTag(false);
      // Set `startIndex` for next node
      this.startIndex = endIndex + 1;
    } else {
      // Ignore the fact that the tag is self-closing.
      this.onopentagend(endIndex);
    }
  };
  Parser.prototype.closeCurrentTag = function (isOpenImplied) {
    var _a, _b;
    var name = this.tagname;
    this.endOpenTag(isOpenImplied);
    // Self-closing tags will be on the top of the stack
    if (this.stack[this.stack.length - 1] === name) {
      // If the opening tag isn't implied, the closing tag has to be implied.
      (_b = (_a = this.cbs).onclosetag) === null || _b === void 0 ? void 0 : _b.call(_a, name, !isOpenImplied);
      this.stack.pop();
    }
  };
  /** @internal */
  Parser.prototype.onattribname = function (start, endIndex) {
    this.startIndex = start;
    var name = this.getSlice(start, endIndex);
    this.attribname = this.lowerCaseAttributeNames ? name.toLowerCase() : name;
  };
  /** @internal */
  Parser.prototype.onattribdata = function (start, endIndex) {
    this.attribvalue += this.getSlice(start, endIndex);
  };
  /** @internal */
  Parser.prototype.onattribentity = function (cp) {
    this.attribvalue += (0, decode_js_1.fromCodePoint)(cp);
  };
  /** @internal */
  Parser.prototype.onattribend = function (quote, endIndex) {
    var _a, _b;
    this.endIndex = endIndex;
    (_b = (_a = this.cbs).onattribute) === null || _b === void 0 ? void 0 : _b.call(_a, this.attribname, this.attribvalue, quote === Tokenizer_js_1.QuoteType.Double ? '"' : quote === Tokenizer_js_1.QuoteType.Single ? "'" : quote === Tokenizer_js_1.QuoteType.NoValue ? undefined : null);
    if (this.attribs && !Object.prototype.hasOwnProperty.call(this.attribs, this.attribname)) {
      this.attribs[this.attribname] = this.attribvalue;
    }
    this.attribvalue = "";
  };
  Parser.prototype.getInstructionName = function (value) {
    var index = value.search(reNameEnd);
    var name = index < 0 ? value : value.substr(0, index);
    if (this.lowerCaseTagNames) {
      name = name.toLowerCase();
    }
    return name;
  };
  /** @internal */
  Parser.prototype.ondeclaration = function (start, endIndex) {
    this.endIndex = endIndex;
    var value = this.getSlice(start, endIndex);
    if (this.cbs.onprocessinginstruction) {
      var name = this.getInstructionName(value);
      this.cbs.onprocessinginstruction("!".concat(name), "!".concat(value));
    }
    // Set `startIndex` for next node
    this.startIndex = endIndex + 1;
  };
  /** @internal */
  Parser.prototype.onprocessinginstruction = function (start, endIndex) {
    this.endIndex = endIndex;
    var value = this.getSlice(start, endIndex);
    if (this.cbs.onprocessinginstruction) {
      var name = this.getInstructionName(value);
      this.cbs.onprocessinginstruction("?".concat(name), "?".concat(value));
    }
    // Set `startIndex` for next node
    this.startIndex = endIndex + 1;
  };
  /** @internal */
  Parser.prototype.oncomment = function (start, endIndex, offset) {
    var _a, _b, _c, _d;
    this.endIndex = endIndex;
    (_b = (_a = this.cbs).oncomment) === null || _b === void 0 ? void 0 : _b.call(_a, this.getSlice(start, endIndex - offset));
    (_d = (_c = this.cbs).oncommentend) === null || _d === void 0 ? void 0 : _d.call(_c);
    // Set `startIndex` for next node
    this.startIndex = endIndex + 1;
  };
  /** @internal */
  Parser.prototype.oncdata = function (start, endIndex, offset) {
    var _a, _b, _c, _d, _e, _f, _g, _h, _j, _k;
    this.endIndex = endIndex;
    var value = this.getSlice(start, endIndex - offset);
    if (this.options.xmlMode || this.options.recognizeCDATA) {
      (_b = (_a = this.cbs).oncdatastart) === null || _b === void 0 ? void 0 : _b.call(_a);
      (_d = (_c = this.cbs).ontext) === null || _d === void 0 ? void 0 : _d.call(_c, value);
      (_f = (_e = this.cbs).oncdataend) === null || _f === void 0 ? void 0 : _f.call(_e);
    } else {
      (_h = (_g = this.cbs).oncomment) === null || _h === void 0 ? void 0 : _h.call(_g, "[CDATA[".concat(value, "]]"));
      (_k = (_j = this.cbs).oncommentend) === null || _k === void 0 ? void 0 : _k.call(_j);
    }
    // Set `startIndex` for next node
    this.startIndex = endIndex + 1;
  };
  /** @internal */
  Parser.prototype.onend = function () {
    var _a, _b;
    if (this.cbs.onclosetag) {
      // Set the end index for all remaining tags
      this.endIndex = this.startIndex;
      for (var index = this.stack.length; index > 0; this.cbs.onclosetag(this.stack[--index], true));
    }
    (_b = (_a = this.cbs).onend) === null || _b === void 0 ? void 0 : _b.call(_a);
  };
  /**
   * Resets the parser to a blank state, ready to parse a new HTML document
   */
  Parser.prototype.reset = function () {
    var _a, _b, _c, _d;
    (_b = (_a = this.cbs).onreset) === null || _b === void 0 ? void 0 : _b.call(_a);
    this.tokenizer.reset();
    this.tagname = "";
    this.attribname = "";
    this.attribs = null;
    this.stack.length = 0;
    this.startIndex = 0;
    this.endIndex = 0;
    (_d = (_c = this.cbs).onparserinit) === null || _d === void 0 ? void 0 : _d.call(_c, this);
    this.buffers.length = 0;
    this.bufferOffset = 0;
    this.writeIndex = 0;
    this.ended = false;
  };
  /**
   * Resets the parser, then parses a complete document and
   * pushes it to the handler.
   *
   * @param data Document to parse.
   */
  Parser.prototype.parseComplete = function (data) {
    this.reset();
    this.end(data);
  };
  Parser.prototype.getSlice = function (start, end) {
    while (start - this.bufferOffset >= this.buffers[0].length) {
      this.shiftBuffer();
    }
    var slice = this.buffers[0].slice(start - this.bufferOffset, end - this.bufferOffset);
    while (end - this.bufferOffset > this.buffers[0].length) {
      this.shiftBuffer();
      slice += this.buffers[0].slice(0, end - this.bufferOffset);
    }
    return slice;
  };
  Parser.prototype.shiftBuffer = function () {
    this.bufferOffset += this.buffers[0].length;
    this.writeIndex--;
    this.buffers.shift();
  };
  /**
   * Parses a chunk of data and calls the corresponding callbacks.
   *
   * @param chunk Chunk to parse.
   */
  Parser.prototype.write = function (chunk) {
    var _a, _b;
    if (this.ended) {
      (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".write() after done!"));
      return;
    }
    this.buffers.push(chunk);
    if (this.tokenizer.running) {
      this.tokenizer.write(chunk);
      this.writeIndex++;
    }
  };
  /**
   * Parses the end of the buffer and clears the stack, calls onend.
   *
   * @param chunk Optional final chunk to parse.
   */
  Parser.prototype.end = function (chunk) {
    var _a, _b;
    if (this.ended) {
      (_b = (_a = this.cbs).onerror) === null || _b === void 0 ? void 0 : _b.call(_a, new Error(".end() after done!"));
      return;
    }
    if (chunk) this.write(chunk);
    this.ended = true;
    this.tokenizer.end();
  };
  /**
   * Pauses parsing. The parser won't emit events until `resume` is called.
   */
  Parser.prototype.pause = function () {
    this.tokenizer.pause();
  };
  /**
   * Resumes parsing after `pause` was called.
   */
  Parser.prototype.resume = function () {
    this.tokenizer.resume();
    while (this.tokenizer.running && this.writeIndex < this.buffers.length) {
      this.tokenizer.write(this.buffers[this.writeIndex++]);
    }
    if (this.ended) this.tokenizer.end();
  };
  /**
   * Alias of `write`, for backwards compatibility.
   *
   * @param chunk Chunk to parse.
   * @deprecated
   */
  Parser.prototype.parseChunk = function (chunk) {
    this.write(chunk);
  };
  /**
   * Alias of `end`, for backwards compatibility.
   *
   * @param chunk Optional final chunk to parse.
   * @deprecated
   */
  Parser.prototype.done = function (chunk) {
    this.end(chunk);
  };
  return Parser;
}();
exports.Parser = Parser;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJUb2tlbml6ZXJfanNfMSIsIl9faW1wb3J0U3RhciIsInJlcXVpcmUiLCJkZWNvZGVfanNfMSIsImZvcm1UYWdzIiwiU2V0IiwicFRhZyIsInRhYmxlU2VjdGlvblRhZ3MiLCJkZHRUYWdzIiwicnRwVGFncyIsIm9wZW5JbXBsaWVzQ2xvc2UiLCJNYXAiLCJ2b2lkRWxlbWVudHMiLCJmb3JlaWduQ29udGV4dEVsZW1lbnRzIiwiaHRtbEludGVncmF0aW9uRWxlbWVudHMiLCJyZU5hbWVFbmQiLCJQYXJzZXIiLCJjYnMiLCJvcHRpb25zIiwic3RhcnRJbmRleCIsImVuZEluZGV4Iiwib3BlblRhZ1N0YXJ0IiwidGFnbmFtZSIsImF0dHJpYm5hbWUiLCJhdHRyaWJ2YWx1ZSIsImF0dHJpYnMiLCJzdGFjayIsImZvcmVpZ25Db250ZXh0IiwiYnVmZmVycyIsImJ1ZmZlck9mZnNldCIsIndyaXRlSW5kZXgiLCJlbmRlZCIsImxvd2VyQ2FzZVRhZ05hbWVzIiwiX2EiLCJsb3dlckNhc2VUYWdzIiwieG1sTW9kZSIsImxvd2VyQ2FzZUF0dHJpYnV0ZU5hbWVzIiwiX2IiLCJ0b2tlbml6ZXIiLCJfYyIsIlRva2VuaXplciIsImRlZmF1bHQiLCJfZSIsIl9kIiwib25wYXJzZXJpbml0IiwiY2FsbCIsInByb3RvdHlwZSIsIm9udGV4dCIsInN0YXJ0IiwiZGF0YSIsImdldFNsaWNlIiwib250ZXh0ZW50aXR5IiwiY3AiLCJpbmRleCIsImdldFNlY3Rpb25TdGFydCIsImZyb21Db2RlUG9pbnQiLCJpc1ZvaWRFbGVtZW50IiwibmFtZSIsImhhcyIsIm9ub3BlbnRhZ25hbWUiLCJ0b0xvd2VyQ2FzZSIsImVtaXRPcGVuVGFnIiwiaW1wbGllc0Nsb3NlIiwiZ2V0IiwibGVuZ3RoIiwiZWxlbWVudCIsInBvcCIsIm9uY2xvc2V0YWciLCJwdXNoIiwib25vcGVudGFnIiwiZW5kT3BlblRhZyIsImlzSW1wbGllZCIsIm9ub3BlbnRhZ2VuZCIsInBvcyIsImxhc3RJbmRleE9mIiwiY291bnQiLCJjbG9zZUN1cnJlbnRUYWciLCJfZiIsIm9uc2VsZmNsb3Npbmd0YWciLCJyZWNvZ25pemVTZWxmQ2xvc2luZyIsImlzT3BlbkltcGxpZWQiLCJvbmF0dHJpYm5hbWUiLCJvbmF0dHJpYmRhdGEiLCJvbmF0dHJpYmVudGl0eSIsIm9uYXR0cmliZW5kIiwicXVvdGUiLCJvbmF0dHJpYnV0ZSIsIlF1b3RlVHlwZSIsIkRvdWJsZSIsIlNpbmdsZSIsIk5vVmFsdWUiLCJ1bmRlZmluZWQiLCJPYmplY3QiLCJoYXNPd25Qcm9wZXJ0eSIsImdldEluc3RydWN0aW9uTmFtZSIsInZhbHVlIiwic2VhcmNoIiwic3Vic3RyIiwib25kZWNsYXJhdGlvbiIsIm9ucHJvY2Vzc2luZ2luc3RydWN0aW9uIiwiY29uY2F0Iiwib25jb21tZW50Iiwib2Zmc2V0Iiwib25jb21tZW50ZW5kIiwib25jZGF0YSIsInJlY29nbml6ZUNEQVRBIiwib25jZGF0YXN0YXJ0Iiwib25jZGF0YWVuZCIsIl9oIiwiX2ciLCJfayIsIl9qIiwib25lbmQiLCJyZXNldCIsIm9ucmVzZXQiLCJwYXJzZUNvbXBsZXRlIiwiZW5kIiwic2hpZnRCdWZmZXIiLCJzbGljZSIsInNoaWZ0Iiwid3JpdGUiLCJjaHVuayIsIm9uZXJyb3IiLCJFcnJvciIsInJ1bm5pbmciLCJwYXVzZSIsInJlc3VtZSIsInBhcnNlQ2h1bmsiLCJkb25lIiwiZXhwb3J0cyJdLCJzb3VyY2VzIjpbImh0dHBzOi8vcmF3LmdpdGh1YnVzZXJjb250ZW50LmNvbS9mYjU1L2h0bWxwYXJzZXIyL2MxMjM2MTBlMDAzYTFlYWViYzYxZmViZWQwMWNhYmI2ZTQxZWI2NTgvc3JjL1BhcnNlci50cyJdLCJzb3VyY2VzQ29udGVudCI6W251bGxdLCJtYXBwaW5ncyI6Ijs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7Ozs7OztBQUFBLElBQUFBLGNBQUEsR0FBQUMsWUFBQSxDQUFBQyxPQUFBO0FBQ0EsSUFBQUMsV0FBQSxHQUFBRCxPQUFBO0FBRUEsSUFBTUUsUUFBUSxHQUFHLElBQUlDLEdBQUcsQ0FBQyxDQUNyQixPQUFPLEVBQ1AsUUFBUSxFQUNSLFVBQVUsRUFDVixRQUFRLEVBQ1IsUUFBUSxFQUNSLFVBQVUsRUFDVixVQUFVLENBQ2IsQ0FBQztBQUNGLElBQU1DLElBQUksR0FBRyxJQUFJRCxHQUFHLENBQUMsQ0FBQyxHQUFHLENBQUMsQ0FBQztBQUMzQixJQUFNRSxnQkFBZ0IsR0FBRyxJQUFJRixHQUFHLENBQUMsQ0FBQyxPQUFPLEVBQUUsT0FBTyxDQUFDLENBQUM7QUFDcEQsSUFBTUcsT0FBTyxHQUFHLElBQUlILEdBQUcsQ0FBQyxDQUFDLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQztBQUNyQyxJQUFNSSxPQUFPLEdBQUcsSUFBSUosR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksQ0FBQyxDQUFDO0FBRXJDLElBQU1LLGdCQUFnQixHQUFHLElBQUlDLEdBQUcsQ0FBc0IsQ0FDbEQsQ0FBQyxJQUFJLEVBQUUsSUFBSU4sR0FBRyxDQUFDLENBQUMsSUFBSSxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ25DLENBQUMsSUFBSSxFQUFFLElBQUlBLEdBQUcsQ0FBQyxDQUFDLElBQUksQ0FBQyxDQUFDLENBQUMsRUFDdkIsQ0FBQyxJQUFJLEVBQUUsSUFBSUEsR0FBRyxDQUFDLENBQUMsT0FBTyxFQUFFLElBQUksRUFBRSxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ3RDLENBQUMsTUFBTSxFQUFFLElBQUlBLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxNQUFNLEVBQUUsUUFBUSxDQUFDLENBQUMsQ0FBQyxFQUM3QyxDQUFDLElBQUksRUFBRSxJQUFJQSxHQUFHLENBQUMsQ0FBQyxJQUFJLENBQUMsQ0FBQyxDQUFDLEVBQ3ZCLENBQUMsR0FBRyxFQUFFQyxJQUFJLENBQUMsRUFDWCxDQUFDLElBQUksRUFBRUEsSUFBSSxDQUFDLEVBQ1osQ0FBQyxJQUFJLEVBQUVBLElBQUksQ0FBQyxFQUNaLENBQUMsSUFBSSxFQUFFQSxJQUFJLENBQUMsRUFDWixDQUFDLElBQUksRUFBRUEsSUFBSSxDQUFDLEVBQ1osQ0FBQyxJQUFJLEVBQUVBLElBQUksQ0FBQyxFQUNaLENBQUMsSUFBSSxFQUFFQSxJQUFJLENBQUMsRUFDWixDQUFDLFFBQVEsRUFBRUYsUUFBUSxDQUFDLEVBQ3BCLENBQUMsT0FBTyxFQUFFQSxRQUFRLENBQUMsRUFDbkIsQ0FBQyxRQUFRLEVBQUVBLFFBQVEsQ0FBQyxFQUNwQixDQUFDLFFBQVEsRUFBRUEsUUFBUSxDQUFDLEVBQ3BCLENBQUMsVUFBVSxFQUFFQSxRQUFRLENBQUMsRUFDdEIsQ0FBQyxVQUFVLEVBQUVBLFFBQVEsQ0FBQyxFQUN0QixDQUFDLFFBQVEsRUFBRSxJQUFJQyxHQUFHLENBQUMsQ0FBQyxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQy9CLENBQUMsVUFBVSxFQUFFLElBQUlBLEdBQUcsQ0FBQyxDQUFDLFVBQVUsRUFBRSxRQUFRLENBQUMsQ0FBQyxDQUFDLEVBQzdDLENBQUMsSUFBSSxFQUFFRyxPQUFPLENBQUMsRUFDZixDQUFDLElBQUksRUFBRUEsT0FBTyxDQUFDLEVBQ2YsQ0FBQyxTQUFTLEVBQUVGLElBQUksQ0FBQyxFQUNqQixDQUFDLFNBQVMsRUFBRUEsSUFBSSxDQUFDLEVBQ2pCLENBQUMsT0FBTyxFQUFFQSxJQUFJLENBQUMsRUFDZixDQUFDLFlBQVksRUFBRUEsSUFBSSxDQUFDLEVBQ3BCLENBQUMsU0FBUyxFQUFFQSxJQUFJLENBQUMsRUFDakIsQ0FBQyxLQUFLLEVBQUVBLElBQUksQ0FBQyxFQUNiLENBQUMsSUFBSSxFQUFFQSxJQUFJLENBQUMsRUFDWixDQUFDLFVBQVUsRUFBRUEsSUFBSSxDQUFDLEVBQ2xCLENBQUMsWUFBWSxFQUFFQSxJQUFJLENBQUMsRUFDcEIsQ0FBQyxRQUFRLEVBQUVBLElBQUksQ0FBQyxFQUNoQixDQUFDLFFBQVEsRUFBRUEsSUFBSSxDQUFDLEVBQ2hCLENBQUMsTUFBTSxFQUFFQSxJQUFJLENBQUMsRUFDZCxDQUFDLFFBQVEsRUFBRUEsSUFBSSxDQUFDLEVBQ2hCLENBQUMsSUFBSSxFQUFFQSxJQUFJLENBQUMsRUFDWixDQUFDLE1BQU0sRUFBRUEsSUFBSSxDQUFDLEVBQ2QsQ0FBQyxLQUFLLEVBQUVBLElBQUksQ0FBQyxFQUNiLENBQUMsSUFBSSxFQUFFQSxJQUFJLENBQUMsRUFDWixDQUFDLEtBQUssRUFBRUEsSUFBSSxDQUFDLEVBQ2IsQ0FBQyxTQUFTLEVBQUVBLElBQUksQ0FBQyxFQUNqQixDQUFDLE9BQU8sRUFBRUEsSUFBSSxDQUFDLEVBQ2YsQ0FBQyxJQUFJLEVBQUVBLElBQUksQ0FBQyxFQUNaLENBQUMsSUFBSSxFQUFFRyxPQUFPLENBQUMsRUFDZixDQUFDLElBQUksRUFBRUEsT0FBTyxDQUFDLEVBQ2YsQ0FBQyxPQUFPLEVBQUVGLGdCQUFnQixDQUFDLEVBQzNCLENBQUMsT0FBTyxFQUFFQSxnQkFBZ0IsQ0FBQyxDQUM5QixDQUFDO0FBRUYsSUFBTUssWUFBWSxHQUFHLElBQUlQLEdBQUcsQ0FBQyxDQUN6QixNQUFNLEVBQ04sTUFBTSxFQUNOLFVBQVUsRUFDVixJQUFJLEVBQ0osS0FBSyxFQUNMLFNBQVMsRUFDVCxPQUFPLEVBQ1AsT0FBTyxFQUNQLElBQUksRUFDSixLQUFLLEVBQ0wsT0FBTyxFQUNQLFNBQVMsRUFDVCxRQUFRLEVBQ1IsTUFBTSxFQUNOLE1BQU0sRUFDTixPQUFPLEVBQ1AsUUFBUSxFQUNSLE9BQU8sRUFDUCxLQUFLLENBQ1IsQ0FBQztBQUVGLElBQU1RLHNCQUFzQixHQUFHLElBQUlSLEdBQUcsQ0FBQyxDQUFDLE1BQU0sRUFBRSxLQUFLLENBQUMsQ0FBQztBQUV2RCxJQUFNUyx1QkFBdUIsR0FBRyxJQUFJVCxHQUFHLENBQUMsQ0FDcEMsSUFBSSxFQUNKLElBQUksRUFDSixJQUFJLEVBQ0osSUFBSSxFQUNKLE9BQU8sRUFDUCxnQkFBZ0IsRUFDaEIsZUFBZSxFQUNmLE1BQU0sRUFDTixPQUFPLENBQ1YsQ0FBQztBQStGRixJQUFNVSxTQUFTLEdBQUcsT0FBTztBQUV6QixJQUFBQyxNQUFBO0VBNkJJLFNBQUFBLE9BQ0lDLEdBQTZCLEVBQ1pDLE9BQTJCO0lBQTNCLElBQUFBLE9BQUE7TUFBQUEsT0FBQSxLQUEyQjtJQUFBOztJQUEzQixLQUFBQSxPQUFPLEdBQVBBLE9BQU87SUE5QjVCO0lBQ08sS0FBQUMsVUFBVSxHQUFHLENBQUM7SUFDckI7SUFDTyxLQUFBQyxRQUFRLEdBQUcsQ0FBQztJQUNuQjs7OztJQUlRLEtBQUFDLFlBQVksR0FBRyxDQUFDO0lBRWhCLEtBQUFDLE9BQU8sR0FBRyxFQUFFO0lBQ1osS0FBQUMsVUFBVSxHQUFHLEVBQUU7SUFDZixLQUFBQyxXQUFXLEdBQUcsRUFBRTtJQUNoQixLQUFBQyxPQUFPLEdBQXFDLElBQUk7SUFDdkMsS0FBQUMsS0FBSyxHQUFhLEVBQUU7SUFDcEIsS0FBQUMsY0FBYyxHQUFjLEVBQUU7SUFNOUIsS0FBQUMsT0FBTyxHQUFhLEVBQUU7SUFDL0IsS0FBQUMsWUFBWSxHQUFHLENBQUM7SUFDeEI7SUFDUSxLQUFBQyxVQUFVLEdBQUcsQ0FBQztJQUN0QjtJQUNRLEtBQUFDLEtBQUssR0FBRyxLQUFLO0lBTWpCLElBQUksQ0FBQ2QsR0FBRyxHQUFHQSxHQUFHLGFBQUhBLEdBQUcsY0FBSEEsR0FBRyxHQUFJLEVBQUU7SUFDcEIsSUFBSSxDQUFDZSxpQkFBaUIsR0FBRyxDQUFBQyxFQUFBLEdBQUFmLE9BQU8sQ0FBQ2dCLGFBQWEsY0FBQUQsRUFBQSxjQUFBQSxFQUFBLEdBQUksQ0FBQ2YsT0FBTyxDQUFDaUIsT0FBTztJQUNsRSxJQUFJLENBQUNDLHVCQUF1QixHQUN4QixDQUFBQyxFQUFBLEdBQUFuQixPQUFPLENBQUNrQix1QkFBdUIsY0FBQUMsRUFBQSxjQUFBQSxFQUFBLEdBQUksQ0FBQ25CLE9BQU8sQ0FBQ2lCLE9BQU87SUFDdkQsSUFBSSxDQUFDRyxTQUFTLEdBQUcsS0FBSyxDQUFBQyxFQUFBLEdBQUFyQixPQUFPLENBQUNzQixTQUFTLGNBQUFELEVBQUEsY0FBQUEsRUFBQSxHQUFJdkMsY0FBQSxDQUFBeUMsT0FBUyxFQUNoRCxJQUFJLENBQUN2QixPQUFPLEVBQ1osSUFBSSxDQUNQO0lBQ0QsQ0FBQXdCLEVBQUEsSUFBQUMsRUFBQSxPQUFJLENBQUMxQixHQUFHLEVBQUMyQixZQUFZLGNBQUFGLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQUcsSUFBQSxDQUFBRixFQUFBLEVBQUcsSUFBSSxDQUFDO0VBQ2pDO0VBRUE7RUFFQTtFQUNBM0IsTUFBQSxDQUFBOEIsU0FBQSxDQUFBQyxNQUFNLEdBQU4sVUFBT0MsS0FBYSxFQUFFNUIsUUFBZ0I7O0lBQ2xDLElBQU02QixJQUFJLEdBQUcsSUFBSSxDQUFDQyxRQUFRLENBQUNGLEtBQUssRUFBRTVCLFFBQVEsQ0FBQztJQUMzQyxJQUFJLENBQUNBLFFBQVEsR0FBR0EsUUFBUSxHQUFHLENBQUM7SUFDNUIsQ0FBQWlCLEVBQUEsSUFBQUosRUFBQSxPQUFJLENBQUNoQixHQUFHLEVBQUM4QixNQUFNLGNBQUFWLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQVEsSUFBQSxDQUFBWixFQUFBLEVBQUdnQixJQUFJLENBQUM7SUFDdkIsSUFBSSxDQUFDOUIsVUFBVSxHQUFHQyxRQUFRO0VBQzlCLENBQUM7RUFFRDtFQUNBSixNQUFBLENBQUE4QixTQUFBLENBQUFLLFlBQVksR0FBWixVQUFhQyxFQUFVOztJQUNuQjs7OztJQUlBLElBQU1DLEtBQUssR0FBRyxJQUFJLENBQUNmLFNBQVMsQ0FBQ2dCLGVBQWUsRUFBRTtJQUM5QyxJQUFJLENBQUNsQyxRQUFRLEdBQUdpQyxLQUFLLEdBQUcsQ0FBQztJQUN6QixDQUFBaEIsRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ2hCLEdBQUcsRUFBQzhCLE1BQU0sY0FBQVYsRUFBQSx1QkFBQUEsRUFBQSxDQUFBUSxJQUFBLENBQUFaLEVBQUEsRUFBRyxJQUFBOUIsV0FBQSxDQUFBb0QsYUFBYSxFQUFDSCxFQUFFLENBQUMsQ0FBQztJQUNwQyxJQUFJLENBQUNqQyxVQUFVLEdBQUdrQyxLQUFLO0VBQzNCLENBQUM7RUFFU3JDLE1BQUEsQ0FBQThCLFNBQUEsQ0FBQVUsYUFBYSxHQUF2QixVQUF3QkMsSUFBWTtJQUNoQyxPQUFPLENBQUMsSUFBSSxDQUFDdkMsT0FBTyxDQUFDaUIsT0FBTyxJQUFJdkIsWUFBWSxDQUFDOEMsR0FBRyxDQUFDRCxJQUFJLENBQUM7RUFDMUQsQ0FBQztFQUVEO0VBQ0F6QyxNQUFBLENBQUE4QixTQUFBLENBQUFhLGFBQWEsR0FBYixVQUFjWCxLQUFhLEVBQUU1QixRQUFnQjtJQUN6QyxJQUFJLENBQUNBLFFBQVEsR0FBR0EsUUFBUTtJQUV4QixJQUFJcUMsSUFBSSxHQUFHLElBQUksQ0FBQ1AsUUFBUSxDQUFDRixLQUFLLEVBQUU1QixRQUFRLENBQUM7SUFFekMsSUFBSSxJQUFJLENBQUNZLGlCQUFpQixFQUFFO01BQ3hCeUIsSUFBSSxHQUFHQSxJQUFJLENBQUNHLFdBQVcsRUFBRTs7SUFHN0IsSUFBSSxDQUFDQyxXQUFXLENBQUNKLElBQUksQ0FBQztFQUMxQixDQUFDO0VBRU96QyxNQUFBLENBQUE4QixTQUFBLENBQUFlLFdBQVcsR0FBbkIsVUFBb0JKLElBQVk7O0lBQzVCLElBQUksQ0FBQ3BDLFlBQVksR0FBRyxJQUFJLENBQUNGLFVBQVU7SUFDbkMsSUFBSSxDQUFDRyxPQUFPLEdBQUdtQyxJQUFJO0lBRW5CLElBQU1LLFlBQVksR0FDZCxDQUFDLElBQUksQ0FBQzVDLE9BQU8sQ0FBQ2lCLE9BQU8sSUFBSXpCLGdCQUFnQixDQUFDcUQsR0FBRyxDQUFDTixJQUFJLENBQUM7SUFFdkQsSUFBSUssWUFBWSxFQUFFO01BQ2QsT0FDSSxJQUFJLENBQUNwQyxLQUFLLENBQUNzQyxNQUFNLEdBQUcsQ0FBQyxJQUNyQkYsWUFBWSxDQUFDSixHQUFHLENBQUMsSUFBSSxDQUFDaEMsS0FBSyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDc0MsTUFBTSxHQUFHLENBQUMsQ0FBQyxDQUFDLEVBQ3JEO1FBQ0UsSUFBTUMsT0FBTyxHQUFHLElBQUksQ0FBQ3ZDLEtBQUssQ0FBQ3dDLEdBQUcsRUFBRztRQUNqQyxDQUFBN0IsRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ2hCLEdBQUcsRUFBQ2tELFVBQVUsY0FBQTlCLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQVEsSUFBQSxDQUFBWixFQUFBLEVBQUdnQyxPQUFPLEVBQUUsSUFBSSxDQUFDOzs7SUFHNUMsSUFBSSxDQUFDLElBQUksQ0FBQ1QsYUFBYSxDQUFDQyxJQUFJLENBQUMsRUFBRTtNQUMzQixJQUFJLENBQUMvQixLQUFLLENBQUMwQyxJQUFJLENBQUNYLElBQUksQ0FBQztNQUNyQixJQUFJNUMsc0JBQXNCLENBQUM2QyxHQUFHLENBQUNELElBQUksQ0FBQyxFQUFFO1FBQ2xDLElBQUksQ0FBQzlCLGNBQWMsQ0FBQ3lDLElBQUksQ0FBQyxJQUFJLENBQUM7T0FDakMsTUFBTSxJQUFJdEQsdUJBQXVCLENBQUM0QyxHQUFHLENBQUNELElBQUksQ0FBQyxFQUFFO1FBQzFDLElBQUksQ0FBQzlCLGNBQWMsQ0FBQ3lDLElBQUksQ0FBQyxLQUFLLENBQUM7OztJQUd2QyxDQUFBekIsRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ3RCLEdBQUcsRUFBQzBDLGFBQWEsY0FBQWhCLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQUUsSUFBQSxDQUFBTixFQUFBLEVBQUdrQixJQUFJLENBQUM7SUFDOUIsSUFBSSxJQUFJLENBQUN4QyxHQUFHLENBQUNvRCxTQUFTLEVBQUUsSUFBSSxDQUFDNUMsT0FBTyxHQUFHLEVBQUU7RUFDN0MsQ0FBQztFQUVPVCxNQUFBLENBQUE4QixTQUFBLENBQUF3QixVQUFVLEdBQWxCLFVBQW1CQyxTQUFrQjs7SUFDakMsSUFBSSxDQUFDcEQsVUFBVSxHQUFHLElBQUksQ0FBQ0UsWUFBWTtJQUVuQyxJQUFJLElBQUksQ0FBQ0ksT0FBTyxFQUFFO01BQ2QsQ0FBQVksRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ2hCLEdBQUcsRUFBQ29ELFNBQVMsY0FBQWhDLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQVEsSUFBQSxDQUFBWixFQUFBLEVBQUcsSUFBSSxDQUFDWCxPQUFPLEVBQUUsSUFBSSxDQUFDRyxPQUFPLEVBQUU4QyxTQUFTLENBQUM7TUFDM0QsSUFBSSxDQUFDOUMsT0FBTyxHQUFHLElBQUk7O0lBRXZCLElBQUksSUFBSSxDQUFDUixHQUFHLENBQUNrRCxVQUFVLElBQUksSUFBSSxDQUFDWCxhQUFhLENBQUMsSUFBSSxDQUFDbEMsT0FBTyxDQUFDLEVBQUU7TUFDekQsSUFBSSxDQUFDTCxHQUFHLENBQUNrRCxVQUFVLENBQUMsSUFBSSxDQUFDN0MsT0FBTyxFQUFFLElBQUksQ0FBQzs7SUFHM0MsSUFBSSxDQUFDQSxPQUFPLEdBQUcsRUFBRTtFQUNyQixDQUFDO0VBRUQ7RUFDQU4sTUFBQSxDQUFBOEIsU0FBQSxDQUFBMEIsWUFBWSxHQUFaLFVBQWFwRCxRQUFnQjtJQUN6QixJQUFJLENBQUNBLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFJLENBQUNrRCxVQUFVLENBQUMsS0FBSyxDQUFDO0lBRXRCO0lBQ0EsSUFBSSxDQUFDbkQsVUFBVSxHQUFHQyxRQUFRLEdBQUcsQ0FBQztFQUNsQyxDQUFDO0VBRUQ7RUFDQUosTUFBQSxDQUFBOEIsU0FBQSxDQUFBcUIsVUFBVSxHQUFWLFVBQVduQixLQUFhLEVBQUU1QixRQUFnQjs7SUFDdEMsSUFBSSxDQUFDQSxRQUFRLEdBQUdBLFFBQVE7SUFFeEIsSUFBSXFDLElBQUksR0FBRyxJQUFJLENBQUNQLFFBQVEsQ0FBQ0YsS0FBSyxFQUFFNUIsUUFBUSxDQUFDO0lBRXpDLElBQUksSUFBSSxDQUFDWSxpQkFBaUIsRUFBRTtNQUN4QnlCLElBQUksR0FBR0EsSUFBSSxDQUFDRyxXQUFXLEVBQUU7O0lBRzdCLElBQ0kvQyxzQkFBc0IsQ0FBQzZDLEdBQUcsQ0FBQ0QsSUFBSSxDQUFDLElBQ2hDM0MsdUJBQXVCLENBQUM0QyxHQUFHLENBQUNELElBQUksQ0FBQyxFQUNuQztNQUNFLElBQUksQ0FBQzlCLGNBQWMsQ0FBQ3VDLEdBQUcsRUFBRTs7SUFHN0IsSUFBSSxDQUFDLElBQUksQ0FBQ1YsYUFBYSxDQUFDQyxJQUFJLENBQUMsRUFBRTtNQUMzQixJQUFNZ0IsR0FBRyxHQUFHLElBQUksQ0FBQy9DLEtBQUssQ0FBQ2dELFdBQVcsQ0FBQ2pCLElBQUksQ0FBQztNQUN4QyxJQUFJZ0IsR0FBRyxLQUFLLENBQUMsQ0FBQyxFQUFFO1FBQ1osSUFBSSxJQUFJLENBQUN4RCxHQUFHLENBQUNrRCxVQUFVLEVBQUU7VUFDckIsSUFBSVEsS0FBSyxHQUFHLElBQUksQ0FBQ2pELEtBQUssQ0FBQ3NDLE1BQU0sR0FBR1MsR0FBRztVQUNuQyxPQUFPRSxLQUFLLEVBQUUsRUFBRTtZQUNaO1lBQ0EsSUFBSSxDQUFDMUQsR0FBRyxDQUFDa0QsVUFBVSxDQUFDLElBQUksQ0FBQ3pDLEtBQUssQ0FBQ3dDLEdBQUcsRUFBRyxFQUFFUyxLQUFLLEtBQUssQ0FBQyxDQUFDOztTQUUxRCxNQUFNLElBQUksQ0FBQ2pELEtBQUssQ0FBQ3NDLE1BQU0sR0FBR1MsR0FBRztPQUNqQyxNQUFNLElBQUksQ0FBQyxJQUFJLENBQUN2RCxPQUFPLENBQUNpQixPQUFPLElBQUlzQixJQUFJLEtBQUssR0FBRyxFQUFFO1FBQzlDO1FBQ0EsSUFBSSxDQUFDSSxXQUFXLENBQUMsR0FBRyxDQUFDO1FBQ3JCLElBQUksQ0FBQ2UsZUFBZSxDQUFDLElBQUksQ0FBQzs7S0FFakMsTUFBTSxJQUFJLENBQUMsSUFBSSxDQUFDMUQsT0FBTyxDQUFDaUIsT0FBTyxJQUFJc0IsSUFBSSxLQUFLLElBQUksRUFBRTtNQUMvQztNQUNBLENBQUFwQixFQUFBLElBQUFKLEVBQUEsT0FBSSxDQUFDaEIsR0FBRyxFQUFDMEMsYUFBYSxjQUFBdEIsRUFBQSx1QkFBQUEsRUFBQSxDQUFBUSxJQUFBLENBQUFaLEVBQUEsRUFBRyxJQUFJLENBQUM7TUFDOUIsQ0FBQVUsRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ3RCLEdBQUcsRUFBQ29ELFNBQVMsY0FBQTFCLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQUUsSUFBQSxDQUFBTixFQUFBLEVBQUcsSUFBSSxFQUFFLEVBQUUsRUFBRSxJQUFJLENBQUM7TUFDcEMsQ0FBQXNDLEVBQUEsSUFBQW5DLEVBQUEsT0FBSSxDQUFDekIsR0FBRyxFQUFDa0QsVUFBVSxjQUFBVSxFQUFBLHVCQUFBQSxFQUFBLENBQUFoQyxJQUFBLENBQUFILEVBQUEsRUFBRyxJQUFJLEVBQUUsS0FBSyxDQUFDOztJQUd0QztJQUNBLElBQUksQ0FBQ3ZCLFVBQVUsR0FBR0MsUUFBUSxHQUFHLENBQUM7RUFDbEMsQ0FBQztFQUVEO0VBQ0FKLE1BQUEsQ0FBQThCLFNBQUEsQ0FBQWdDLGdCQUFnQixHQUFoQixVQUFpQjFELFFBQWdCO0lBQzdCLElBQUksQ0FBQ0EsUUFBUSxHQUFHQSxRQUFRO0lBQ3hCLElBQ0ksSUFBSSxDQUFDRixPQUFPLENBQUNpQixPQUFPLElBQ3BCLElBQUksQ0FBQ2pCLE9BQU8sQ0FBQzZELG9CQUFvQixJQUNqQyxJQUFJLENBQUNwRCxjQUFjLENBQUMsSUFBSSxDQUFDQSxjQUFjLENBQUNxQyxNQUFNLEdBQUcsQ0FBQyxDQUFDLEVBQ3JEO01BQ0UsSUFBSSxDQUFDWSxlQUFlLENBQUMsS0FBSyxDQUFDO01BRTNCO01BQ0EsSUFBSSxDQUFDekQsVUFBVSxHQUFHQyxRQUFRLEdBQUcsQ0FBQztLQUNqQyxNQUFNO01BQ0g7TUFDQSxJQUFJLENBQUNvRCxZQUFZLENBQUNwRCxRQUFRLENBQUM7O0VBRW5DLENBQUM7RUFFT0osTUFBQSxDQUFBOEIsU0FBQSxDQUFBOEIsZUFBZSxHQUF2QixVQUF3QkksYUFBc0I7O0lBQzFDLElBQU12QixJQUFJLEdBQUcsSUFBSSxDQUFDbkMsT0FBTztJQUN6QixJQUFJLENBQUNnRCxVQUFVLENBQUNVLGFBQWEsQ0FBQztJQUU5QjtJQUNBLElBQUksSUFBSSxDQUFDdEQsS0FBSyxDQUFDLElBQUksQ0FBQ0EsS0FBSyxDQUFDc0MsTUFBTSxHQUFHLENBQUMsQ0FBQyxLQUFLUCxJQUFJLEVBQUU7TUFDNUM7TUFDQSxDQUFBcEIsRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ2hCLEdBQUcsRUFBQ2tELFVBQVUsY0FBQTlCLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQVEsSUFBQSxDQUFBWixFQUFBLEVBQUd3QixJQUFJLEVBQUUsQ0FBQ3VCLGFBQWEsQ0FBQztNQUMzQyxJQUFJLENBQUN0RCxLQUFLLENBQUN3QyxHQUFHLEVBQUU7O0VBRXhCLENBQUM7RUFFRDtFQUNBbEQsTUFBQSxDQUFBOEIsU0FBQSxDQUFBbUMsWUFBWSxHQUFaLFVBQWFqQyxLQUFhLEVBQUU1QixRQUFnQjtJQUN4QyxJQUFJLENBQUNELFVBQVUsR0FBRzZCLEtBQUs7SUFDdkIsSUFBTVMsSUFBSSxHQUFHLElBQUksQ0FBQ1AsUUFBUSxDQUFDRixLQUFLLEVBQUU1QixRQUFRLENBQUM7SUFFM0MsSUFBSSxDQUFDRyxVQUFVLEdBQUcsSUFBSSxDQUFDYSx1QkFBdUIsR0FDeENxQixJQUFJLENBQUNHLFdBQVcsRUFBRSxHQUNsQkgsSUFBSTtFQUNkLENBQUM7RUFFRDtFQUNBekMsTUFBQSxDQUFBOEIsU0FBQSxDQUFBb0MsWUFBWSxHQUFaLFVBQWFsQyxLQUFhLEVBQUU1QixRQUFnQjtJQUN4QyxJQUFJLENBQUNJLFdBQVcsSUFBSSxJQUFJLENBQUMwQixRQUFRLENBQUNGLEtBQUssRUFBRTVCLFFBQVEsQ0FBQztFQUN0RCxDQUFDO0VBRUQ7RUFDQUosTUFBQSxDQUFBOEIsU0FBQSxDQUFBcUMsY0FBYyxHQUFkLFVBQWUvQixFQUFVO0lBQ3JCLElBQUksQ0FBQzVCLFdBQVcsSUFBSSxJQUFBckIsV0FBQSxDQUFBb0QsYUFBYSxFQUFDSCxFQUFFLENBQUM7RUFDekMsQ0FBQztFQUVEO0VBQ0FwQyxNQUFBLENBQUE4QixTQUFBLENBQUFzQyxXQUFXLEdBQVgsVUFBWUMsS0FBZ0IsRUFBRWpFLFFBQWdCOztJQUMxQyxJQUFJLENBQUNBLFFBQVEsR0FBR0EsUUFBUTtJQUV4QixDQUFBaUIsRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ2hCLEdBQUcsRUFBQ3FFLFdBQVcsY0FBQWpELEVBQUEsdUJBQUFBLEVBQUEsQ0FBQVEsSUFBQSxDQUFBWixFQUFBLEVBQ2hCLElBQUksQ0FBQ1YsVUFBVSxFQUNmLElBQUksQ0FBQ0MsV0FBVyxFQUNoQjZELEtBQUssS0FBS3JGLGNBQUEsQ0FBQXVGLFNBQVMsQ0FBQ0MsTUFBTSxHQUNwQixHQUFHLEdBQ0hILEtBQUssS0FBS3JGLGNBQUEsQ0FBQXVGLFNBQVMsQ0FBQ0UsTUFBTSxHQUMxQixHQUFHLEdBQ0hKLEtBQUssS0FBS3JGLGNBQUEsQ0FBQXVGLFNBQVMsQ0FBQ0csT0FBTyxHQUMzQkMsU0FBUyxHQUNULElBQUksQ0FDYjtJQUVELElBQ0ksSUFBSSxDQUFDbEUsT0FBTyxJQUNaLENBQUNtRSxNQUFNLENBQUM5QyxTQUFTLENBQUMrQyxjQUFjLENBQUNoRCxJQUFJLENBQUMsSUFBSSxDQUFDcEIsT0FBTyxFQUFFLElBQUksQ0FBQ0YsVUFBVSxDQUFDLEVBQ3RFO01BQ0UsSUFBSSxDQUFDRSxPQUFPLENBQUMsSUFBSSxDQUFDRixVQUFVLENBQUMsR0FBRyxJQUFJLENBQUNDLFdBQVc7O0lBRXBELElBQUksQ0FBQ0EsV0FBVyxHQUFHLEVBQUU7RUFDekIsQ0FBQztFQUVPUixNQUFBLENBQUE4QixTQUFBLENBQUFnRCxrQkFBa0IsR0FBMUIsVUFBMkJDLEtBQWE7SUFDcEMsSUFBTTFDLEtBQUssR0FBRzBDLEtBQUssQ0FBQ0MsTUFBTSxDQUFDakYsU0FBUyxDQUFDO0lBQ3JDLElBQUkwQyxJQUFJLEdBQUdKLEtBQUssR0FBRyxDQUFDLEdBQUcwQyxLQUFLLEdBQUdBLEtBQUssQ0FBQ0UsTUFBTSxDQUFDLENBQUMsRUFBRTVDLEtBQUssQ0FBQztJQUVyRCxJQUFJLElBQUksQ0FBQ3JCLGlCQUFpQixFQUFFO01BQ3hCeUIsSUFBSSxHQUFHQSxJQUFJLENBQUNHLFdBQVcsRUFBRTs7SUFHN0IsT0FBT0gsSUFBSTtFQUNmLENBQUM7RUFFRDtFQUNBekMsTUFBQSxDQUFBOEIsU0FBQSxDQUFBb0QsYUFBYSxHQUFiLFVBQWNsRCxLQUFhLEVBQUU1QixRQUFnQjtJQUN6QyxJQUFJLENBQUNBLFFBQVEsR0FBR0EsUUFBUTtJQUN4QixJQUFNMkUsS0FBSyxHQUFHLElBQUksQ0FBQzdDLFFBQVEsQ0FBQ0YsS0FBSyxFQUFFNUIsUUFBUSxDQUFDO0lBRTVDLElBQUksSUFBSSxDQUFDSCxHQUFHLENBQUNrRix1QkFBdUIsRUFBRTtNQUNsQyxJQUFNMUMsSUFBSSxHQUFHLElBQUksQ0FBQ3FDLGtCQUFrQixDQUFDQyxLQUFLLENBQUM7TUFDM0MsSUFBSSxDQUFDOUUsR0FBRyxDQUFDa0YsdUJBQXVCLENBQUMsSUFBQUMsTUFBQSxDQUFJM0MsSUFBSSxDQUFFLEVBQUUsSUFBQTJDLE1BQUEsQ0FBSUwsS0FBSyxDQUFFLENBQUM7O0lBRzdEO0lBQ0EsSUFBSSxDQUFDNUUsVUFBVSxHQUFHQyxRQUFRLEdBQUcsQ0FBQztFQUNsQyxDQUFDO0VBRUQ7RUFDQUosTUFBQSxDQUFBOEIsU0FBQSxDQUFBcUQsdUJBQXVCLEdBQXZCLFVBQXdCbkQsS0FBYSxFQUFFNUIsUUFBZ0I7SUFDbkQsSUFBSSxDQUFDQSxRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBTTJFLEtBQUssR0FBRyxJQUFJLENBQUM3QyxRQUFRLENBQUNGLEtBQUssRUFBRTVCLFFBQVEsQ0FBQztJQUU1QyxJQUFJLElBQUksQ0FBQ0gsR0FBRyxDQUFDa0YsdUJBQXVCLEVBQUU7TUFDbEMsSUFBTTFDLElBQUksR0FBRyxJQUFJLENBQUNxQyxrQkFBa0IsQ0FBQ0MsS0FBSyxDQUFDO01BQzNDLElBQUksQ0FBQzlFLEdBQUcsQ0FBQ2tGLHVCQUF1QixDQUFDLElBQUFDLE1BQUEsQ0FBSTNDLElBQUksQ0FBRSxFQUFFLElBQUEyQyxNQUFBLENBQUlMLEtBQUssQ0FBRSxDQUFDOztJQUc3RDtJQUNBLElBQUksQ0FBQzVFLFVBQVUsR0FBR0MsUUFBUSxHQUFHLENBQUM7RUFDbEMsQ0FBQztFQUVEO0VBQ0FKLE1BQUEsQ0FBQThCLFNBQUEsQ0FBQXVELFNBQVMsR0FBVCxVQUFVckQsS0FBYSxFQUFFNUIsUUFBZ0IsRUFBRWtGLE1BQWM7O0lBQ3JELElBQUksQ0FBQ2xGLFFBQVEsR0FBR0EsUUFBUTtJQUV4QixDQUFBaUIsRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ2hCLEdBQUcsRUFBQ29GLFNBQVMsY0FBQWhFLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQVEsSUFBQSxDQUFBWixFQUFBLEVBQUcsSUFBSSxDQUFDaUIsUUFBUSxDQUFDRixLQUFLLEVBQUU1QixRQUFRLEdBQUdrRixNQUFNLENBQUMsQ0FBQztJQUM3RCxDQUFBM0QsRUFBQSxJQUFBSixFQUFBLE9BQUksQ0FBQ3RCLEdBQUcsRUFBQ3NGLFlBQVksY0FBQTVELEVBQUEsdUJBQUFBLEVBQUEsQ0FBQUUsSUFBQSxDQUFBTixFQUFBLENBQUk7SUFFekI7SUFDQSxJQUFJLENBQUNwQixVQUFVLEdBQUdDLFFBQVEsR0FBRyxDQUFDO0VBQ2xDLENBQUM7RUFFRDtFQUNBSixNQUFBLENBQUE4QixTQUFBLENBQUEwRCxPQUFPLEdBQVAsVUFBUXhELEtBQWEsRUFBRTVCLFFBQWdCLEVBQUVrRixNQUFjOztJQUNuRCxJQUFJLENBQUNsRixRQUFRLEdBQUdBLFFBQVE7SUFDeEIsSUFBTTJFLEtBQUssR0FBRyxJQUFJLENBQUM3QyxRQUFRLENBQUNGLEtBQUssRUFBRTVCLFFBQVEsR0FBR2tGLE1BQU0sQ0FBQztJQUVyRCxJQUFJLElBQUksQ0FBQ3BGLE9BQU8sQ0FBQ2lCLE9BQU8sSUFBSSxJQUFJLENBQUNqQixPQUFPLENBQUN1RixjQUFjLEVBQUU7TUFDckQsQ0FBQXBFLEVBQUEsSUFBQUosRUFBQSxPQUFJLENBQUNoQixHQUFHLEVBQUN5RixZQUFZLGNBQUFyRSxFQUFBLHVCQUFBQSxFQUFBLENBQUFRLElBQUEsQ0FBQVosRUFBQSxDQUFJO01BQ3pCLENBQUFVLEVBQUEsSUFBQUosRUFBQSxPQUFJLENBQUN0QixHQUFHLEVBQUM4QixNQUFNLGNBQUFKLEVBQUEsdUJBQUFBLEVBQUEsQ0FBQUUsSUFBQSxDQUFBTixFQUFBLEVBQUd3RCxLQUFLLENBQUM7TUFDeEIsQ0FBQWxCLEVBQUEsSUFBQW5DLEVBQUEsT0FBSSxDQUFDekIsR0FBRyxFQUFDMEYsVUFBVSxjQUFBOUIsRUFBQSx1QkFBQUEsRUFBQSxDQUFBaEMsSUFBQSxDQUFBSCxFQUFBLENBQUk7S0FDMUIsTUFBTTtNQUNILENBQUFrRSxFQUFBLElBQUFDLEVBQUEsT0FBSSxDQUFDNUYsR0FBRyxFQUFDb0YsU0FBUyxjQUFBTyxFQUFBLHVCQUFBQSxFQUFBLENBQUEvRCxJQUFBLENBQUFnRSxFQUFBLEVBQUcsVUFBQVQsTUFBQSxDQUFVTCxLQUFLLE9BQUksQ0FBQztNQUN6QyxDQUFBZSxFQUFBLElBQUFDLEVBQUEsT0FBSSxDQUFDOUYsR0FBRyxFQUFDc0YsWUFBWSxjQUFBTyxFQUFBLHVCQUFBQSxFQUFBLENBQUFqRSxJQUFBLENBQUFrRSxFQUFBLENBQUk7O0lBRzdCO0lBQ0EsSUFBSSxDQUFDNUYsVUFBVSxHQUFHQyxRQUFRLEdBQUcsQ0FBQztFQUNsQyxDQUFDO0VBRUQ7RUFDQUosTUFBQSxDQUFBOEIsU0FBQSxDQUFBa0UsS0FBSyxHQUFMOztJQUNJLElBQUksSUFBSSxDQUFDL0YsR0FBRyxDQUFDa0QsVUFBVSxFQUFFO01BQ3JCO01BQ0EsSUFBSSxDQUFDL0MsUUFBUSxHQUFHLElBQUksQ0FBQ0QsVUFBVTtNQUMvQixLQUNJLElBQUlrQyxLQUFLLEdBQUcsSUFBSSxDQUFDM0IsS0FBSyxDQUFDc0MsTUFBTSxFQUM3QlgsS0FBSyxHQUFHLENBQUMsRUFDVCxJQUFJLENBQUNwQyxHQUFHLENBQUNrRCxVQUFVLENBQUMsSUFBSSxDQUFDekMsS0FBSyxDQUFDLEVBQUUyQixLQUFLLENBQUMsRUFBRSxJQUFJLENBQUMsQ0FDakQ7O0lBRUwsQ0FBQWhCLEVBQUEsSUFBQUosRUFBQSxPQUFJLENBQUNoQixHQUFHLEVBQUMrRixLQUFLLGNBQUEzRSxFQUFBLHVCQUFBQSxFQUFBLENBQUFRLElBQUEsQ0FBQVosRUFBQSxDQUFJO0VBQ3RCLENBQUM7RUFFRDs7O0VBR09qQixNQUFBLENBQUE4QixTQUFBLENBQUFtRSxLQUFLLEdBQVo7O0lBQ0ksQ0FBQTVFLEVBQUEsSUFBQUosRUFBQSxPQUFJLENBQUNoQixHQUFHLEVBQUNpRyxPQUFPLGNBQUE3RSxFQUFBLHVCQUFBQSxFQUFBLENBQUFRLElBQUEsQ0FBQVosRUFBQSxDQUFJO0lBQ3BCLElBQUksQ0FBQ0ssU0FBUyxDQUFDMkUsS0FBSyxFQUFFO0lBQ3RCLElBQUksQ0FBQzNGLE9BQU8sR0FBRyxFQUFFO0lBQ2pCLElBQUksQ0FBQ0MsVUFBVSxHQUFHLEVBQUU7SUFDcEIsSUFBSSxDQUFDRSxPQUFPLEdBQUcsSUFBSTtJQUNuQixJQUFJLENBQUNDLEtBQUssQ0FBQ3NDLE1BQU0sR0FBRyxDQUFDO0lBQ3JCLElBQUksQ0FBQzdDLFVBQVUsR0FBRyxDQUFDO0lBQ25CLElBQUksQ0FBQ0MsUUFBUSxHQUFHLENBQUM7SUFDakIsQ0FBQXVCLEVBQUEsSUFBQUosRUFBQSxPQUFJLENBQUN0QixHQUFHLEVBQUMyQixZQUFZLGNBQUFELEVBQUEsdUJBQUFBLEVBQUEsQ0FBQUUsSUFBQSxDQUFBTixFQUFBLEVBQUcsSUFBSSxDQUFDO0lBQzdCLElBQUksQ0FBQ1gsT0FBTyxDQUFDb0MsTUFBTSxHQUFHLENBQUM7SUFDdkIsSUFBSSxDQUFDbkMsWUFBWSxHQUFHLENBQUM7SUFDckIsSUFBSSxDQUFDQyxVQUFVLEdBQUcsQ0FBQztJQUNuQixJQUFJLENBQUNDLEtBQUssR0FBRyxLQUFLO0VBQ3RCLENBQUM7RUFFRDs7Ozs7O0VBTU9mLE1BQUEsQ0FBQThCLFNBQUEsQ0FBQXFFLGFBQWEsR0FBcEIsVUFBcUJsRSxJQUFZO0lBQzdCLElBQUksQ0FBQ2dFLEtBQUssRUFBRTtJQUNaLElBQUksQ0FBQ0csR0FBRyxDQUFDbkUsSUFBSSxDQUFDO0VBQ2xCLENBQUM7RUFFT2pDLE1BQUEsQ0FBQThCLFNBQUEsQ0FBQUksUUFBUSxHQUFoQixVQUFpQkYsS0FBYSxFQUFFb0UsR0FBVztJQUN2QyxPQUFPcEUsS0FBSyxHQUFHLElBQUksQ0FBQ25CLFlBQVksSUFBSSxJQUFJLENBQUNELE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQ29DLE1BQU0sRUFBRTtNQUN4RCxJQUFJLENBQUNxRCxXQUFXLEVBQUU7O0lBR3RCLElBQUlDLEtBQUssR0FBRyxJQUFJLENBQUMxRixPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUMwRixLQUFLLENBQzdCdEUsS0FBSyxHQUFHLElBQUksQ0FBQ25CLFlBQVksRUFDekJ1RixHQUFHLEdBQUcsSUFBSSxDQUFDdkYsWUFBWSxDQUMxQjtJQUVELE9BQU91RixHQUFHLEdBQUcsSUFBSSxDQUFDdkYsWUFBWSxHQUFHLElBQUksQ0FBQ0QsT0FBTyxDQUFDLENBQUMsQ0FBQyxDQUFDb0MsTUFBTSxFQUFFO01BQ3JELElBQUksQ0FBQ3FELFdBQVcsRUFBRTtNQUNsQkMsS0FBSyxJQUFJLElBQUksQ0FBQzFGLE9BQU8sQ0FBQyxDQUFDLENBQUMsQ0FBQzBGLEtBQUssQ0FBQyxDQUFDLEVBQUVGLEdBQUcsR0FBRyxJQUFJLENBQUN2RixZQUFZLENBQUM7O0lBRzlELE9BQU95RixLQUFLO0VBQ2hCLENBQUM7RUFFT3RHLE1BQUEsQ0FBQThCLFNBQUEsQ0FBQXVFLFdBQVcsR0FBbkI7SUFDSSxJQUFJLENBQUN4RixZQUFZLElBQUksSUFBSSxDQUFDRCxPQUFPLENBQUMsQ0FBQyxDQUFDLENBQUNvQyxNQUFNO0lBQzNDLElBQUksQ0FBQ2xDLFVBQVUsRUFBRTtJQUNqQixJQUFJLENBQUNGLE9BQU8sQ0FBQzJGLEtBQUssRUFBRTtFQUN4QixDQUFDO0VBRUQ7Ozs7O0VBS092RyxNQUFBLENBQUE4QixTQUFBLENBQUEwRSxLQUFLLEdBQVosVUFBYUMsS0FBYTs7SUFDdEIsSUFBSSxJQUFJLENBQUMxRixLQUFLLEVBQUU7TUFDWixDQUFBTSxFQUFBLElBQUFKLEVBQUEsT0FBSSxDQUFDaEIsR0FBRyxFQUFDeUcsT0FBTyxjQUFBckYsRUFBQSx1QkFBQUEsRUFBQSxDQUFBUSxJQUFBLENBQUFaLEVBQUEsRUFBRyxJQUFJMEYsS0FBSyxDQUFDLHNCQUFzQixDQUFDLENBQUM7TUFDckQ7O0lBR0osSUFBSSxDQUFDL0YsT0FBTyxDQUFDd0MsSUFBSSxDQUFDcUQsS0FBSyxDQUFDO0lBQ3hCLElBQUksSUFBSSxDQUFDbkYsU0FBUyxDQUFDc0YsT0FBTyxFQUFFO01BQ3hCLElBQUksQ0FBQ3RGLFNBQVMsQ0FBQ2tGLEtBQUssQ0FBQ0MsS0FBSyxDQUFDO01BQzNCLElBQUksQ0FBQzNGLFVBQVUsRUFBRTs7RUFFekIsQ0FBQztFQUVEOzs7OztFQUtPZCxNQUFBLENBQUE4QixTQUFBLENBQUFzRSxHQUFHLEdBQVYsVUFBV0ssS0FBYzs7SUFDckIsSUFBSSxJQUFJLENBQUMxRixLQUFLLEVBQUU7TUFDWixDQUFBTSxFQUFBLElBQUFKLEVBQUEsT0FBSSxDQUFDaEIsR0FBRyxFQUFDeUcsT0FBTyxjQUFBckYsRUFBQSx1QkFBQUEsRUFBQSxDQUFBUSxJQUFBLENBQUFaLEVBQUEsRUFBRyxJQUFJMEYsS0FBSyxDQUFDLG9CQUFvQixDQUFDLENBQUM7TUFDbkQ7O0lBR0osSUFBSUYsS0FBSyxFQUFFLElBQUksQ0FBQ0QsS0FBSyxDQUFDQyxLQUFLLENBQUM7SUFDNUIsSUFBSSxDQUFDMUYsS0FBSyxHQUFHLElBQUk7SUFDakIsSUFBSSxDQUFDTyxTQUFTLENBQUM4RSxHQUFHLEVBQUU7RUFDeEIsQ0FBQztFQUVEOzs7RUFHT3BHLE1BQUEsQ0FBQThCLFNBQUEsQ0FBQStFLEtBQUssR0FBWjtJQUNJLElBQUksQ0FBQ3ZGLFNBQVMsQ0FBQ3VGLEtBQUssRUFBRTtFQUMxQixDQUFDO0VBRUQ7OztFQUdPN0csTUFBQSxDQUFBOEIsU0FBQSxDQUFBZ0YsTUFBTSxHQUFiO0lBQ0ksSUFBSSxDQUFDeEYsU0FBUyxDQUFDd0YsTUFBTSxFQUFFO0lBRXZCLE9BQ0ksSUFBSSxDQUFDeEYsU0FBUyxDQUFDc0YsT0FBTyxJQUN0QixJQUFJLENBQUM5RixVQUFVLEdBQUcsSUFBSSxDQUFDRixPQUFPLENBQUNvQyxNQUFNLEVBQ3ZDO01BQ0UsSUFBSSxDQUFDMUIsU0FBUyxDQUFDa0YsS0FBSyxDQUFDLElBQUksQ0FBQzVGLE9BQU8sQ0FBQyxJQUFJLENBQUNFLFVBQVUsRUFBRSxDQUFDLENBQUM7O0lBR3pELElBQUksSUFBSSxDQUFDQyxLQUFLLEVBQUUsSUFBSSxDQUFDTyxTQUFTLENBQUM4RSxHQUFHLEVBQUU7RUFDeEMsQ0FBQztFQUVEOzs7Ozs7RUFNT3BHLE1BQUEsQ0FBQThCLFNBQUEsQ0FBQWlGLFVBQVUsR0FBakIsVUFBa0JOLEtBQWE7SUFDM0IsSUFBSSxDQUFDRCxLQUFLLENBQUNDLEtBQUssQ0FBQztFQUNyQixDQUFDO0VBQ0Q7Ozs7OztFQU1PekcsTUFBQSxDQUFBOEIsU0FBQSxDQUFBa0YsSUFBSSxHQUFYLFVBQVlQLEtBQWM7SUFDdEIsSUFBSSxDQUFDTCxHQUFHLENBQUNLLEtBQUssQ0FBQztFQUNuQixDQUFDO0VBQ0wsT0FBQXpHLE1BQUM7QUFBRCxDQUFDLENBL2NEO0FBQWFpSCxPQUFBLENBQUFqSCxNQUFBLEdBQUFBLE1BQUEiLCJpZ25vcmVMaXN0IjpbXX0=