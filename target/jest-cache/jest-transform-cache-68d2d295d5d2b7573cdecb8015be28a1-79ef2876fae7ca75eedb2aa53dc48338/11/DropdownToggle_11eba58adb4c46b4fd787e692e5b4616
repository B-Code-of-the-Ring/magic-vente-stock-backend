334d5a5ca40b34011476142e16d4668c
"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _react = _interopRequireDefault(require("react"));
var _propTypes = _interopRequireDefault(require("prop-types"));
var _classnames = _interopRequireDefault(require("classnames"));
var _reactPopper = require("react-popper");
var _DropdownContext = require("./DropdownContext");
var _utils = require("./utils");
var _Button = _interopRequireDefault(require("./Button"));
const _excluded = ["className", "color", "cssModule", "caret", "split", "nav", "tag", "innerRef"];
function _interopRequireDefault(obj) {
  return obj && obj.__esModule ? obj : {
    default: obj
  };
}
function _extends() {
  _extends = Object.assign ? Object.assign.bind() : function (target) {
    for (var i = 1; i < arguments.length; i++) {
      var source = arguments[i];
      for (var key in source) {
        if (Object.prototype.hasOwnProperty.call(source, key)) {
          target[key] = source[key];
        }
      }
    }
    return target;
  };
  return _extends.apply(this, arguments);
}
function _objectWithoutProperties(source, excluded) {
  if (source == null) return {};
  var target = _objectWithoutPropertiesLoose(source, excluded);
  var key, i;
  if (Object.getOwnPropertySymbols) {
    var sourceSymbolKeys = Object.getOwnPropertySymbols(source);
    for (i = 0; i < sourceSymbolKeys.length; i++) {
      key = sourceSymbolKeys[i];
      if (excluded.indexOf(key) >= 0) continue;
      if (!Object.prototype.propertyIsEnumerable.call(source, key)) continue;
      target[key] = source[key];
    }
  }
  return target;
}
function _objectWithoutPropertiesLoose(source, excluded) {
  if (source == null) return {};
  var target = {};
  var sourceKeys = Object.keys(source);
  var key, i;
  for (i = 0; i < sourceKeys.length; i++) {
    key = sourceKeys[i];
    if (excluded.indexOf(key) >= 0) continue;
    target[key] = source[key];
  }
  return target;
}
const propTypes = {
  caret: _propTypes.default.bool,
  color: _propTypes.default.string,
  children: _propTypes.default.node,
  className: _propTypes.default.string,
  cssModule: _propTypes.default.object,
  disabled: _propTypes.default.bool,
  onClick: _propTypes.default.func,
  'aria-haspopup': _propTypes.default.bool,
  split: _propTypes.default.bool,
  tag: _utils.tagPropType,
  nav: _propTypes.default.bool,
  innerRef: _propTypes.default.oneOfType([_propTypes.default.object, _propTypes.default.string, _propTypes.default.func])
};
const defaultProps = {
  color: 'secondary',
  'aria-haspopup': true
};
class DropdownToggle extends _react.default.Component {
  constructor(props) {
    super(props);
    this.onClick = this.onClick.bind(this);
  }
  onClick(e) {
    if (this.props.disabled || this.context.disabled) {
      e.preventDefault();
      return;
    }
    if (this.props.nav && !this.props.tag) {
      e.preventDefault();
    }
    if (this.props.onClick) {
      this.props.onClick(e);
    }
    this.context.toggle(e);
  }
  getRole() {
    return this.context.menuRole || this.props['aria-haspopup'];
  }
  render() {
    const _this$props = this.props,
      {
        className,
        color,
        cssModule,
        caret,
        split,
        nav,
        tag,
        innerRef
      } = _this$props,
      props = _objectWithoutProperties(_this$props, _excluded);
    const ariaLabel = props['aria-label'] || 'Toggle Dropdown';
    const classes = (0, _utils.mapToCssModules)((0, _classnames.default)(className, {
      'dropdown-toggle': caret || split,
      'dropdown-toggle-split': split,
      'nav-link': nav
    }), cssModule);
    const children = typeof props.children !== 'undefined' ? props.children : /*#__PURE__*/_react.default.createElement("span", {
      className: "visually-hidden"
    }, ariaLabel);
    let Tag;
    if (nav && !tag) {
      Tag = 'a';
      props.href = '#';
    } else if (!tag) {
      Tag = _Button.default;
      props.color = color;
      props.cssModule = cssModule;
    } else {
      Tag = tag;
    }

    // extracted the rendering of the Tag component
    const returnFunction = ({
      ref
    }) => {
      const handleRef = tagRef => {
        ref(tagRef);
        const {
          onToggleRef
        } = this.context;
        if (onToggleRef) onToggleRef(tagRef);
      };
      return /*#__PURE__*/_react.default.createElement(Tag, _extends({}, props, {
        [typeof Tag === 'string' ? 'ref' : 'innerRef']: handleRef,
        className: classes,
        onClick: this.onClick,
        "aria-expanded": this.context.isOpen,
        "aria-haspopup": this.getRole(),
        children: children
      }));
    };

    // No Reference component if the component is in Navbar
    if (this.context.inNavbar) {
      return /*#__PURE__*/_react.default.createElement(_react.default.Fragment, null, returnFunction({
        ref: this.context.onToggleRef
      }));
    }

    // Normal rendering if component not in NavBar
    return /*#__PURE__*/_react.default.createElement(_reactPopper.Reference, {
      innerRef: innerRef
    }, returnFunction);
  }
}
DropdownToggle.propTypes = propTypes;
DropdownToggle.defaultProps = defaultProps;
DropdownToggle.contextType = _DropdownContext.DropdownContext;
var _default = DropdownToggle;
exports.default = _default;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJuYW1lcyI6WyJPYmplY3QiLCJkZWZpbmVQcm9wZXJ0eSIsImV4cG9ydHMiLCJ2YWx1ZSIsImRlZmF1bHQiLCJfcmVhY3QiLCJfaW50ZXJvcFJlcXVpcmVEZWZhdWx0IiwicmVxdWlyZSIsIl9wcm9wVHlwZXMiLCJfY2xhc3NuYW1lcyIsIl9yZWFjdFBvcHBlciIsIl9Ecm9wZG93bkNvbnRleHQiLCJfdXRpbHMiLCJfQnV0dG9uIiwiX2V4Y2x1ZGVkIiwib2JqIiwiX19lc01vZHVsZSIsIl9leHRlbmRzIiwiYXNzaWduIiwiYmluZCIsInRhcmdldCIsImkiLCJhcmd1bWVudHMiLCJsZW5ndGgiLCJzb3VyY2UiLCJrZXkiLCJwcm90b3R5cGUiLCJoYXNPd25Qcm9wZXJ0eSIsImNhbGwiLCJhcHBseSIsIl9vYmplY3RXaXRob3V0UHJvcGVydGllcyIsImV4Y2x1ZGVkIiwiX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2UiLCJnZXRPd25Qcm9wZXJ0eVN5bWJvbHMiLCJzb3VyY2VTeW1ib2xLZXlzIiwiaW5kZXhPZiIsInByb3BlcnR5SXNFbnVtZXJhYmxlIiwic291cmNlS2V5cyIsImtleXMiLCJwcm9wVHlwZXMiLCJjYXJldCIsImJvb2wiLCJjb2xvciIsInN0cmluZyIsImNoaWxkcmVuIiwibm9kZSIsImNsYXNzTmFtZSIsImNzc01vZHVsZSIsIm9iamVjdCIsImRpc2FibGVkIiwib25DbGljayIsImZ1bmMiLCJzcGxpdCIsInRhZyIsInRhZ1Byb3BUeXBlIiwibmF2IiwiaW5uZXJSZWYiLCJvbmVPZlR5cGUiLCJkZWZhdWx0UHJvcHMiLCJEcm9wZG93blRvZ2dsZSIsIkNvbXBvbmVudCIsImNvbnN0cnVjdG9yIiwicHJvcHMiLCJlIiwiY29udGV4dCIsInByZXZlbnREZWZhdWx0IiwidG9nZ2xlIiwiZ2V0Um9sZSIsIm1lbnVSb2xlIiwicmVuZGVyIiwiX3RoaXMkcHJvcHMiLCJhcmlhTGFiZWwiLCJjbGFzc2VzIiwibWFwVG9Dc3NNb2R1bGVzIiwiY3JlYXRlRWxlbWVudCIsIlRhZyIsImhyZWYiLCJyZXR1cm5GdW5jdGlvbiIsInJlZiIsImhhbmRsZVJlZiIsInRhZ1JlZiIsIm9uVG9nZ2xlUmVmIiwiaXNPcGVuIiwiaW5OYXZiYXIiLCJGcmFnbWVudCIsIlJlZmVyZW5jZSIsImNvbnRleHRUeXBlIiwiRHJvcGRvd25Db250ZXh0IiwiX2RlZmF1bHQiXSwic291cmNlcyI6WyJEcm9wZG93blRvZ2dsZS5qcyJdLCJzb3VyY2VzQ29udGVudCI6WyJcInVzZSBzdHJpY3RcIjtcblxuT2JqZWN0LmRlZmluZVByb3BlcnR5KGV4cG9ydHMsIFwiX19lc01vZHVsZVwiLCB7XG4gIHZhbHVlOiB0cnVlXG59KTtcbmV4cG9ydHMuZGVmYXVsdCA9IHZvaWQgMDtcbnZhciBfcmVhY3QgPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCJyZWFjdFwiKSk7XG52YXIgX3Byb3BUeXBlcyA9IF9pbnRlcm9wUmVxdWlyZURlZmF1bHQocmVxdWlyZShcInByb3AtdHlwZXNcIikpO1xudmFyIF9jbGFzc25hbWVzID0gX2ludGVyb3BSZXF1aXJlRGVmYXVsdChyZXF1aXJlKFwiY2xhc3NuYW1lc1wiKSk7XG52YXIgX3JlYWN0UG9wcGVyID0gcmVxdWlyZShcInJlYWN0LXBvcHBlclwiKTtcbnZhciBfRHJvcGRvd25Db250ZXh0ID0gcmVxdWlyZShcIi4vRHJvcGRvd25Db250ZXh0XCIpO1xudmFyIF91dGlscyA9IHJlcXVpcmUoXCIuL3V0aWxzXCIpO1xudmFyIF9CdXR0b24gPSBfaW50ZXJvcFJlcXVpcmVEZWZhdWx0KHJlcXVpcmUoXCIuL0J1dHRvblwiKSk7XG5jb25zdCBfZXhjbHVkZWQgPSBbXCJjbGFzc05hbWVcIiwgXCJjb2xvclwiLCBcImNzc01vZHVsZVwiLCBcImNhcmV0XCIsIFwic3BsaXRcIiwgXCJuYXZcIiwgXCJ0YWdcIiwgXCJpbm5lclJlZlwiXTtcbmZ1bmN0aW9uIF9pbnRlcm9wUmVxdWlyZURlZmF1bHQob2JqKSB7IHJldHVybiBvYmogJiYgb2JqLl9fZXNNb2R1bGUgPyBvYmogOiB7IGRlZmF1bHQ6IG9iaiB9OyB9XG5mdW5jdGlvbiBfZXh0ZW5kcygpIHsgX2V4dGVuZHMgPSBPYmplY3QuYXNzaWduID8gT2JqZWN0LmFzc2lnbi5iaW5kKCkgOiBmdW5jdGlvbiAodGFyZ2V0KSB7IGZvciAodmFyIGkgPSAxOyBpIDwgYXJndW1lbnRzLmxlbmd0aDsgaSsrKSB7IHZhciBzb3VyY2UgPSBhcmd1bWVudHNbaV07IGZvciAodmFyIGtleSBpbiBzb3VyY2UpIHsgaWYgKE9iamVjdC5wcm90b3R5cGUuaGFzT3duUHJvcGVydHkuY2FsbChzb3VyY2UsIGtleSkpIHsgdGFyZ2V0W2tleV0gPSBzb3VyY2Vba2V5XTsgfSB9IH0gcmV0dXJuIHRhcmdldDsgfTsgcmV0dXJuIF9leHRlbmRzLmFwcGx5KHRoaXMsIGFyZ3VtZW50cyk7IH1cbmZ1bmN0aW9uIF9vYmplY3RXaXRob3V0UHJvcGVydGllcyhzb3VyY2UsIGV4Y2x1ZGVkKSB7IGlmIChzb3VyY2UgPT0gbnVsbCkgcmV0dXJuIHt9OyB2YXIgdGFyZ2V0ID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCk7IHZhciBrZXksIGk7IGlmIChPYmplY3QuZ2V0T3duUHJvcGVydHlTeW1ib2xzKSB7IHZhciBzb3VyY2VTeW1ib2xLZXlzID0gT2JqZWN0LmdldE93blByb3BlcnR5U3ltYm9scyhzb3VyY2UpOyBmb3IgKGkgPSAwOyBpIDwgc291cmNlU3ltYm9sS2V5cy5sZW5ndGg7IGkrKykgeyBrZXkgPSBzb3VyY2VTeW1ib2xLZXlzW2ldOyBpZiAoZXhjbHVkZWQuaW5kZXhPZihrZXkpID49IDApIGNvbnRpbnVlOyBpZiAoIU9iamVjdC5wcm90b3R5cGUucHJvcGVydHlJc0VudW1lcmFibGUuY2FsbChzb3VyY2UsIGtleSkpIGNvbnRpbnVlOyB0YXJnZXRba2V5XSA9IHNvdXJjZVtrZXldOyB9IH0gcmV0dXJuIHRhcmdldDsgfVxuZnVuY3Rpb24gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzTG9vc2Uoc291cmNlLCBleGNsdWRlZCkgeyBpZiAoc291cmNlID09IG51bGwpIHJldHVybiB7fTsgdmFyIHRhcmdldCA9IHt9OyB2YXIgc291cmNlS2V5cyA9IE9iamVjdC5rZXlzKHNvdXJjZSk7IHZhciBrZXksIGk7IGZvciAoaSA9IDA7IGkgPCBzb3VyY2VLZXlzLmxlbmd0aDsgaSsrKSB7IGtleSA9IHNvdXJjZUtleXNbaV07IGlmIChleGNsdWRlZC5pbmRleE9mKGtleSkgPj0gMCkgY29udGludWU7IHRhcmdldFtrZXldID0gc291cmNlW2tleV07IH0gcmV0dXJuIHRhcmdldDsgfVxuY29uc3QgcHJvcFR5cGVzID0ge1xuICBjYXJldDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIGNvbG9yOiBfcHJvcFR5cGVzLmRlZmF1bHQuc3RyaW5nLFxuICBjaGlsZHJlbjogX3Byb3BUeXBlcy5kZWZhdWx0Lm5vZGUsXG4gIGNsYXNzTmFtZTogX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZyxcbiAgY3NzTW9kdWxlOiBfcHJvcFR5cGVzLmRlZmF1bHQub2JqZWN0LFxuICBkaXNhYmxlZDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIG9uQ2xpY2s6IF9wcm9wVHlwZXMuZGVmYXVsdC5mdW5jLFxuICAnYXJpYS1oYXNwb3B1cCc6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBzcGxpdDogX3Byb3BUeXBlcy5kZWZhdWx0LmJvb2wsXG4gIHRhZzogX3V0aWxzLnRhZ1Byb3BUeXBlLFxuICBuYXY6IF9wcm9wVHlwZXMuZGVmYXVsdC5ib29sLFxuICBpbm5lclJlZjogX3Byb3BUeXBlcy5kZWZhdWx0Lm9uZU9mVHlwZShbX3Byb3BUeXBlcy5kZWZhdWx0Lm9iamVjdCwgX3Byb3BUeXBlcy5kZWZhdWx0LnN0cmluZywgX3Byb3BUeXBlcy5kZWZhdWx0LmZ1bmNdKVxufTtcbmNvbnN0IGRlZmF1bHRQcm9wcyA9IHtcbiAgY29sb3I6ICdzZWNvbmRhcnknLFxuICAnYXJpYS1oYXNwb3B1cCc6IHRydWVcbn07XG5jbGFzcyBEcm9wZG93blRvZ2dsZSBleHRlbmRzIF9yZWFjdC5kZWZhdWx0LkNvbXBvbmVudCB7XG4gIGNvbnN0cnVjdG9yKHByb3BzKSB7XG4gICAgc3VwZXIocHJvcHMpO1xuICAgIHRoaXMub25DbGljayA9IHRoaXMub25DbGljay5iaW5kKHRoaXMpO1xuICB9XG4gIG9uQ2xpY2soZSkge1xuICAgIGlmICh0aGlzLnByb3BzLmRpc2FibGVkIHx8IHRoaXMuY29udGV4dC5kaXNhYmxlZCkge1xuICAgICAgZS5wcmV2ZW50RGVmYXVsdCgpO1xuICAgICAgcmV0dXJuO1xuICAgIH1cbiAgICBpZiAodGhpcy5wcm9wcy5uYXYgJiYgIXRoaXMucHJvcHMudGFnKSB7XG4gICAgICBlLnByZXZlbnREZWZhdWx0KCk7XG4gICAgfVxuICAgIGlmICh0aGlzLnByb3BzLm9uQ2xpY2spIHtcbiAgICAgIHRoaXMucHJvcHMub25DbGljayhlKTtcbiAgICB9XG4gICAgdGhpcy5jb250ZXh0LnRvZ2dsZShlKTtcbiAgfVxuICBnZXRSb2xlKCkge1xuICAgIHJldHVybiB0aGlzLmNvbnRleHQubWVudVJvbGUgfHwgdGhpcy5wcm9wc1snYXJpYS1oYXNwb3B1cCddO1xuICB9XG4gIHJlbmRlcigpIHtcbiAgICBjb25zdCBfdGhpcyRwcm9wcyA9IHRoaXMucHJvcHMsXG4gICAgICB7XG4gICAgICAgIGNsYXNzTmFtZSxcbiAgICAgICAgY29sb3IsXG4gICAgICAgIGNzc01vZHVsZSxcbiAgICAgICAgY2FyZXQsXG4gICAgICAgIHNwbGl0LFxuICAgICAgICBuYXYsXG4gICAgICAgIHRhZyxcbiAgICAgICAgaW5uZXJSZWZcbiAgICAgIH0gPSBfdGhpcyRwcm9wcyxcbiAgICAgIHByb3BzID0gX29iamVjdFdpdGhvdXRQcm9wZXJ0aWVzKF90aGlzJHByb3BzLCBfZXhjbHVkZWQpO1xuICAgIGNvbnN0IGFyaWFMYWJlbCA9IHByb3BzWydhcmlhLWxhYmVsJ10gfHwgJ1RvZ2dsZSBEcm9wZG93bic7XG4gICAgY29uc3QgY2xhc3NlcyA9ICgwLCBfdXRpbHMubWFwVG9Dc3NNb2R1bGVzKSgoMCwgX2NsYXNzbmFtZXMuZGVmYXVsdCkoY2xhc3NOYW1lLCB7XG4gICAgICAnZHJvcGRvd24tdG9nZ2xlJzogY2FyZXQgfHwgc3BsaXQsXG4gICAgICAnZHJvcGRvd24tdG9nZ2xlLXNwbGl0Jzogc3BsaXQsXG4gICAgICAnbmF2LWxpbmsnOiBuYXZcbiAgICB9KSwgY3NzTW9kdWxlKTtcbiAgICBjb25zdCBjaGlsZHJlbiA9IHR5cGVvZiBwcm9wcy5jaGlsZHJlbiAhPT0gJ3VuZGVmaW5lZCcgPyBwcm9wcy5jaGlsZHJlbiA6IC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFwic3BhblwiLCB7XG4gICAgICBjbGFzc05hbWU6IFwidmlzdWFsbHktaGlkZGVuXCJcbiAgICB9LCBhcmlhTGFiZWwpO1xuICAgIGxldCBUYWc7XG4gICAgaWYgKG5hdiAmJiAhdGFnKSB7XG4gICAgICBUYWcgPSAnYSc7XG4gICAgICBwcm9wcy5ocmVmID0gJyMnO1xuICAgIH0gZWxzZSBpZiAoIXRhZykge1xuICAgICAgVGFnID0gX0J1dHRvbi5kZWZhdWx0O1xuICAgICAgcHJvcHMuY29sb3IgPSBjb2xvcjtcbiAgICAgIHByb3BzLmNzc01vZHVsZSA9IGNzc01vZHVsZTtcbiAgICB9IGVsc2Uge1xuICAgICAgVGFnID0gdGFnO1xuICAgIH1cblxuICAgIC8vIGV4dHJhY3RlZCB0aGUgcmVuZGVyaW5nIG9mIHRoZSBUYWcgY29tcG9uZW50XG4gICAgY29uc3QgcmV0dXJuRnVuY3Rpb24gPSAoe1xuICAgICAgcmVmXG4gICAgfSkgPT4ge1xuICAgICAgY29uc3QgaGFuZGxlUmVmID0gdGFnUmVmID0+IHtcbiAgICAgICAgcmVmKHRhZ1JlZik7XG4gICAgICAgIGNvbnN0IHtcbiAgICAgICAgICBvblRvZ2dsZVJlZlxuICAgICAgICB9ID0gdGhpcy5jb250ZXh0O1xuICAgICAgICBpZiAob25Ub2dnbGVSZWYpIG9uVG9nZ2xlUmVmKHRhZ1JlZik7XG4gICAgICB9O1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KFRhZywgX2V4dGVuZHMoe30sIHByb3BzLCB7XG4gICAgICAgIFt0eXBlb2YgVGFnID09PSAnc3RyaW5nJyA/ICdyZWYnIDogJ2lubmVyUmVmJ106IGhhbmRsZVJlZixcbiAgICAgICAgY2xhc3NOYW1lOiBjbGFzc2VzLFxuICAgICAgICBvbkNsaWNrOiB0aGlzLm9uQ2xpY2ssXG4gICAgICAgIFwiYXJpYS1leHBhbmRlZFwiOiB0aGlzLmNvbnRleHQuaXNPcGVuLFxuICAgICAgICBcImFyaWEtaGFzcG9wdXBcIjogdGhpcy5nZXRSb2xlKCksXG4gICAgICAgIGNoaWxkcmVuOiBjaGlsZHJlblxuICAgICAgfSkpO1xuICAgIH07XG5cbiAgICAvLyBObyBSZWZlcmVuY2UgY29tcG9uZW50IGlmIHRoZSBjb21wb25lbnQgaXMgaW4gTmF2YmFyXG4gICAgaWYgKHRoaXMuY29udGV4dC5pbk5hdmJhcikge1xuICAgICAgcmV0dXJuIC8qI19fUFVSRV9fKi9fcmVhY3QuZGVmYXVsdC5jcmVhdGVFbGVtZW50KF9yZWFjdC5kZWZhdWx0LkZyYWdtZW50LCBudWxsLCByZXR1cm5GdW5jdGlvbih7XG4gICAgICAgIHJlZjogdGhpcy5jb250ZXh0Lm9uVG9nZ2xlUmVmXG4gICAgICB9KSk7XG4gICAgfVxuXG4gICAgLy8gTm9ybWFsIHJlbmRlcmluZyBpZiBjb21wb25lbnQgbm90IGluIE5hdkJhclxuICAgIHJldHVybiAvKiNfX1BVUkVfXyovX3JlYWN0LmRlZmF1bHQuY3JlYXRlRWxlbWVudChfcmVhY3RQb3BwZXIuUmVmZXJlbmNlLCB7XG4gICAgICBpbm5lclJlZjogaW5uZXJSZWZcbiAgICB9LCByZXR1cm5GdW5jdGlvbik7XG4gIH1cbn1cbkRyb3Bkb3duVG9nZ2xlLnByb3BUeXBlcyA9IHByb3BUeXBlcztcbkRyb3Bkb3duVG9nZ2xlLmRlZmF1bHRQcm9wcyA9IGRlZmF1bHRQcm9wcztcbkRyb3Bkb3duVG9nZ2xlLmNvbnRleHRUeXBlID0gX0Ryb3Bkb3duQ29udGV4dC5Ecm9wZG93bkNvbnRleHQ7XG52YXIgX2RlZmF1bHQgPSBEcm9wZG93blRvZ2dsZTtcbmV4cG9ydHMuZGVmYXVsdCA9IF9kZWZhdWx0OyJdLCJtYXBwaW5ncyI6IkFBQUEsWUFBWTs7QUFFWkEsTUFBTSxDQUFDQyxjQUFjLENBQUNDLE9BQU8sRUFBRSxZQUFZLEVBQUU7RUFDM0NDLEtBQUssRUFBRTtBQUNULENBQUMsQ0FBQztBQUNGRCxPQUFPLENBQUNFLE9BQU8sR0FBRyxLQUFLLENBQUM7QUFDeEIsSUFBSUMsTUFBTSxHQUFHQyxzQkFBc0IsQ0FBQ0MsT0FBTyxDQUFDLE9BQU8sQ0FBQyxDQUFDO0FBQ3JELElBQUlDLFVBQVUsR0FBR0Ysc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxZQUFZLENBQUMsQ0FBQztBQUM5RCxJQUFJRSxXQUFXLEdBQUdILHNCQUFzQixDQUFDQyxPQUFPLENBQUMsWUFBWSxDQUFDLENBQUM7QUFDL0QsSUFBSUcsWUFBWSxHQUFHSCxPQUFPLENBQUMsY0FBYyxDQUFDO0FBQzFDLElBQUlJLGdCQUFnQixHQUFHSixPQUFPLENBQUMsbUJBQW1CLENBQUM7QUFDbkQsSUFBSUssTUFBTSxHQUFHTCxPQUFPLENBQUMsU0FBUyxDQUFDO0FBQy9CLElBQUlNLE9BQU8sR0FBR1Asc0JBQXNCLENBQUNDLE9BQU8sQ0FBQyxVQUFVLENBQUMsQ0FBQztBQUN6RCxNQUFNTyxTQUFTLEdBQUcsQ0FBQyxXQUFXLEVBQUUsT0FBTyxFQUFFLFdBQVcsRUFBRSxPQUFPLEVBQUUsT0FBTyxFQUFFLEtBQUssRUFBRSxLQUFLLEVBQUUsVUFBVSxDQUFDO0FBQ2pHLFNBQVNSLHNCQUFzQkEsQ0FBQ1MsR0FBRyxFQUFFO0VBQUUsT0FBT0EsR0FBRyxJQUFJQSxHQUFHLENBQUNDLFVBQVUsR0FBR0QsR0FBRyxHQUFHO0lBQUVYLE9BQU8sRUFBRVc7RUFBSSxDQUFDO0FBQUU7QUFDOUYs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