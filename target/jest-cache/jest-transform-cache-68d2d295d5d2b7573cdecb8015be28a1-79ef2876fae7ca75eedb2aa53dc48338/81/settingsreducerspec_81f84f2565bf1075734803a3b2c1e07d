d6d820600abf8ea24c6964fcaf9ab019
"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
const tslib_1 = require("tslib");
const toolkit_1 = require("@reduxjs/toolkit");
const axios_1 = tslib_1.__importDefault(require("axios"));
const sinon_1 = tslib_1.__importDefault(require("sinon"));
const settings_reducer_1 = tslib_1.__importStar(require("./settings.reducer"));
describe('Settings reducer tests', () => {
    describe('Common tests', () => {
        it('should return the initial state', () => {
            const toTest = (0, settings_reducer_1.default)(undefined, { type: '' });
            expect(toTest).toMatchObject({
                loading: false,
                errorMessage: null,
                updateSuccess: false,
                updateFailure: false,
            });
        });
    });
    describe('Settings update', () => {
        it('should detect a request', () => {
            const toTest = (0, settings_reducer_1.default)(undefined, { type: settings_reducer_1.updateAccount.pending.type });
            expect(toTest).toMatchObject({
                updateSuccess: false,
                updateFailure: false,
                loading: true,
            });
        });
        it('should detect a success', () => {
            const toTest = (0, settings_reducer_1.default)(undefined, { type: settings_reducer_1.updateAccount.fulfilled.type });
            expect(toTest).toMatchObject({
                updateSuccess: true,
                updateFailure: false,
                loading: false,
            });
        });
        it('should detect a failure', () => {
            const toTest = (0, settings_reducer_1.default)(undefined, { type: settings_reducer_1.updateAccount.rejected.type });
            expect(toTest).toMatchObject({
                updateSuccess: false,
                updateFailure: true,
                loading: false,
            });
        });
        it('should reset the state', () => {
            const initialState = {
                loading: false,
                errorMessage: null,
                successMessage: null,
                updateSuccess: false,
                updateFailure: false,
            };
            expect((0, settings_reducer_1.default)(Object.assign(Object.assign({}, initialState), { loading: true }), (0, settings_reducer_1.reset)())).toEqual(Object.assign({}, initialState));
        });
    });
    describe('Actions', () => {
        let store;
        const resolvedObject = { value: 'whatever' };
        const getState = jest.fn();
        const dispatch = jest.fn();
        const extra = {};
        beforeEach(() => {
            store = (0, toolkit_1.configureStore)({
                reducer: (state = [], action) => [...state, action],
            });
            axios_1.default.get = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
            axios_1.default.post = sinon_1.default.stub().returns(Promise.resolve(resolvedObject));
        });
        it('dispatches UPDATE_ACCOUNT_PENDING and UPDATE_ACCOUNT_FULFILLED actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            const arg = '';
            const result = yield (0, settings_reducer_1.updateAccount)(arg)(dispatch, getState, extra);
            const pendingAction = dispatch.mock.calls[0][0];
            expect(pendingAction.meta.requestStatus).toBe('pending');
            expect(settings_reducer_1.updateAccount.fulfilled.match(result)).toBe(true);
            expect(result.payload).toBe(resolvedObject);
        }));
        it('dispatches RESET actions', () => tslib_1.__awaiter(void 0, void 0, void 0, function* () {
            yield store.dispatch((0, settings_reducer_1.reset)());
            expect(store.getState()).toEqual([expect.any(Object), expect.objectContaining((0, settings_reducer_1.reset)())]);
        }));
    });
});
//# sourceMappingURL=data:application/json;charset=utf-8;base64,